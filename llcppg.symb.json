[{
		"mangle":	"UTF8ToHtml",
		"c++":	"UTF8ToHtml(unsigned char *, int *, const unsigned char *, int *)",
		"go":	"UTF8ToHtml"
	}, {
		"mangle":	"UTF8Toisolat1",
		"c++":	"UTF8Toisolat1(unsigned char *, int *, const unsigned char *, int *)",
		"go":	"UTF8Toisolat1"
	}, {
		"mangle":	"__htmlDefaultSAXHandler",
		"c++":	"__htmlDefaultSAXHandler()",
		"go":	"X__htmlDefaultSAXHandler"
	}, {
		"mangle":	"__oldXMLWDcompatibility",
		"c++":	"__oldXMLWDcompatibility()",
		"go":	"X__oldXMLWDcompatibility"
	}, {
		"mangle":	"__xmlBufferAllocScheme",
		"c++":	"__xmlBufferAllocScheme()",
		"go":	"X__xmlBufferAllocScheme"
	}, {
		"mangle":	"__xmlDefaultBufferSize",
		"c++":	"__xmlDefaultBufferSize()",
		"go":	"X__xmlDefaultBufferSize"
	}, {
		"mangle":	"__xmlDefaultSAXHandler",
		"c++":	"__xmlDefaultSAXHandler()",
		"go":	"X__xmlDefaultSAXHandler"
	}, {
		"mangle":	"__xmlDefaultSAXLocator",
		"c++":	"__xmlDefaultSAXLocator()",
		"go":	"X__xmlDefaultSAXLocator"
	}, {
		"mangle":	"__xmlDeregisterNodeDefaultValue",
		"c++":	"__xmlDeregisterNodeDefaultValue()",
		"go":	"X__xmlDeregisterNodeDefaultValue"
	}, {
		"mangle":	"__xmlDoValidityCheckingDefaultValue",
		"c++":	"__xmlDoValidityCheckingDefaultValue()",
		"go":	"X__xmlDoValidityCheckingDefaultValue"
	}, {
		"mangle":	"__xmlGenericError",
		"c++":	"__xmlGenericError()",
		"go":	"X__xmlGenericError"
	}, {
		"mangle":	"__xmlGenericErrorContext",
		"c++":	"__xmlGenericErrorContext()",
		"go":	"X__xmlGenericErrorContext"
	}, {
		"mangle":	"__xmlGetWarningsDefaultValue",
		"c++":	"__xmlGetWarningsDefaultValue()",
		"go":	"X__xmlGetWarningsDefaultValue"
	}, {
		"mangle":	"__xmlIndentTreeOutput",
		"c++":	"__xmlIndentTreeOutput()",
		"go":	"X__xmlIndentTreeOutput"
	}, {
		"mangle":	"__xmlKeepBlanksDefaultValue",
		"c++":	"__xmlKeepBlanksDefaultValue()",
		"go":	"X__xmlKeepBlanksDefaultValue"
	}, {
		"mangle":	"__xmlLastError",
		"c++":	"__xmlLastError()",
		"go":	"X__xmlLastError"
	}, {
		"mangle":	"__xmlLineNumbersDefaultValue",
		"c++":	"__xmlLineNumbersDefaultValue()",
		"go":	"X__xmlLineNumbersDefaultValue"
	}, {
		"mangle":	"__xmlLoadExtDtdDefaultValue",
		"c++":	"__xmlLoadExtDtdDefaultValue()",
		"go":	"X__xmlLoadExtDtdDefaultValue"
	}, {
		"mangle":	"__xmlOutputBufferCreateFilename",
		"c++":	"__xmlOutputBufferCreateFilename(const char *, xmlCharEncodingHandlerPtr, int)",
		"go":	"X__xmlOutputBufferCreateFilename"
	}, {
		"mangle":	"__xmlOutputBufferCreateFilenameValue",
		"c++":	"__xmlOutputBufferCreateFilenameValue()",
		"go":	"X__xmlOutputBufferCreateFilenameValue"
	}, {
		"mangle":	"__xmlParserDebugEntities",
		"c++":	"__xmlParserDebugEntities()",
		"go":	"X__xmlParserDebugEntities"
	}, {
		"mangle":	"__xmlParserInputBufferCreateFilename",
		"c++":	"__xmlParserInputBufferCreateFilename(const char *, xmlCharEncoding)",
		"go":	"X__xmlParserInputBufferCreateFilename"
	}, {
		"mangle":	"__xmlParserInputBufferCreateFilenameValue",
		"c++":	"__xmlParserInputBufferCreateFilenameValue()",
		"go":	"X__xmlParserInputBufferCreateFilenameValue"
	}, {
		"mangle":	"__xmlParserVersion",
		"c++":	"__xmlParserVersion()",
		"go":	"X__xmlParserVersion"
	}, {
		"mangle":	"__xmlPedanticParserDefaultValue",
		"c++":	"__xmlPedanticParserDefaultValue()",
		"go":	"X__xmlPedanticParserDefaultValue"
	}, {
		"mangle":	"__xmlRegisterNodeDefaultValue",
		"c++":	"__xmlRegisterNodeDefaultValue()",
		"go":	"X__xmlRegisterNodeDefaultValue"
	}, {
		"mangle":	"__xmlSaveNoEmptyTags",
		"c++":	"__xmlSaveNoEmptyTags()",
		"go":	"X__xmlSaveNoEmptyTags"
	}, {
		"mangle":	"__xmlStructuredError",
		"c++":	"__xmlStructuredError()",
		"go":	"X__xmlStructuredError"
	}, {
		"mangle":	"__xmlStructuredErrorContext",
		"c++":	"__xmlStructuredErrorContext()",
		"go":	"X__xmlStructuredErrorContext"
	}, {
		"mangle":	"__xmlSubstituteEntitiesDefaultValue",
		"c++":	"__xmlSubstituteEntitiesDefaultValue()",
		"go":	"X__xmlSubstituteEntitiesDefaultValue"
	}, {
		"mangle":	"__xmlTreeIndentString",
		"c++":	"__xmlTreeIndentString()",
		"go":	"X__xmlTreeIndentString"
	}, {
		"mangle":	"attribute",
		"c++":	"attribute(void *, const xmlChar *, const xmlChar *)",
		"go":	"GetAttribute"
	}, {
		"mangle":	"attributeDecl",
		"c++":	"attributeDecl(void *, const xmlChar *, const xmlChar *, int, int, const xmlChar *, xmlEnumerationPtr)",
		"go":	"AttributeDecl"
	}, {
		"mangle":	"cdataBlock",
		"c++":	"cdataBlock(void *, const xmlChar *, int)",
		"go":	"CdataBlock"
	}, {
		"mangle":	"characters",
		"c++":	"characters(void *, const xmlChar *, int)",
		"go":	"Characters"
	}, {
		"mangle":	"checkNamespace",
		"c++":	"checkNamespace(void *, xmlChar *)",
		"go":	"CheckNamespace"
	}, {
		"mangle":	"comment",
		"c++":	"comment(void *, const xmlChar *)",
		"go":	"Comment"
	}, {
		"mangle":	"elementDecl",
		"c++":	"elementDecl(void *, const xmlChar *, int, xmlElementContentPtr)",
		"go":	"ElementDecl"
	}, {
		"mangle":	"endDocument",
		"c++":	"endDocument(void *)",
		"go":	"EndDocument"
	}, {
		"mangle":	"endElement",
		"c++":	"endElement(void *, const xmlChar *)",
		"go":	"EndElement"
	}, {
		"mangle":	"entityDecl",
		"c++":	"entityDecl(void *, const xmlChar *, int, const xmlChar *, const xmlChar *, xmlChar *)",
		"go":	"EntityDecl"
	}, {
		"mangle":	"externalSubset",
		"c++":	"externalSubset(void *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"ExternalSubset"
	}, {
		"mangle":	"getColumnNumber",
		"c++":	"getColumnNumber(void *)",
		"go":	"GetColumnNumber"
	}, {
		"mangle":	"getEntity",
		"c++":	"getEntity(void *, const xmlChar *)",
		"go":	"GetEntity"
	}, {
		"mangle":	"getLineNumber",
		"c++":	"getLineNumber(void *)",
		"go":	"GetLineNumber"
	}, {
		"mangle":	"getNamespace",
		"c++":	"getNamespace(void *)",
		"go":	"GetNamespace"
	}, {
		"mangle":	"getParameterEntity",
		"c++":	"getParameterEntity(void *, const xmlChar *)",
		"go":	"GetParameterEntity__1"
	}, {
		"mangle":	"getPublicId",
		"c++":	"getPublicId(void *)",
		"go":	"GetPublicId"
	}, {
		"mangle":	"getSystemId",
		"c++":	"getSystemId(void *)",
		"go":	"GetSystemId"
	}, {
		"mangle":	"globalNamespace",
		"c++":	"globalNamespace(void *, const xmlChar *, const xmlChar *)",
		"go":	"GlobalNamespace"
	}, {
		"mangle":	"hasExternalSubset",
		"c++":	"hasExternalSubset(void *)",
		"go":	"HasExternalSubset"
	}, {
		"mangle":	"hasInternalSubset",
		"c++":	"hasInternalSubset(void *)",
		"go":	"HasInternalSubset"
	}, {
		"mangle":	"htmlAttrAllowed",
		"c++":	"htmlAttrAllowed(const htmlElemDesc *, const xmlChar *, int)",
		"go":	"(*HtmlElemDesc).HtmlAttrAllowed"
	}, {
		"mangle":	"htmlAutoCloseTag",
		"c++":	"htmlAutoCloseTag(htmlDocPtr, const xmlChar *, htmlNodePtr)",
		"go":	"HtmlAutoCloseTag"
	}, {
		"mangle":	"htmlCreateFileParserCtxt",
		"c++":	"htmlCreateFileParserCtxt(const char *, const char *)",
		"go":	"HtmlCreateFileParserCtxt"
	}, {
		"mangle":	"htmlCreateMemoryParserCtxt",
		"c++":	"htmlCreateMemoryParserCtxt(const char *, int)",
		"go":	"HtmlCreateMemoryParserCtxt"
	}, {
		"mangle":	"htmlCreatePushParserCtxt",
		"c++":	"htmlCreatePushParserCtxt(htmlSAXHandlerPtr, void *, const char *, int, const char *, xmlCharEncoding)",
		"go":	"HtmlCreatePushParserCtxt"
	}, {
		"mangle":	"htmlCtxtParseDocument",
		"c++":	"htmlCtxtParseDocument(htmlParserCtxtPtr, xmlParserInputPtr)",
		"go":	"HtmlCtxtParseDocument"
	}, {
		"mangle":	"htmlCtxtReadDoc",
		"c++":	"htmlCtxtReadDoc(xmlParserCtxtPtr, const xmlChar *, const char *, const char *, int)",
		"go":	"HtmlCtxtReadDoc"
	}, {
		"mangle":	"htmlCtxtReadFd",
		"c++":	"htmlCtxtReadFd(xmlParserCtxtPtr, int, const char *, const char *, int)",
		"go":	"HtmlCtxtReadFd"
	}, {
		"mangle":	"htmlCtxtReadFile",
		"c++":	"htmlCtxtReadFile(xmlParserCtxtPtr, const char *, const char *, int)",
		"go":	"HtmlCtxtReadFile"
	}, {
		"mangle":	"htmlCtxtReadIO",
		"c++":	"htmlCtxtReadIO(xmlParserCtxtPtr, xmlInputReadCallback, xmlInputCloseCallback, void *, const char *, const char *, int)",
		"go":	"HtmlCtxtReadIO"
	}, {
		"mangle":	"htmlCtxtReadMemory",
		"c++":	"htmlCtxtReadMemory(xmlParserCtxtPtr, const char *, int, const char *, const char *, int)",
		"go":	"HtmlCtxtReadMemory"
	}, {
		"mangle":	"htmlCtxtReset",
		"c++":	"htmlCtxtReset(htmlParserCtxtPtr)",
		"go":	"HtmlCtxtReset"
	}, {
		"mangle":	"htmlCtxtUseOptions",
		"c++":	"htmlCtxtUseOptions(htmlParserCtxtPtr, int)",
		"go":	"HtmlCtxtUseOptions"
	}, {
		"mangle":	"htmlDefaultSAXHandlerInit",
		"c++":	"htmlDefaultSAXHandlerInit()",
		"go":	"HtmlDefaultSAXHandlerInit"
	}, {
		"mangle":	"htmlDocContentDumpFormatOutput",
		"c++":	"htmlDocContentDumpFormatOutput(xmlOutputBufferPtr, xmlDocPtr, const char *, int)",
		"go":	"HtmlDocContentDumpFormatOutput"
	}, {
		"mangle":	"htmlDocContentDumpOutput",
		"c++":	"htmlDocContentDumpOutput(xmlOutputBufferPtr, xmlDocPtr, const char *)",
		"go":	"HtmlDocContentDumpOutput"
	}, {
		"mangle":	"htmlDocDump",
		"c++":	"htmlDocDump(FILE *, xmlDocPtr)",
		"go":	"HtmlDocDump"
	}, {
		"mangle":	"htmlDocDumpMemory",
		"c++":	"htmlDocDumpMemory(xmlDocPtr, xmlChar **, int *)",
		"go":	"HtmlDocDumpMemory"
	}, {
		"mangle":	"htmlDocDumpMemoryFormat",
		"c++":	"htmlDocDumpMemoryFormat(xmlDocPtr, xmlChar **, int *, int)",
		"go":	"HtmlDocDumpMemoryFormat"
	}, {
		"mangle":	"htmlElementAllowedHere",
		"c++":	"htmlElementAllowedHere(const htmlElemDesc *, const xmlChar *)",
		"go":	"(*HtmlElemDesc).HtmlElementAllowedHere"
	}, {
		"mangle":	"htmlElementStatusHere",
		"c++":	"htmlElementStatusHere(const htmlElemDesc *, const htmlElemDesc *)",
		"go":	"(*HtmlElemDesc).HtmlElementStatusHere"
	}, {
		"mangle":	"htmlEncodeEntities",
		"c++":	"htmlEncodeEntities(unsigned char *, int *, const unsigned char *, int *, int)",
		"go":	"HtmlEncodeEntities"
	}, {
		"mangle":	"htmlEntityLookup",
		"c++":	"htmlEntityLookup(const xmlChar *)",
		"go":	"(*Char).HtmlEntityLookup"
	}, {
		"mangle":	"htmlEntityValueLookup",
		"c++":	"htmlEntityValueLookup(unsigned int)",
		"go":	"HtmlEntityValueLookup"
	}, {
		"mangle":	"htmlFreeParserCtxt",
		"c++":	"htmlFreeParserCtxt(htmlParserCtxtPtr)",
		"go":	"HtmlFreeParserCtxt"
	}, {
		"mangle":	"htmlGetMetaEncoding",
		"c++":	"htmlGetMetaEncoding(htmlDocPtr)",
		"go":	"HtmlGetMetaEncoding"
	}, {
		"mangle":	"htmlHandleOmittedElem",
		"c++":	"htmlHandleOmittedElem(int)",
		"go":	"HtmlHandleOmittedElem"
	}, {
		"mangle":	"htmlInitAutoClose",
		"c++":	"htmlInitAutoClose()",
		"go":	"HtmlInitAutoClose"
	}, {
		"mangle":	"htmlIsAutoClosed",
		"c++":	"htmlIsAutoClosed(htmlDocPtr, htmlNodePtr)",
		"go":	"HtmlIsAutoClosed"
	}, {
		"mangle":	"htmlIsBooleanAttr",
		"c++":	"htmlIsBooleanAttr(const xmlChar *)",
		"go":	"(*Char).HtmlIsBooleanAttr"
	}, {
		"mangle":	"htmlIsScriptAttribute",
		"c++":	"htmlIsScriptAttribute(const xmlChar *)",
		"go":	"(*Char).HtmlIsScriptAttribute"
	}, {
		"mangle":	"htmlNewDoc",
		"c++":	"htmlNewDoc(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).HtmlNewDoc"
	}, {
		"mangle":	"htmlNewDocNoDtD",
		"c++":	"htmlNewDocNoDtD(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).HtmlNewDocNoDtD"
	}, {
		"mangle":	"htmlNewParserCtxt",
		"c++":	"htmlNewParserCtxt()",
		"go":	"HtmlNewParserCtxt"
	}, {
		"mangle":	"htmlNewSAXParserCtxt",
		"c++":	"htmlNewSAXParserCtxt(const htmlSAXHandler *, void *)",
		"go":	"(*HtmlSAXHandler).HtmlNewSAXParserCtxt"
	}, {
		"mangle":	"htmlNodeDump",
		"c++":	"htmlNodeDump(xmlBufferPtr, xmlDocPtr, xmlNodePtr)",
		"go":	"HtmlNodeDump"
	}, {
		"mangle":	"htmlNodeDumpFile",
		"c++":	"htmlNodeDumpFile(FILE *, xmlDocPtr, xmlNodePtr)",
		"go":	"HtmlNodeDumpFile"
	}, {
		"mangle":	"htmlNodeDumpFileFormat",
		"c++":	"htmlNodeDumpFileFormat(FILE *, xmlDocPtr, xmlNodePtr, const char *, int)",
		"go":	"HtmlNodeDumpFileFormat"
	}, {
		"mangle":	"htmlNodeDumpFormatOutput",
		"c++":	"htmlNodeDumpFormatOutput(xmlOutputBufferPtr, xmlDocPtr, xmlNodePtr, const char *, int)",
		"go":	"HtmlNodeDumpFormatOutput"
	}, {
		"mangle":	"htmlNodeDumpOutput",
		"c++":	"htmlNodeDumpOutput(xmlOutputBufferPtr, xmlDocPtr, xmlNodePtr, const char *)",
		"go":	"HtmlNodeDumpOutput"
	}, {
		"mangle":	"htmlNodeStatus",
		"c++":	"htmlNodeStatus(htmlNodePtr, int)",
		"go":	"HtmlNodeStatus"
	}, {
		"mangle":	"htmlParseCharRef",
		"c++":	"htmlParseCharRef(htmlParserCtxtPtr)",
		"go":	"HtmlParseCharRef"
	}, {
		"mangle":	"htmlParseChunk",
		"c++":	"htmlParseChunk(htmlParserCtxtPtr, const char *, int, int)",
		"go":	"HtmlParseChunk"
	}, {
		"mangle":	"htmlParseDoc",
		"c++":	"htmlParseDoc(const xmlChar *, const char *)",
		"go":	"(*Char).HtmlParseDoc"
	}, {
		"mangle":	"htmlParseDocument",
		"c++":	"htmlParseDocument(htmlParserCtxtPtr)",
		"go":	"HtmlParseDocument"
	}, {
		"mangle":	"htmlParseElement",
		"c++":	"htmlParseElement(htmlParserCtxtPtr)",
		"go":	"HtmlParseElement"
	}, {
		"mangle":	"htmlParseEntityRef",
		"c++":	"htmlParseEntityRef(htmlParserCtxtPtr, const xmlChar **)",
		"go":	"HtmlParseEntityRef"
	}, {
		"mangle":	"htmlParseFile",
		"c++":	"htmlParseFile(const char *, const char *)",
		"go":	"HtmlParseFile"
	}, {
		"mangle":	"htmlReadDoc",
		"c++":	"htmlReadDoc(const xmlChar *, const char *, const char *, int)",
		"go":	"(*Char).HtmlReadDoc"
	}, {
		"mangle":	"htmlReadFd",
		"c++":	"htmlReadFd(int, const char *, const char *, int)",
		"go":	"HtmlReadFd"
	}, {
		"mangle":	"htmlReadFile",
		"c++":	"htmlReadFile(const char *, const char *, int)",
		"go":	"HtmlReadFile"
	}, {
		"mangle":	"htmlReadIO",
		"c++":	"htmlReadIO(xmlInputReadCallback, xmlInputCloseCallback, void *, const char *, const char *, int)",
		"go":	"HtmlReadIO"
	}, {
		"mangle":	"htmlReadMemory",
		"c++":	"htmlReadMemory(const char *, int, const char *, const char *, int)",
		"go":	"HtmlReadMemory"
	}, {
		"mangle":	"htmlSAXParseDoc",
		"c++":	"htmlSAXParseDoc(const xmlChar *, const char *, htmlSAXHandlerPtr, void *)",
		"go":	"(*Char).HtmlSAXParseDoc"
	}, {
		"mangle":	"htmlSAXParseFile",
		"c++":	"htmlSAXParseFile(const char *, const char *, htmlSAXHandlerPtr, void *)",
		"go":	"HtmlSAXParseFile"
	}, {
		"mangle":	"htmlSaveFile",
		"c++":	"htmlSaveFile(const char *, xmlDocPtr)",
		"go":	"HtmlSaveFile"
	}, {
		"mangle":	"htmlSaveFileEnc",
		"c++":	"htmlSaveFileEnc(const char *, xmlDocPtr, const char *)",
		"go":	"HtmlSaveFileEnc"
	}, {
		"mangle":	"htmlSaveFileFormat",
		"c++":	"htmlSaveFileFormat(const char *, xmlDocPtr, const char *, int)",
		"go":	"HtmlSaveFileFormat"
	}, {
		"mangle":	"htmlSetMetaEncoding",
		"c++":	"htmlSetMetaEncoding(htmlDocPtr, const xmlChar *)",
		"go":	"HtmlSetMetaEncoding"
	}, {
		"mangle":	"htmlTagLookup",
		"c++":	"htmlTagLookup(const xmlChar *)",
		"go":	"(*Char).HtmlTagLookup"
	}, {
		"mangle":	"ignorableWhitespace",
		"c++":	"ignorableWhitespace(void *, const xmlChar *, int)",
		"go":	"IgnorableWhitespace"
	}, {
		"mangle":	"initGenericErrorDefaultFunc",
		"c++":	"initGenericErrorDefaultFunc(xmlGenericErrorFunc *)",
		"go":	"InitGenericErrorDefaultFunc"
	}, {
		"mangle":	"inithtmlDefaultSAXHandler",
		"c++":	"inithtmlDefaultSAXHandler(xmlSAXHandlerV1 *)",
		"go":	"(*SAXHandlerV1).InithtmlDefaultSAXHandler"
	}, {
		"mangle":	"initxmlDefaultSAXHandler",
		"c++":	"initxmlDefaultSAXHandler(xmlSAXHandlerV1 *, int)",
		"go":	"(*SAXHandlerV1).InitxmlDefaultSAXHandler"
	}, {
		"mangle":	"inputPop",
		"c++":	"inputPop(xmlParserCtxtPtr)",
		"go":	"InputPop"
	}, {
		"mangle":	"inputPush",
		"c++":	"inputPush(xmlParserCtxtPtr, xmlParserInputPtr)",
		"go":	"InputPush"
	}, {
		"mangle":	"internalSubset",
		"c++":	"internalSubset(void *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"InternalSubset"
	}, {
		"mangle":	"isStandalone",
		"c++":	"isStandalone(void *)",
		"go":	"IsStandalone"
	}, {
		"mangle":	"isolat1ToUTF8",
		"c++":	"isolat1ToUTF8(unsigned char *, int *, const unsigned char *, int *)",
		"go":	"Isolat1ToUTF8"
	}, {
		"mangle":	"namePop",
		"c++":	"namePop(xmlParserCtxtPtr)",
		"go":	"NamePop"
	}, {
		"mangle":	"namePush",
		"c++":	"namePush(xmlParserCtxtPtr, const xmlChar *)",
		"go":	"NamePush"
	}, {
		"mangle":	"namespaceDecl",
		"c++":	"namespaceDecl(void *, const xmlChar *, const xmlChar *)",
		"go":	"NamespaceDecl"
	}, {
		"mangle":	"nodePop",
		"c++":	"nodePop(xmlParserCtxtPtr)",
		"go":	"NodePop"
	}, {
		"mangle":	"nodePush",
		"c++":	"nodePush(xmlParserCtxtPtr, xmlNodePtr)",
		"go":	"NodePush"
	}, {
		"mangle":	"notationDecl",
		"c++":	"notationDecl(void *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"NotationDecl"
	}, {
		"mangle":	"processingInstruction",
		"c++":	"processingInstruction(void *, const xmlChar *, const xmlChar *)",
		"go":	"ProcessingInstruction"
	}, {
		"mangle":	"reference",
		"c++":	"reference(void *, const xmlChar *)",
		"go":	"Reference"
	}, {
		"mangle":	"resolveEntity",
		"c++":	"resolveEntity(void *, const xmlChar *, const xmlChar *)",
		"go":	"ResolveEntity"
	}, {
		"mangle":	"setDocumentLocator",
		"c++":	"setDocumentLocator(void *, xmlSAXLocatorPtr)",
		"go":	"SetDocumentLocator"
	}, {
		"mangle":	"setNamespace",
		"c++":	"setNamespace(void *, const xmlChar *)",
		"go":	"SetNamespace"
	}, {
		"mangle":	"startDocument",
		"c++":	"startDocument(void *)",
		"go":	"StartDocument"
	}, {
		"mangle":	"startElement",
		"c++":	"startElement(void *, const xmlChar *, const xmlChar **)",
		"go":	"StartElement"
	}, {
		"mangle":	"unparsedEntityDecl",
		"c++":	"unparsedEntityDecl(void *, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"UnparsedEntityDecl"
	}, {
		"mangle":	"valuePop",
		"c++":	"valuePop(xmlXPathParserContextPtr)",
		"go":	"ValuePop"
	}, {
		"mangle":	"valuePush",
		"c++":	"valuePush(xmlXPathParserContextPtr, xmlXPathObjectPtr)",
		"go":	"ValuePush"
	}, {
		"mangle":	"xlinkGetDefaultDetect",
		"c++":	"xlinkGetDefaultDetect()",
		"go":	"XlinkGetDefaultDetect"
	}, {
		"mangle":	"xlinkGetDefaultHandler",
		"c++":	"xlinkGetDefaultHandler()",
		"go":	"XlinkGetDefaultHandler"
	}, {
		"mangle":	"xlinkIsLink",
		"c++":	"xlinkIsLink(xmlDocPtr, xmlNodePtr)",
		"go":	"XlinkIsLink"
	}, {
		"mangle":	"xlinkSetDefaultDetect",
		"c++":	"xlinkSetDefaultDetect(xlinkNodeDetectFunc)",
		"go":	"XlinkSetDefaultDetect"
	}, {
		"mangle":	"xlinkSetDefaultHandler",
		"c++":	"xlinkSetDefaultHandler(xlinkHandlerPtr)",
		"go":	"XlinkSetDefaultHandler"
	}, {
		"mangle":	"xmlACatalogAdd",
		"c++":	"xmlACatalogAdd(xmlCatalogPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"ACatalogAdd"
	}, {
		"mangle":	"xmlACatalogDump",
		"c++":	"xmlACatalogDump(xmlCatalogPtr, FILE *)",
		"go":	"ACatalogDump"
	}, {
		"mangle":	"xmlACatalogRemove",
		"c++":	"xmlACatalogRemove(xmlCatalogPtr, const xmlChar *)",
		"go":	"ACatalogRemove"
	}, {
		"mangle":	"xmlACatalogResolve",
		"c++":	"xmlACatalogResolve(xmlCatalogPtr, const xmlChar *, const xmlChar *)",
		"go":	"ACatalogResolve"
	}, {
		"mangle":	"xmlACatalogResolvePublic",
		"c++":	"xmlACatalogResolvePublic(xmlCatalogPtr, const xmlChar *)",
		"go":	"ACatalogResolvePublic"
	}, {
		"mangle":	"xmlACatalogResolveSystem",
		"c++":	"xmlACatalogResolveSystem(xmlCatalogPtr, const xmlChar *)",
		"go":	"ACatalogResolveSystem"
	}, {
		"mangle":	"xmlACatalogResolveURI",
		"c++":	"xmlACatalogResolveURI(xmlCatalogPtr, const xmlChar *)",
		"go":	"ACatalogResolveURI"
	}, {
		"mangle":	"xmlAddAttributeDecl",
		"c++":	"xmlAddAttributeDecl(xmlValidCtxtPtr, xmlDtdPtr, const xmlChar *, const xmlChar *, const xmlChar *, xmlAttributeType, xmlAttributeDefault, const xmlChar *, xmlEnumerationPtr)",
		"go":	"AddAttributeDecl"
	}, {
		"mangle":	"xmlAddChild",
		"c++":	"xmlAddChild(xmlNodePtr, xmlNodePtr)",
		"go":	"AddChild"
	}, {
		"mangle":	"xmlAddChildList",
		"c++":	"xmlAddChildList(xmlNodePtr, xmlNodePtr)",
		"go":	"AddChildList"
	}, {
		"mangle":	"xmlAddDocEntity",
		"c++":	"xmlAddDocEntity(xmlDocPtr, const xmlChar *, int, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"AddDocEntity"
	}, {
		"mangle":	"xmlAddDtdEntity",
		"c++":	"xmlAddDtdEntity(xmlDocPtr, const xmlChar *, int, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"AddDtdEntity"
	}, {
		"mangle":	"xmlAddElementDecl",
		"c++":	"xmlAddElementDecl(xmlValidCtxtPtr, xmlDtdPtr, const xmlChar *, xmlElementTypeVal, xmlElementContentPtr)",
		"go":	"AddElementDecl"
	}, {
		"mangle":	"xmlAddEncodingAlias",
		"c++":	"xmlAddEncodingAlias(const char *, const char *)",
		"go":	"AddEncodingAlias"
	}, {
		"mangle":	"xmlAddEntity",
		"c++":	"xmlAddEntity(xmlDocPtr, int, const xmlChar *, int, const xmlChar *, const xmlChar *, const xmlChar *, xmlEntityPtr *)",
		"go":	"AddEntity"
	}, {
		"mangle":	"xmlAddID",
		"c++":	"xmlAddID(xmlValidCtxtPtr, xmlDocPtr, const xmlChar *, xmlAttrPtr)",
		"go":	"AddID"
	}, {
		"mangle":	"xmlAddIDSafe",
		"c++":	"xmlAddIDSafe(xmlAttrPtr, const xmlChar *)",
		"go":	"AddIDSafe"
	}, {
		"mangle":	"xmlAddNextSibling",
		"c++":	"xmlAddNextSibling(xmlNodePtr, xmlNodePtr)",
		"go":	"AddNextSibling"
	}, {
		"mangle":	"xmlAddNotationDecl",
		"c++":	"xmlAddNotationDecl(xmlValidCtxtPtr, xmlDtdPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"AddNotationDecl"
	}, {
		"mangle":	"xmlAddPrevSibling",
		"c++":	"xmlAddPrevSibling(xmlNodePtr, xmlNodePtr)",
		"go":	"AddPrevSibling"
	}, {
		"mangle":	"xmlAddRef",
		"c++":	"xmlAddRef(xmlValidCtxtPtr, xmlDocPtr, const xmlChar *, xmlAttrPtr)",
		"go":	"AddRef"
	}, {
		"mangle":	"xmlAddSibling",
		"c++":	"xmlAddSibling(xmlNodePtr, xmlNodePtr)",
		"go":	"AddSibling"
	}, {
		"mangle":	"xmlAllocOutputBuffer",
		"c++":	"xmlAllocOutputBuffer(xmlCharEncodingHandlerPtr)",
		"go":	"AllocOutputBuffer"
	}, {
		"mangle":	"xmlAllocParserInputBuffer",
		"c++":	"xmlAllocParserInputBuffer(xmlCharEncoding)",
		"go":	"CharEncoding.AllocParserInputBuffer"
	}, {
		"mangle":	"xmlAttrSerializeTxtContent",
		"c++":	"xmlAttrSerializeTxtContent(xmlBufferPtr, xmlDocPtr, xmlAttrPtr, const xmlChar *)",
		"go":	"AttrSerializeTxtContent"
	}, {
		"mangle":	"xmlAutomataCompile",
		"c++":	"xmlAutomataCompile(xmlAutomataPtr)",
		"go":	"AutomataCompile"
	}, {
		"mangle":	"xmlAutomataGetInitState",
		"c++":	"xmlAutomataGetInitState(xmlAutomataPtr)",
		"go":	"AutomataGetInitState"
	}, {
		"mangle":	"xmlAutomataIsDeterminist",
		"c++":	"xmlAutomataIsDeterminist(xmlAutomataPtr)",
		"go":	"AutomataIsDeterminist"
	}, {
		"mangle":	"xmlAutomataNewAllTrans",
		"c++":	"xmlAutomataNewAllTrans(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, int)",
		"go":	"AutomataNewAllTrans"
	}, {
		"mangle":	"xmlAutomataNewCountTrans",
		"c++":	"xmlAutomataNewCountTrans(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, const xmlChar *, int, int, void *)",
		"go":	"AutomataNewCountTrans"
	}, {
		"mangle":	"xmlAutomataNewCountTrans2",
		"c++":	"xmlAutomataNewCountTrans2(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, const xmlChar *, const xmlChar *, int, int, void *)",
		"go":	"AutomataNewCountTrans2"
	}, {
		"mangle":	"xmlAutomataNewCountedTrans",
		"c++":	"xmlAutomataNewCountedTrans(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, int)",
		"go":	"AutomataNewCountedTrans"
	}, {
		"mangle":	"xmlAutomataNewCounter",
		"c++":	"xmlAutomataNewCounter(xmlAutomataPtr, int, int)",
		"go":	"AutomataNewCounter"
	}, {
		"mangle":	"xmlAutomataNewCounterTrans",
		"c++":	"xmlAutomataNewCounterTrans(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, int)",
		"go":	"AutomataNewCounterTrans"
	}, {
		"mangle":	"xmlAutomataNewEpsilon",
		"c++":	"xmlAutomataNewEpsilon(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr)",
		"go":	"AutomataNewEpsilon"
	}, {
		"mangle":	"xmlAutomataNewNegTrans",
		"c++":	"xmlAutomataNewNegTrans(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, const xmlChar *, const xmlChar *, void *)",
		"go":	"AutomataNewNegTrans"
	}, {
		"mangle":	"xmlAutomataNewOnceTrans",
		"c++":	"xmlAutomataNewOnceTrans(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, const xmlChar *, int, int, void *)",
		"go":	"AutomataNewOnceTrans"
	}, {
		"mangle":	"xmlAutomataNewOnceTrans2",
		"c++":	"xmlAutomataNewOnceTrans2(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, const xmlChar *, const xmlChar *, int, int, void *)",
		"go":	"AutomataNewOnceTrans2"
	}, {
		"mangle":	"xmlAutomataNewState",
		"c++":	"xmlAutomataNewState(xmlAutomataPtr)",
		"go":	"AutomataNewState"
	}, {
		"mangle":	"xmlAutomataNewTransition",
		"c++":	"xmlAutomataNewTransition(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, const xmlChar *, void *)",
		"go":	"AutomataNewTransition"
	}, {
		"mangle":	"xmlAutomataNewTransition2",
		"c++":	"xmlAutomataNewTransition2(xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, const xmlChar *, const xmlChar *, void *)",
		"go":	"AutomataNewTransition2"
	}, {
		"mangle":	"xmlAutomataSetFinalState",
		"c++":	"xmlAutomataSetFinalState(xmlAutomataPtr, xmlAutomataStatePtr)",
		"go":	"AutomataSetFinalState"
	}, {
		"mangle":	"xmlBoolToText",
		"c++":	"xmlBoolToText(int)",
		"go":	"BoolToText"
	}, {
		"mangle":	"xmlBufContent",
		"c++":	"xmlBufContent(const xmlBuf *)",
		"go":	"(*Buf).BufContent"
	}, {
		"mangle":	"xmlBufEnd",
		"c++":	"xmlBufEnd(xmlBufPtr)",
		"go":	"BufEnd"
	}, {
		"mangle":	"xmlBufGetNodeContent",
		"c++":	"xmlBufGetNodeContent(xmlBufPtr, const xmlNode *)",
		"go":	"BufGetNodeContent"
	}, {
		"mangle":	"xmlBufNodeDump",
		"c++":	"xmlBufNodeDump(xmlBufPtr, xmlDocPtr, xmlNodePtr, int, int)",
		"go":	"BufNodeDump"
	}, {
		"mangle":	"xmlBufShrink",
		"c++":	"xmlBufShrink(xmlBufPtr, size_t)",
		"go":	"BufShrink"
	}, {
		"mangle":	"xmlBufUse",
		"c++":	"xmlBufUse(const xmlBufPtr)",
		"go":	"BufUse"
	}, {
		"mangle":	"xmlBufferAdd",
		"c++":	"xmlBufferAdd(xmlBufferPtr, const xmlChar *, int)",
		"go":	"BufferAdd"
	}, {
		"mangle":	"xmlBufferAddHead",
		"c++":	"xmlBufferAddHead(xmlBufferPtr, const xmlChar *, int)",
		"go":	"BufferAddHead"
	}, {
		"mangle":	"xmlBufferCCat",
		"c++":	"xmlBufferCCat(xmlBufferPtr, const char *)",
		"go":	"BufferCCat"
	}, {
		"mangle":	"xmlBufferCat",
		"c++":	"xmlBufferCat(xmlBufferPtr, const xmlChar *)",
		"go":	"BufferCat"
	}, {
		"mangle":	"xmlBufferContent",
		"c++":	"xmlBufferContent(const xmlBuffer *)",
		"go":	"(*Buffer).BufferContent"
	}, {
		"mangle":	"xmlBufferCreate",
		"c++":	"xmlBufferCreate()",
		"go":	"BufferCreate"
	}, {
		"mangle":	"xmlBufferCreateSize",
		"c++":	"xmlBufferCreateSize(size_t)",
		"go":	"BufferCreateSize"
	}, {
		"mangle":	"xmlBufferCreateStatic",
		"c++":	"xmlBufferCreateStatic(void *, size_t)",
		"go":	"BufferCreateStatic"
	}, {
		"mangle":	"xmlBufferDetach",
		"c++":	"xmlBufferDetach(xmlBufferPtr)",
		"go":	"BufferDetach"
	}, {
		"mangle":	"xmlBufferDump",
		"c++":	"xmlBufferDump(FILE *, xmlBufferPtr)",
		"go":	"BufferDump"
	}, {
		"mangle":	"xmlBufferEmpty",
		"c++":	"xmlBufferEmpty(xmlBufferPtr)",
		"go":	"BufferEmpty"
	}, {
		"mangle":	"xmlBufferFree",
		"c++":	"xmlBufferFree(xmlBufferPtr)",
		"go":	"BufferFree"
	}, {
		"mangle":	"xmlBufferGrow",
		"c++":	"xmlBufferGrow(xmlBufferPtr, unsigned int)",
		"go":	"BufferGrow"
	}, {
		"mangle":	"xmlBufferLength",
		"c++":	"xmlBufferLength(const xmlBuffer *)",
		"go":	"(*Buffer).BufferLength"
	}, {
		"mangle":	"xmlBufferResize",
		"c++":	"xmlBufferResize(xmlBufferPtr, unsigned int)",
		"go":	"BufferResize"
	}, {
		"mangle":	"xmlBufferSetAllocationScheme",
		"c++":	"xmlBufferSetAllocationScheme(xmlBufferPtr, xmlBufferAllocationScheme)",
		"go":	"BufferSetAllocationScheme"
	}, {
		"mangle":	"xmlBufferShrink",
		"c++":	"xmlBufferShrink(xmlBufferPtr, unsigned int)",
		"go":	"BufferShrink"
	}, {
		"mangle":	"xmlBufferWriteCHAR",
		"c++":	"xmlBufferWriteCHAR(xmlBufferPtr, const xmlChar *)",
		"go":	"BufferWriteCHAR"
	}, {
		"mangle":	"xmlBufferWriteChar",
		"c++":	"xmlBufferWriteChar(xmlBufferPtr, const char *)",
		"go":	"BufferWriteChar"
	}, {
		"mangle":	"xmlBufferWriteQuotedString",
		"c++":	"xmlBufferWriteQuotedString(xmlBufferPtr, const xmlChar *)",
		"go":	"BufferWriteQuotedString"
	}, {
		"mangle":	"xmlBuildQName",
		"c++":	"xmlBuildQName(const xmlChar *, const xmlChar *, xmlChar *, int)",
		"go":	"(*Char).BuildQName"
	}, {
		"mangle":	"xmlBuildRelativeURI",
		"c++":	"xmlBuildRelativeURI(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).BuildRelativeURI"
	}, {
		"mangle":	"xmlBuildRelativeURISafe",
		"c++":	"xmlBuildRelativeURISafe(const xmlChar *, const xmlChar *, xmlChar **)",
		"go":	"(*Char).BuildRelativeURISafe"
	}, {
		"mangle":	"xmlBuildURI",
		"c++":	"xmlBuildURI(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).BuildURI"
	}, {
		"mangle":	"xmlBuildURISafe",
		"c++":	"xmlBuildURISafe(const xmlChar *, const xmlChar *, xmlChar **)",
		"go":	"(*Char).BuildURISafe"
	}, {
		"mangle":	"xmlByteConsumed",
		"c++":	"xmlByteConsumed(xmlParserCtxtPtr)",
		"go":	"ByteConsumed"
	}, {
		"mangle":	"xmlC14NDocDumpMemory",
		"c++":	"xmlC14NDocDumpMemory(xmlDocPtr, xmlNodeSetPtr, int, xmlChar **, int, xmlChar **)",
		"go":	"C14NDocDumpMemory"
	}, {
		"mangle":	"xmlC14NDocSave",
		"c++":	"xmlC14NDocSave(xmlDocPtr, xmlNodeSetPtr, int, xmlChar **, int, const char *, int)",
		"go":	"C14NDocSave"
	}, {
		"mangle":	"xmlC14NDocSaveTo",
		"c++":	"xmlC14NDocSaveTo(xmlDocPtr, xmlNodeSetPtr, int, xmlChar **, int, xmlOutputBufferPtr)",
		"go":	"C14NDocSaveTo"
	}, {
		"mangle":	"xmlC14NExecute",
		"c++":	"xmlC14NExecute(xmlDocPtr, xmlC14NIsVisibleCallback, void *, int, xmlChar **, int, xmlOutputBufferPtr)",
		"go":	"C14NExecute"
	}, {
		"mangle":	"xmlCanonicPath",
		"c++":	"xmlCanonicPath(const xmlChar *)",
		"go":	"(*Char).CanonicPath"
	}, {
		"mangle":	"xmlCatalogAdd",
		"c++":	"xmlCatalogAdd(const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"(*Char).CatalogAdd"
	}, {
		"mangle":	"xmlCatalogAddLocal",
		"c++":	"xmlCatalogAddLocal(void *, const xmlChar *)",
		"go":	"CatalogAddLocal"
	}, {
		"mangle":	"xmlCatalogCleanup",
		"c++":	"xmlCatalogCleanup()",
		"go":	"CatalogCleanup"
	}, {
		"mangle":	"xmlCatalogConvert",
		"c++":	"xmlCatalogConvert()",
		"go":	"CatalogConvert"
	}, {
		"mangle":	"xmlCatalogDump",
		"c++":	"xmlCatalogDump(FILE *)",
		"go":	"CatalogDump"
	}, {
		"mangle":	"xmlCatalogFreeLocal",
		"c++":	"xmlCatalogFreeLocal(void *)",
		"go":	"CatalogFreeLocal"
	}, {
		"mangle":	"xmlCatalogGetDefaults",
		"c++":	"xmlCatalogGetDefaults()",
		"go":	"CatalogGetDefaults"
	}, {
		"mangle":	"xmlCatalogGetPublic",
		"c++":	"xmlCatalogGetPublic(const xmlChar *)",
		"go":	"(*Char).CatalogGetPublic"
	}, {
		"mangle":	"xmlCatalogGetSystem",
		"c++":	"xmlCatalogGetSystem(const xmlChar *)",
		"go":	"(*Char).CatalogGetSystem"
	}, {
		"mangle":	"xmlCatalogIsEmpty",
		"c++":	"xmlCatalogIsEmpty(xmlCatalogPtr)",
		"go":	"CatalogIsEmpty"
	}, {
		"mangle":	"xmlCatalogLocalResolve",
		"c++":	"xmlCatalogLocalResolve(void *, const xmlChar *, const xmlChar *)",
		"go":	"CatalogLocalResolve"
	}, {
		"mangle":	"xmlCatalogLocalResolveURI",
		"c++":	"xmlCatalogLocalResolveURI(void *, const xmlChar *)",
		"go":	"CatalogLocalResolveURI"
	}, {
		"mangle":	"xmlCatalogRemove",
		"c++":	"xmlCatalogRemove(const xmlChar *)",
		"go":	"(*Char).CatalogRemove"
	}, {
		"mangle":	"xmlCatalogResolve",
		"c++":	"xmlCatalogResolve(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).CatalogResolve"
	}, {
		"mangle":	"xmlCatalogResolvePublic",
		"c++":	"xmlCatalogResolvePublic(const xmlChar *)",
		"go":	"(*Char).CatalogResolvePublic"
	}, {
		"mangle":	"xmlCatalogResolveSystem",
		"c++":	"xmlCatalogResolveSystem(const xmlChar *)",
		"go":	"(*Char).CatalogResolveSystem"
	}, {
		"mangle":	"xmlCatalogResolveURI",
		"c++":	"xmlCatalogResolveURI(const xmlChar *)",
		"go":	"(*Char).CatalogResolveURI"
	}, {
		"mangle":	"xmlCatalogSetDebug",
		"c++":	"xmlCatalogSetDebug(int)",
		"go":	"CatalogSetDebug"
	}, {
		"mangle":	"xmlCatalogSetDefaultPrefer",
		"c++":	"xmlCatalogSetDefaultPrefer(xmlCatalogPrefer)",
		"go":	"CatalogPrefer.CatalogSetDefaultPrefer"
	}, {
		"mangle":	"xmlCatalogSetDefaults",
		"c++":	"xmlCatalogSetDefaults(xmlCatalogAllow)",
		"go":	"CatalogAllow.CatalogSetDefaults"
	}, {
		"mangle":	"xmlCharEncCloseFunc",
		"c++":	"xmlCharEncCloseFunc(xmlCharEncodingHandler *)",
		"go":	"(*CharEncodingHandler).CharEncCloseFunc"
	}, {
		"mangle":	"xmlCharEncFirstLine",
		"c++":	"xmlCharEncFirstLine(xmlCharEncodingHandler *, struct _xmlBuffer *, struct _xmlBuffer *)",
		"go":	"(*CharEncodingHandler).CharEncFirstLine"
	}, {
		"mangle":	"xmlCharEncInFunc",
		"c++":	"xmlCharEncInFunc(xmlCharEncodingHandler *, struct _xmlBuffer *, struct _xmlBuffer *)",
		"go":	"(*CharEncodingHandler).CharEncInFunc"
	}, {
		"mangle":	"xmlCharEncOutFunc",
		"c++":	"xmlCharEncOutFunc(xmlCharEncodingHandler *, struct _xmlBuffer *, struct _xmlBuffer *)",
		"go":	"(*CharEncodingHandler).CharEncOutFunc"
	}, {
		"mangle":	"xmlCharInRange",
		"c++":	"xmlCharInRange(unsigned int, const xmlChRangeGroup *)",
		"go":	"CharInRange"
	}, {
		"mangle":	"xmlCharStrdup",
		"c++":	"xmlCharStrdup(const char *)",
		"go":	"CharStrdup"
	}, {
		"mangle":	"xmlCharStrndup",
		"c++":	"xmlCharStrndup(const char *, int)",
		"go":	"CharStrndup"
	}, {
		"mangle":	"xmlCheckFilename",
		"c++":	"xmlCheckFilename(const char *)",
		"go":	"CheckFilename"
	}, {
		"mangle":	"xmlCheckHTTPInput",
		"c++":	"xmlCheckHTTPInput(xmlParserCtxtPtr, xmlParserInputPtr)",
		"go":	"CheckHTTPInput"
	}, {
		"mangle":	"xmlCheckLanguageID",
		"c++":	"xmlCheckLanguageID(const xmlChar *)",
		"go":	"(*Char).CheckLanguageID"
	}, {
		"mangle":	"xmlCheckThreadLocalStorage",
		"c++":	"xmlCheckThreadLocalStorage()",
		"go":	"CheckThreadLocalStorage"
	}, {
		"mangle":	"xmlCheckUTF8",
		"c++":	"xmlCheckUTF8(const unsigned char *)",
		"go":	"CheckUTF8"
	}, {
		"mangle":	"xmlCheckVersion",
		"c++":	"xmlCheckVersion(int)",
		"go":	"CheckVersion"
	}, {
		"mangle":	"xmlChildElementCount",
		"c++":	"xmlChildElementCount(xmlNodePtr)",
		"go":	"ChildElementCount"
	}, {
		"mangle":	"xmlCleanupCharEncodingHandlers",
		"c++":	"xmlCleanupCharEncodingHandlers()",
		"go":	"CleanupCharEncodingHandlers"
	}, {
		"mangle":	"xmlCleanupEncodingAliases",
		"c++":	"xmlCleanupEncodingAliases()",
		"go":	"CleanupEncodingAliases"
	}, {
		"mangle":	"xmlCleanupGlobals",
		"c++":	"xmlCleanupGlobals()",
		"go":	"CleanupGlobals"
	}, {
		"mangle":	"xmlCleanupInputCallbacks",
		"c++":	"xmlCleanupInputCallbacks()",
		"go":	"CleanupInputCallbacks"
	}, {
		"mangle":	"xmlCleanupMemory",
		"c++":	"xmlCleanupMemory()",
		"go":	"CleanupMemory"
	}, {
		"mangle":	"xmlCleanupOutputCallbacks",
		"c++":	"xmlCleanupOutputCallbacks()",
		"go":	"CleanupOutputCallbacks"
	}, {
		"mangle":	"xmlCleanupParser",
		"c++":	"xmlCleanupParser()",
		"go":	"CleanupParser"
	}, {
		"mangle":	"xmlCleanupPredefinedEntities",
		"c++":	"xmlCleanupPredefinedEntities()",
		"go":	"CleanupPredefinedEntities"
	}, {
		"mangle":	"xmlCleanupThreads",
		"c++":	"xmlCleanupThreads()",
		"go":	"CleanupThreads"
	}, {
		"mangle":	"xmlClearNodeInfoSeq",
		"c++":	"xmlClearNodeInfoSeq(xmlParserNodeInfoSeqPtr)",
		"go":	"ClearNodeInfoSeq"
	}, {
		"mangle":	"xmlClearParserCtxt",
		"c++":	"xmlClearParserCtxt(xmlParserCtxtPtr)",
		"go":	"ClearParserCtxt"
	}, {
		"mangle":	"xmlConvertSGMLCatalog",
		"c++":	"xmlConvertSGMLCatalog(xmlCatalogPtr)",
		"go":	"ConvertSGMLCatalog"
	}, {
		"mangle":	"xmlCopyAttributeTable",
		"c++":	"xmlCopyAttributeTable(xmlAttributeTablePtr)",
		"go":	"CopyAttributeTable"
	}, {
		"mangle":	"xmlCopyChar",
		"c++":	"xmlCopyChar(int, xmlChar *, int)",
		"go":	"CopyChar"
	}, {
		"mangle":	"xmlCopyCharMultiByte",
		"c++":	"xmlCopyCharMultiByte(xmlChar *, int)",
		"go":	"(*Char).CopyCharMultiByte"
	}, {
		"mangle":	"xmlCopyDoc",
		"c++":	"xmlCopyDoc(xmlDocPtr, int)",
		"go":	"CopyDoc"
	}, {
		"mangle":	"xmlCopyDocElementContent",
		"c++":	"xmlCopyDocElementContent(xmlDocPtr, xmlElementContentPtr)",
		"go":	"CopyDocElementContent"
	}, {
		"mangle":	"xmlCopyDtd",
		"c++":	"xmlCopyDtd(xmlDtdPtr)",
		"go":	"CopyDtd"
	}, {
		"mangle":	"xmlCopyElementContent",
		"c++":	"xmlCopyElementContent(xmlElementContentPtr)",
		"go":	"CopyElementContent"
	}, {
		"mangle":	"xmlCopyElementTable",
		"c++":	"xmlCopyElementTable(xmlElementTablePtr)",
		"go":	"CopyElementTable"
	}, {
		"mangle":	"xmlCopyEntitiesTable",
		"c++":	"xmlCopyEntitiesTable(xmlEntitiesTablePtr)",
		"go":	"CopyEntitiesTable"
	}, {
		"mangle":	"xmlCopyEnumeration",
		"c++":	"xmlCopyEnumeration(xmlEnumerationPtr)",
		"go":	"CopyEnumeration"
	}, {
		"mangle":	"xmlCopyError",
		"c++":	"xmlCopyError(const xmlError *, xmlErrorPtr)",
		"go":	"(*Error).CopyError"
	}, {
		"mangle":	"xmlCopyNamespace",
		"c++":	"xmlCopyNamespace(xmlNsPtr)",
		"go":	"CopyNamespace"
	}, {
		"mangle":	"xmlCopyNamespaceList",
		"c++":	"xmlCopyNamespaceList(xmlNsPtr)",
		"go":	"CopyNamespaceList"
	}, {
		"mangle":	"xmlCopyNode",
		"c++":	"xmlCopyNode(xmlNodePtr, int)",
		"go":	"CopyNode"
	}, {
		"mangle":	"xmlCopyNodeList",
		"c++":	"xmlCopyNodeList(xmlNodePtr)",
		"go":	"CopyNodeList"
	}, {
		"mangle":	"xmlCopyNotationTable",
		"c++":	"xmlCopyNotationTable(xmlNotationTablePtr)",
		"go":	"CopyNotationTable"
	}, {
		"mangle":	"xmlCopyProp",
		"c++":	"xmlCopyProp(xmlNodePtr, xmlAttrPtr)",
		"go":	"CopyProp"
	}, {
		"mangle":	"xmlCopyPropList",
		"c++":	"xmlCopyPropList(xmlNodePtr, xmlAttrPtr)",
		"go":	"CopyPropList"
	}, {
		"mangle":	"xmlCreateDocParserCtxt",
		"c++":	"xmlCreateDocParserCtxt(const xmlChar *)",
		"go":	"(*Char).CreateDocParserCtxt"
	}, {
		"mangle":	"xmlCreateEntitiesTable",
		"c++":	"xmlCreateEntitiesTable()",
		"go":	"CreateEntitiesTable"
	}, {
		"mangle":	"xmlCreateEntityParserCtxt",
		"c++":	"xmlCreateEntityParserCtxt(const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"(*Char).CreateEntityParserCtxt"
	}, {
		"mangle":	"xmlCreateEnumeration",
		"c++":	"xmlCreateEnumeration(const xmlChar *)",
		"go":	"(*Char).CreateEnumeration"
	}, {
		"mangle":	"xmlCreateFileParserCtxt",
		"c++":	"xmlCreateFileParserCtxt(const char *)",
		"go":	"CreateFileParserCtxt"
	}, {
		"mangle":	"xmlCreateIOParserCtxt",
		"c++":	"xmlCreateIOParserCtxt(xmlSAXHandlerPtr, void *, xmlInputReadCallback, xmlInputCloseCallback, void *, xmlCharEncoding)",
		"go":	"CreateIOParserCtxt"
	}, {
		"mangle":	"xmlCreateIntSubset",
		"c++":	"xmlCreateIntSubset(xmlDocPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"CreateIntSubset"
	}, {
		"mangle":	"xmlCreateMemoryParserCtxt",
		"c++":	"xmlCreateMemoryParserCtxt(const char *, int)",
		"go":	"CreateMemoryParserCtxt"
	}, {
		"mangle":	"xmlCreatePushParserCtxt",
		"c++":	"xmlCreatePushParserCtxt(xmlSAXHandlerPtr, void *, const char *, int, const char *)",
		"go":	"CreatePushParserCtxt"
	}, {
		"mangle":	"xmlCreateURI",
		"c++":	"xmlCreateURI()",
		"go":	"CreateURI"
	}, {
		"mangle":	"xmlCreateURLParserCtxt",
		"c++":	"xmlCreateURLParserCtxt(const char *, int)",
		"go":	"CreateURLParserCtxt"
	}, {
		"mangle":	"xmlCtxtErrMemory",
		"c++":	"xmlCtxtErrMemory(xmlParserCtxtPtr)",
		"go":	"CtxtErrMemory"
	}, {
		"mangle":	"xmlCtxtGetLastError",
		"c++":	"xmlCtxtGetLastError(void *)",
		"go":	"CtxtGetLastError"
	}, {
		"mangle":	"xmlCtxtParseDocument",
		"c++":	"xmlCtxtParseDocument(xmlParserCtxtPtr, xmlParserInputPtr)",
		"go":	"CtxtParseDocument"
	}, {
		"mangle":	"xmlCtxtReadDoc",
		"c++":	"xmlCtxtReadDoc(xmlParserCtxtPtr, const xmlChar *, const char *, const char *, int)",
		"go":	"CtxtReadDoc"
	}, {
		"mangle":	"xmlCtxtReadFd",
		"c++":	"xmlCtxtReadFd(xmlParserCtxtPtr, int, const char *, const char *, int)",
		"go":	"CtxtReadFd"
	}, {
		"mangle":	"xmlCtxtReadFile",
		"c++":	"xmlCtxtReadFile(xmlParserCtxtPtr, const char *, const char *, int)",
		"go":	"CtxtReadFile"
	}, {
		"mangle":	"xmlCtxtReadIO",
		"c++":	"xmlCtxtReadIO(xmlParserCtxtPtr, xmlInputReadCallback, xmlInputCloseCallback, void *, const char *, const char *, int)",
		"go":	"CtxtReadIO"
	}, {
		"mangle":	"xmlCtxtReadMemory",
		"c++":	"xmlCtxtReadMemory(xmlParserCtxtPtr, const char *, int, const char *, const char *, int)",
		"go":	"CtxtReadMemory"
	}, {
		"mangle":	"xmlCtxtReset",
		"c++":	"xmlCtxtReset(xmlParserCtxtPtr)",
		"go":	"CtxtReset"
	}, {
		"mangle":	"xmlCtxtResetLastError",
		"c++":	"xmlCtxtResetLastError(void *)",
		"go":	"CtxtResetLastError"
	}, {
		"mangle":	"xmlCtxtResetPush",
		"c++":	"xmlCtxtResetPush(xmlParserCtxtPtr, const char *, int, const char *, const char *)",
		"go":	"CtxtResetPush"
	}, {
		"mangle":	"xmlCtxtSetErrorHandler",
		"c++":	"xmlCtxtSetErrorHandler(xmlParserCtxtPtr, xmlStructuredErrorFunc, void *)",
		"go":	"CtxtSetErrorHandler"
	}, {
		"mangle":	"xmlCtxtSetMaxAmplification",
		"c++":	"xmlCtxtSetMaxAmplification(xmlParserCtxtPtr, unsigned int)",
		"go":	"CtxtSetMaxAmplification"
	}, {
		"mangle":	"xmlCtxtSetOptions",
		"c++":	"xmlCtxtSetOptions(xmlParserCtxtPtr, int)",
		"go":	"CtxtSetOptions"
	}, {
		"mangle":	"xmlCtxtUseOptions",
		"c++":	"xmlCtxtUseOptions(xmlParserCtxtPtr, int)",
		"go":	"CtxtUseOptions"
	}, {
		"mangle":	"xmlCurrentChar",
		"c++":	"xmlCurrentChar(xmlParserCtxtPtr, int *)",
		"go":	"CurrentChar"
	}, {
		"mangle":	"xmlDOMWrapAdoptNode",
		"c++":	"xmlDOMWrapAdoptNode(xmlDOMWrapCtxtPtr, xmlDocPtr, xmlNodePtr, xmlDocPtr, xmlNodePtr, int)",
		"go":	"DOMWrapAdoptNode"
	}, {
		"mangle":	"xmlDOMWrapCloneNode",
		"c++":	"xmlDOMWrapCloneNode(xmlDOMWrapCtxtPtr, xmlDocPtr, xmlNodePtr, xmlNodePtr *, xmlDocPtr, xmlNodePtr, int, int)",
		"go":	"DOMWrapCloneNode"
	}, {
		"mangle":	"xmlDOMWrapFreeCtxt",
		"c++":	"xmlDOMWrapFreeCtxt(xmlDOMWrapCtxtPtr)",
		"go":	"DOMWrapFreeCtxt"
	}, {
		"mangle":	"xmlDOMWrapNewCtxt",
		"c++":	"xmlDOMWrapNewCtxt()",
		"go":	"DOMWrapNewCtxt"
	}, {
		"mangle":	"xmlDOMWrapReconcileNamespaces",
		"c++":	"xmlDOMWrapReconcileNamespaces(xmlDOMWrapCtxtPtr, xmlNodePtr, int)",
		"go":	"DOMWrapReconcileNamespaces"
	}, {
		"mangle":	"xmlDOMWrapRemoveNode",
		"c++":	"xmlDOMWrapRemoveNode(xmlDOMWrapCtxtPtr, xmlDocPtr, xmlNodePtr, int)",
		"go":	"DOMWrapRemoveNode"
	}, {
		"mangle":	"xmlDebugCheckDocument",
		"c++":	"xmlDebugCheckDocument(FILE *, xmlDocPtr)",
		"go":	"DebugCheckDocument"
	}, {
		"mangle":	"xmlDebugDumpAttr",
		"c++":	"xmlDebugDumpAttr(FILE *, xmlAttrPtr, int)",
		"go":	"DebugDumpAttr"
	}, {
		"mangle":	"xmlDebugDumpAttrList",
		"c++":	"xmlDebugDumpAttrList(FILE *, xmlAttrPtr, int)",
		"go":	"DebugDumpAttrList"
	}, {
		"mangle":	"xmlDebugDumpDTD",
		"c++":	"xmlDebugDumpDTD(FILE *, xmlDtdPtr)",
		"go":	"DebugDumpDTD"
	}, {
		"mangle":	"xmlDebugDumpDocument",
		"c++":	"xmlDebugDumpDocument(FILE *, xmlDocPtr)",
		"go":	"DebugDumpDocument"
	}, {
		"mangle":	"xmlDebugDumpDocumentHead",
		"c++":	"xmlDebugDumpDocumentHead(FILE *, xmlDocPtr)",
		"go":	"DebugDumpDocumentHead"
	}, {
		"mangle":	"xmlDebugDumpEntities",
		"c++":	"xmlDebugDumpEntities(FILE *, xmlDocPtr)",
		"go":	"DebugDumpEntities"
	}, {
		"mangle":	"xmlDebugDumpNode",
		"c++":	"xmlDebugDumpNode(FILE *, xmlNodePtr, int)",
		"go":	"DebugDumpNode"
	}, {
		"mangle":	"xmlDebugDumpNodeList",
		"c++":	"xmlDebugDumpNodeList(FILE *, xmlNodePtr, int)",
		"go":	"DebugDumpNodeList"
	}, {
		"mangle":	"xmlDebugDumpOneNode",
		"c++":	"xmlDebugDumpOneNode(FILE *, xmlNodePtr, int)",
		"go":	"DebugDumpOneNode"
	}, {
		"mangle":	"xmlDebugDumpString",
		"c++":	"xmlDebugDumpString(FILE *, const xmlChar *)",
		"go":	"DebugDumpString"
	}, {
		"mangle":	"xmlDecodeEntities",
		"c++":	"xmlDecodeEntities(xmlParserCtxtPtr, int, int, xmlChar, xmlChar, xmlChar)",
		"go":	"DecodeEntities"
	}, {
		"mangle":	"xmlDefaultSAXHandlerInit",
		"c++":	"xmlDefaultSAXHandlerInit()",
		"go":	"DefaultSAXHandlerInit"
	}, {
		"mangle":	"xmlDelEncodingAlias",
		"c++":	"xmlDelEncodingAlias(const char *)",
		"go":	"DelEncodingAlias"
	}, {
		"mangle":	"xmlDeregisterNodeDefault",
		"c++":	"xmlDeregisterNodeDefault(xmlDeregisterNodeFunc)",
		"go":	"DeregisterNodeDefault"
	}, {
		"mangle":	"xmlDetectCharEncoding",
		"c++":	"xmlDetectCharEncoding(const unsigned char *, int)",
		"go":	"DetectCharEncoding"
	}, {
		"mangle":	"xmlDictCleanup",
		"c++":	"xmlDictCleanup()",
		"go":	"DictCleanup"
	}, {
		"mangle":	"xmlDictCreate",
		"c++":	"xmlDictCreate()",
		"go":	"DictCreate"
	}, {
		"mangle":	"xmlDictCreateSub",
		"c++":	"xmlDictCreateSub(xmlDictPtr)",
		"go":	"DictCreateSub"
	}, {
		"mangle":	"xmlDictExists",
		"c++":	"xmlDictExists(xmlDictPtr, const xmlChar *, int)",
		"go":	"DictExists"
	}, {
		"mangle":	"xmlDictFree",
		"c++":	"xmlDictFree(xmlDictPtr)",
		"go":	"DictFree"
	}, {
		"mangle":	"xmlDictGetUsage",
		"c++":	"xmlDictGetUsage(xmlDictPtr)",
		"go":	"DictGetUsage"
	}, {
		"mangle":	"xmlDictLookup",
		"c++":	"xmlDictLookup(xmlDictPtr, const xmlChar *, int)",
		"go":	"DictLookup"
	}, {
		"mangle":	"xmlDictOwns",
		"c++":	"xmlDictOwns(xmlDictPtr, const xmlChar *)",
		"go":	"DictOwns"
	}, {
		"mangle":	"xmlDictQLookup",
		"c++":	"xmlDictQLookup(xmlDictPtr, const xmlChar *, const xmlChar *)",
		"go":	"DictQLookup"
	}, {
		"mangle":	"xmlDictReference",
		"c++":	"xmlDictReference(xmlDictPtr)",
		"go":	"DictReference"
	}, {
		"mangle":	"xmlDictSetLimit",
		"c++":	"xmlDictSetLimit(xmlDictPtr, size_t)",
		"go":	"DictSetLimit"
	}, {
		"mangle":	"xmlDictSize",
		"c++":	"xmlDictSize(xmlDictPtr)",
		"go":	"DictSize"
	}, {
		"mangle":	"xmlDocCopyNode",
		"c++":	"xmlDocCopyNode(xmlNodePtr, xmlDocPtr, int)",
		"go":	"DocCopyNode"
	}, {
		"mangle":	"xmlDocCopyNodeList",
		"c++":	"xmlDocCopyNodeList(xmlDocPtr, xmlNodePtr)",
		"go":	"DocCopyNodeList"
	}, {
		"mangle":	"xmlDocDump",
		"c++":	"xmlDocDump(FILE *, xmlDocPtr)",
		"go":	"DocDump"
	}, {
		"mangle":	"xmlDocDumpFormatMemory",
		"c++":	"xmlDocDumpFormatMemory(xmlDocPtr, xmlChar **, int *, int)",
		"go":	"DocDumpFormatMemory"
	}, {
		"mangle":	"xmlDocDumpFormatMemoryEnc",
		"c++":	"xmlDocDumpFormatMemoryEnc(xmlDocPtr, xmlChar **, int *, const char *, int)",
		"go":	"DocDumpFormatMemoryEnc"
	}, {
		"mangle":	"xmlDocDumpMemory",
		"c++":	"xmlDocDumpMemory(xmlDocPtr, xmlChar **, int *)",
		"go":	"DocDumpMemory"
	}, {
		"mangle":	"xmlDocDumpMemoryEnc",
		"c++":	"xmlDocDumpMemoryEnc(xmlDocPtr, xmlChar **, int *, const char *)",
		"go":	"DocDumpMemoryEnc"
	}, {
		"mangle":	"xmlDocFormatDump",
		"c++":	"xmlDocFormatDump(FILE *, xmlDocPtr, int)",
		"go":	"DocFormatDump"
	}, {
		"mangle":	"xmlDocGetRootElement",
		"c++":	"xmlDocGetRootElement(const xmlDoc *)",
		"go":	"(*Doc).DocGetRootElement"
	}, {
		"mangle":	"xmlDocSetRootElement",
		"c++":	"xmlDocSetRootElement(xmlDocPtr, xmlNodePtr)",
		"go":	"DocSetRootElement"
	}, {
		"mangle":	"xmlDumpAttributeDecl",
		"c++":	"xmlDumpAttributeDecl(xmlBufferPtr, xmlAttributePtr)",
		"go":	"DumpAttributeDecl"
	}, {
		"mangle":	"xmlDumpAttributeTable",
		"c++":	"xmlDumpAttributeTable(xmlBufferPtr, xmlAttributeTablePtr)",
		"go":	"DumpAttributeTable"
	}, {
		"mangle":	"xmlDumpElementDecl",
		"c++":	"xmlDumpElementDecl(xmlBufferPtr, xmlElementPtr)",
		"go":	"DumpElementDecl"
	}, {
		"mangle":	"xmlDumpElementTable",
		"c++":	"xmlDumpElementTable(xmlBufferPtr, xmlElementTablePtr)",
		"go":	"DumpElementTable"
	}, {
		"mangle":	"xmlDumpEntitiesTable",
		"c++":	"xmlDumpEntitiesTable(xmlBufferPtr, xmlEntitiesTablePtr)",
		"go":	"DumpEntitiesTable"
	}, {
		"mangle":	"xmlDumpEntityDecl",
		"c++":	"xmlDumpEntityDecl(xmlBufferPtr, xmlEntityPtr)",
		"go":	"DumpEntityDecl"
	}, {
		"mangle":	"xmlDumpNotationDecl",
		"c++":	"xmlDumpNotationDecl(xmlBufferPtr, xmlNotationPtr)",
		"go":	"DumpNotationDecl"
	}, {
		"mangle":	"xmlDumpNotationTable",
		"c++":	"xmlDumpNotationTable(xmlBufferPtr, xmlNotationTablePtr)",
		"go":	"DumpNotationTable"
	}, {
		"mangle":	"xmlElemDump",
		"c++":	"xmlElemDump(FILE *, xmlDocPtr, xmlNodePtr)",
		"go":	"ElemDump"
	}, {
		"mangle":	"xmlEncodeEntities",
		"c++":	"xmlEncodeEntities(xmlDocPtr, const xmlChar *)",
		"go":	"EncodeEntities"
	}, {
		"mangle":	"xmlEncodeEntitiesReentrant",
		"c++":	"xmlEncodeEntitiesReentrant(xmlDocPtr, const xmlChar *)",
		"go":	"EncodeEntitiesReentrant"
	}, {
		"mangle":	"xmlEncodeSpecialChars",
		"c++":	"xmlEncodeSpecialChars(const xmlDoc *, const xmlChar *)",
		"go":	"(*Doc).EncodeSpecialChars"
	}, {
		"mangle":	"xmlFileClose",
		"c++":	"xmlFileClose(void *)",
		"go":	"FileClose"
	}, {
		"mangle":	"xmlFileMatch",
		"c++":	"xmlFileMatch(const char *)",
		"go":	"FileMatch"
	}, {
		"mangle":	"xmlFileOpen",
		"c++":	"xmlFileOpen(const char *)",
		"go":	"FileOpen"
	}, {
		"mangle":	"xmlFileRead",
		"c++":	"xmlFileRead(void *, char *, int)",
		"go":	"FileRead"
	}, {
		"mangle":	"xmlFindCharEncodingHandler",
		"c++":	"xmlFindCharEncodingHandler(const char *)",
		"go":	"FindCharEncodingHandler"
	}, {
		"mangle":	"xmlFirstElementChild",
		"c++":	"xmlFirstElementChild(xmlNodePtr)",
		"go":	"FirstElementChild"
	}, {
		"mangle":	"xmlFormatError",
		"c++":	"xmlFormatError(const xmlError *, xmlGenericErrorFunc, void *)",
		"go":	"(*Error).FormatError"
	}, {
		"mangle":	"xmlFreeAttributeTable",
		"c++":	"xmlFreeAttributeTable(xmlAttributeTablePtr)",
		"go":	"FreeAttributeTable"
	}, {
		"mangle":	"xmlFreeAutomata",
		"c++":	"xmlFreeAutomata(xmlAutomataPtr)",
		"go":	"FreeAutomata"
	}, {
		"mangle":	"xmlFreeCatalog",
		"c++":	"xmlFreeCatalog(xmlCatalogPtr)",
		"go":	"FreeCatalog"
	}, {
		"mangle":	"xmlFreeDoc",
		"c++":	"xmlFreeDoc(xmlDocPtr)",
		"go":	"FreeDoc"
	}, {
		"mangle":	"xmlFreeDocElementContent",
		"c++":	"xmlFreeDocElementContent(xmlDocPtr, xmlElementContentPtr)",
		"go":	"FreeDocElementContent"
	}, {
		"mangle":	"xmlFreeDtd",
		"c++":	"xmlFreeDtd(xmlDtdPtr)",
		"go":	"FreeDtd"
	}, {
		"mangle":	"xmlFreeElementContent",
		"c++":	"xmlFreeElementContent(xmlElementContentPtr)",
		"go":	"FreeElementContent"
	}, {
		"mangle":	"xmlFreeElementTable",
		"c++":	"xmlFreeElementTable(xmlElementTablePtr)",
		"go":	"FreeElementTable"
	}, {
		"mangle":	"xmlFreeEntitiesTable",
		"c++":	"xmlFreeEntitiesTable(xmlEntitiesTablePtr)",
		"go":	"FreeEntitiesTable"
	}, {
		"mangle":	"xmlFreeEntity",
		"c++":	"xmlFreeEntity(xmlEntityPtr)",
		"go":	"FreeEntity"
	}, {
		"mangle":	"xmlFreeEnumeration",
		"c++":	"xmlFreeEnumeration(xmlEnumerationPtr)",
		"go":	"FreeEnumeration"
	}, {
		"mangle":	"xmlFreeIDTable",
		"c++":	"xmlFreeIDTable(xmlIDTablePtr)",
		"go":	"FreeIDTable"
	}, {
		"mangle":	"xmlFreeInputStream",
		"c++":	"xmlFreeInputStream(xmlParserInputPtr)",
		"go":	"FreeInputStream"
	}, {
		"mangle":	"xmlFreeMutex",
		"c++":	"xmlFreeMutex(xmlMutexPtr)",
		"go":	"FreeMutex"
	}, {
		"mangle":	"xmlFreeNode",
		"c++":	"xmlFreeNode(xmlNodePtr)",
		"go":	"FreeNode"
	}, {
		"mangle":	"xmlFreeNodeList",
		"c++":	"xmlFreeNodeList(xmlNodePtr)",
		"go":	"FreeNodeList"
	}, {
		"mangle":	"xmlFreeNotationTable",
		"c++":	"xmlFreeNotationTable(xmlNotationTablePtr)",
		"go":	"FreeNotationTable"
	}, {
		"mangle":	"xmlFreeNs",
		"c++":	"xmlFreeNs(xmlNsPtr)",
		"go":	"FreeNs"
	}, {
		"mangle":	"xmlFreeNsList",
		"c++":	"xmlFreeNsList(xmlNsPtr)",
		"go":	"FreeNsList"
	}, {
		"mangle":	"xmlFreeParserCtxt",
		"c++":	"xmlFreeParserCtxt(xmlParserCtxtPtr)",
		"go":	"FreeParserCtxt"
	}, {
		"mangle":	"xmlFreeParserInputBuffer",
		"c++":	"xmlFreeParserInputBuffer(xmlParserInputBufferPtr)",
		"go":	"FreeParserInputBuffer"
	}, {
		"mangle":	"xmlFreePattern",
		"c++":	"xmlFreePattern(xmlPatternPtr)",
		"go":	"FreePattern"
	}, {
		"mangle":	"xmlFreePatternList",
		"c++":	"xmlFreePatternList(xmlPatternPtr)",
		"go":	"FreePatternList"
	}, {
		"mangle":	"xmlFreeProp",
		"c++":	"xmlFreeProp(xmlAttrPtr)",
		"go":	"FreeProp"
	}, {
		"mangle":	"xmlFreePropList",
		"c++":	"xmlFreePropList(xmlAttrPtr)",
		"go":	"FreePropList"
	}, {
		"mangle":	"xmlFreeRMutex",
		"c++":	"xmlFreeRMutex(xmlRMutexPtr)",
		"go":	"FreeRMutex"
	}, {
		"mangle":	"xmlFreeRefTable",
		"c++":	"xmlFreeRefTable(xmlRefTablePtr)",
		"go":	"FreeRefTable"
	}, {
		"mangle":	"xmlFreeStreamCtxt",
		"c++":	"xmlFreeStreamCtxt(xmlStreamCtxtPtr)",
		"go":	"FreeStreamCtxt"
	}, {
		"mangle":	"xmlFreeTextReader",
		"c++":	"xmlFreeTextReader(xmlTextReaderPtr)",
		"go":	"FreeTextReader"
	}, {
		"mangle":	"xmlFreeTextWriter",
		"c++":	"xmlFreeTextWriter(xmlTextWriterPtr)",
		"go":	"FreeTextWriter"
	}, {
		"mangle":	"xmlFreeURI",
		"c++":	"xmlFreeURI(xmlURIPtr)",
		"go":	"FreeURI"
	}, {
		"mangle":	"xmlFreeValidCtxt",
		"c++":	"xmlFreeValidCtxt(xmlValidCtxtPtr)",
		"go":	"FreeValidCtxt"
	}, {
		"mangle":	"xmlGcMemGet",
		"c++":	"xmlGcMemGet(xmlFreeFunc *, xmlMallocFunc *, xmlMallocFunc *, xmlReallocFunc *, xmlStrdupFunc *)",
		"go":	"GcMemGet"
	}, {
		"mangle":	"xmlGcMemSetup",
		"c++":	"xmlGcMemSetup(xmlFreeFunc, xmlMallocFunc, xmlMallocFunc, xmlReallocFunc, xmlStrdupFunc)",
		"go":	"GcMemSetup"
	}, {
		"mangle":	"xmlGetBufferAllocationScheme",
		"c++":	"xmlGetBufferAllocationScheme()",
		"go":	"GetBufferAllocationScheme"
	}, {
		"mangle":	"xmlGetCharEncodingHandler",
		"c++":	"xmlGetCharEncodingHandler(xmlCharEncoding)",
		"go":	"CharEncoding.GetCharEncodingHandler"
	}, {
		"mangle":	"xmlGetCharEncodingName",
		"c++":	"xmlGetCharEncodingName(xmlCharEncoding)",
		"go":	"CharEncoding.GetCharEncodingName"
	}, {
		"mangle":	"xmlGetCompressMode",
		"c++":	"xmlGetCompressMode()",
		"go":	"GetCompressMode"
	}, {
		"mangle":	"xmlGetDocCompressMode",
		"c++":	"xmlGetDocCompressMode(const xmlDoc *)",
		"go":	"(*Doc).GetDocCompressMode"
	}, {
		"mangle":	"xmlGetDocEntity",
		"c++":	"xmlGetDocEntity(const xmlDoc *, const xmlChar *)",
		"go":	"(*Doc).GetDocEntity"
	}, {
		"mangle":	"xmlGetDtdAttrDesc",
		"c++":	"xmlGetDtdAttrDesc(xmlDtdPtr, const xmlChar *, const xmlChar *)",
		"go":	"GetDtdAttrDesc"
	}, {
		"mangle":	"xmlGetDtdElementDesc",
		"c++":	"xmlGetDtdElementDesc(xmlDtdPtr, const xmlChar *)",
		"go":	"GetDtdElementDesc"
	}, {
		"mangle":	"xmlGetDtdEntity",
		"c++":	"xmlGetDtdEntity(xmlDocPtr, const xmlChar *)",
		"go":	"GetDtdEntity"
	}, {
		"mangle":	"xmlGetDtdNotationDesc",
		"c++":	"xmlGetDtdNotationDesc(xmlDtdPtr, const xmlChar *)",
		"go":	"GetDtdNotationDesc"
	}, {
		"mangle":	"xmlGetDtdQAttrDesc",
		"c++":	"xmlGetDtdQAttrDesc(xmlDtdPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"GetDtdQAttrDesc"
	}, {
		"mangle":	"xmlGetDtdQElementDesc",
		"c++":	"xmlGetDtdQElementDesc(xmlDtdPtr, const xmlChar *, const xmlChar *)",
		"go":	"GetDtdQElementDesc"
	}, {
		"mangle":	"xmlGetEncodingAlias",
		"c++":	"xmlGetEncodingAlias(const char *)",
		"go":	"GetEncodingAlias"
	}, {
		"mangle":	"xmlGetExternalEntityLoader",
		"c++":	"xmlGetExternalEntityLoader()",
		"go":	"GetExternalEntityLoader"
	}, {
		"mangle":	"xmlGetFeature",
		"c++":	"xmlGetFeature(xmlParserCtxtPtr, const char *, void *)",
		"go":	"GetFeature"
	}, {
		"mangle":	"xmlGetFeaturesList",
		"c++":	"xmlGetFeaturesList(int *, const char **)",
		"go":	"GetFeaturesList"
	}, {
		"mangle":	"xmlGetGlobalState",
		"c++":	"xmlGetGlobalState()",
		"go":	"GetGlobalState"
	}, {
		"mangle":	"xmlGetID",
		"c++":	"xmlGetID(xmlDocPtr, const xmlChar *)",
		"go":	"GetID"
	}, {
		"mangle":	"xmlGetIntSubset",
		"c++":	"xmlGetIntSubset(const xmlDoc *)",
		"go":	"(*Doc).GetIntSubset"
	}, {
		"mangle":	"xmlGetLastChild",
		"c++":	"xmlGetLastChild(const xmlNode *)",
		"go":	"(*Node).GetLastChild"
	}, {
		"mangle":	"xmlGetLastError",
		"c++":	"xmlGetLastError()",
		"go":	"GetLastError"
	}, {
		"mangle":	"xmlGetLineNo",
		"c++":	"xmlGetLineNo(const xmlNode *)",
		"go":	"(*Node).GetLineNo"
	}, {
		"mangle":	"xmlGetNoNsProp",
		"c++":	"xmlGetNoNsProp(const xmlNode *, const xmlChar *)",
		"go":	"(*Node).GetNoNsProp"
	}, {
		"mangle":	"xmlGetNodePath",
		"c++":	"xmlGetNodePath(const xmlNode *)",
		"go":	"(*Node).GetNodePath"
	}, {
		"mangle":	"xmlGetNsList",
		"c++":	"xmlGetNsList(const xmlDoc *, const xmlNode *)",
		"go":	"(*Doc).GetNsList"
	}, {
		"mangle":	"xmlGetNsListSafe",
		"c++":	"xmlGetNsListSafe(const xmlDoc *, const xmlNode *, xmlNsPtr **)",
		"go":	"(*Doc).GetNsListSafe"
	}, {
		"mangle":	"xmlGetNsProp",
		"c++":	"xmlGetNsProp(const xmlNode *, const xmlChar *, const xmlChar *)",
		"go":	"(*Node).GetNsProp"
	}, {
		"mangle":	"xmlGetParameterEntity",
		"c++":	"xmlGetParameterEntity(xmlDocPtr, const xmlChar *)",
		"go":	"GetParameterEntity"
	}, {
		"mangle":	"xmlGetPredefinedEntity",
		"c++":	"xmlGetPredefinedEntity(const xmlChar *)",
		"go":	"(*Char).GetPredefinedEntity"
	}, {
		"mangle":	"xmlGetProp",
		"c++":	"xmlGetProp(const xmlNode *, const xmlChar *)",
		"go":	"(*Node).GetProp"
	}, {
		"mangle":	"xmlGetRefs",
		"c++":	"xmlGetRefs(xmlDocPtr, const xmlChar *)",
		"go":	"GetRefs"
	}, {
		"mangle":	"xmlGetThreadId",
		"c++":	"xmlGetThreadId()",
		"go":	"GetThreadId"
	}, {
		"mangle":	"xmlGetUTF8Char",
		"c++":	"xmlGetUTF8Char(const unsigned char *, int *)",
		"go":	"GetUTF8Char"
	}, {
		"mangle":	"xmlHandleEntity",
		"c++":	"xmlHandleEntity(xmlParserCtxtPtr, xmlEntityPtr)",
		"go":	"HandleEntity"
	}, {
		"mangle":	"xmlHasFeature",
		"c++":	"xmlHasFeature(xmlFeature)",
		"go":	"Feature.HasFeature"
	}, {
		"mangle":	"xmlHasNsProp",
		"c++":	"xmlHasNsProp(const xmlNode *, const xmlChar *, const xmlChar *)",
		"go":	"(*Node).HasNsProp"
	}, {
		"mangle":	"xmlHasProp",
		"c++":	"xmlHasProp(const xmlNode *, const xmlChar *)",
		"go":	"(*Node).HasProp"
	}, {
		"mangle":	"xmlHashAdd",
		"c++":	"xmlHashAdd(xmlHashTablePtr, const xmlChar *, void *)",
		"go":	"HashAdd"
	}, {
		"mangle":	"xmlHashAdd2",
		"c++":	"xmlHashAdd2(xmlHashTablePtr, const xmlChar *, const xmlChar *, void *)",
		"go":	"HashAdd2"
	}, {
		"mangle":	"xmlHashAdd3",
		"c++":	"xmlHashAdd3(xmlHashTablePtr, const xmlChar *, const xmlChar *, const xmlChar *, void *)",
		"go":	"HashAdd3"
	}, {
		"mangle":	"xmlHashAddEntry",
		"c++":	"xmlHashAddEntry(xmlHashTablePtr, const xmlChar *, void *)",
		"go":	"HashAddEntry"
	}, {
		"mangle":	"xmlHashAddEntry2",
		"c++":	"xmlHashAddEntry2(xmlHashTablePtr, const xmlChar *, const xmlChar *, void *)",
		"go":	"HashAddEntry2"
	}, {
		"mangle":	"xmlHashAddEntry3",
		"c++":	"xmlHashAddEntry3(xmlHashTablePtr, const xmlChar *, const xmlChar *, const xmlChar *, void *)",
		"go":	"HashAddEntry3"
	}, {
		"mangle":	"xmlHashCopy",
		"c++":	"xmlHashCopy(xmlHashTablePtr, xmlHashCopier)",
		"go":	"HashCopy"
	}, {
		"mangle":	"xmlHashCopySafe",
		"c++":	"xmlHashCopySafe(xmlHashTablePtr, xmlHashCopier, xmlHashDeallocator)",
		"go":	"HashCopySafe"
	}, {
		"mangle":	"xmlHashCreate",
		"c++":	"xmlHashCreate(int)",
		"go":	"HashCreate"
	}, {
		"mangle":	"xmlHashCreateDict",
		"c++":	"xmlHashCreateDict(int, xmlDictPtr)",
		"go":	"HashCreateDict"
	}, {
		"mangle":	"xmlHashDefaultDeallocator",
		"c++":	"xmlHashDefaultDeallocator(void *, const xmlChar *)",
		"go":	"HashDefaultDeallocator"
	}, {
		"mangle":	"xmlHashFree",
		"c++":	"xmlHashFree(xmlHashTablePtr, xmlHashDeallocator)",
		"go":	"HashFree"
	}, {
		"mangle":	"xmlHashLookup",
		"c++":	"xmlHashLookup(xmlHashTablePtr, const xmlChar *)",
		"go":	"HashLookup"
	}, {
		"mangle":	"xmlHashLookup2",
		"c++":	"xmlHashLookup2(xmlHashTablePtr, const xmlChar *, const xmlChar *)",
		"go":	"HashLookup2"
	}, {
		"mangle":	"xmlHashLookup3",
		"c++":	"xmlHashLookup3(xmlHashTablePtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"HashLookup3"
	}, {
		"mangle":	"xmlHashQLookup",
		"c++":	"xmlHashQLookup(xmlHashTablePtr, const xmlChar *, const xmlChar *)",
		"go":	"HashQLookup"
	}, {
		"mangle":	"xmlHashQLookup2",
		"c++":	"xmlHashQLookup2(xmlHashTablePtr, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"HashQLookup2"
	}, {
		"mangle":	"xmlHashQLookup3",
		"c++":	"xmlHashQLookup3(xmlHashTablePtr, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"HashQLookup3"
	}, {
		"mangle":	"xmlHashRemoveEntry",
		"c++":	"xmlHashRemoveEntry(xmlHashTablePtr, const xmlChar *, xmlHashDeallocator)",
		"go":	"HashRemoveEntry"
	}, {
		"mangle":	"xmlHashRemoveEntry2",
		"c++":	"xmlHashRemoveEntry2(xmlHashTablePtr, const xmlChar *, const xmlChar *, xmlHashDeallocator)",
		"go":	"HashRemoveEntry2"
	}, {
		"mangle":	"xmlHashRemoveEntry3",
		"c++":	"xmlHashRemoveEntry3(xmlHashTablePtr, const xmlChar *, const xmlChar *, const xmlChar *, xmlHashDeallocator)",
		"go":	"HashRemoveEntry3"
	}, {
		"mangle":	"xmlHashScan",
		"c++":	"xmlHashScan(xmlHashTablePtr, xmlHashScanner, void *)",
		"go":	"HashScan"
	}, {
		"mangle":	"xmlHashScan3",
		"c++":	"xmlHashScan3(xmlHashTablePtr, const xmlChar *, const xmlChar *, const xmlChar *, xmlHashScanner, void *)",
		"go":	"HashScan3"
	}, {
		"mangle":	"xmlHashScanFull",
		"c++":	"xmlHashScanFull(xmlHashTablePtr, xmlHashScannerFull, void *)",
		"go":	"HashScanFull"
	}, {
		"mangle":	"xmlHashScanFull3",
		"c++":	"xmlHashScanFull3(xmlHashTablePtr, const xmlChar *, const xmlChar *, const xmlChar *, xmlHashScannerFull, void *)",
		"go":	"HashScanFull3"
	}, {
		"mangle":	"xmlHashSize",
		"c++":	"xmlHashSize(xmlHashTablePtr)",
		"go":	"HashSize"
	}, {
		"mangle":	"xmlHashUpdateEntry",
		"c++":	"xmlHashUpdateEntry(xmlHashTablePtr, const xmlChar *, void *, xmlHashDeallocator)",
		"go":	"HashUpdateEntry"
	}, {
		"mangle":	"xmlHashUpdateEntry2",
		"c++":	"xmlHashUpdateEntry2(xmlHashTablePtr, const xmlChar *, const xmlChar *, void *, xmlHashDeallocator)",
		"go":	"HashUpdateEntry2"
	}, {
		"mangle":	"xmlHashUpdateEntry3",
		"c++":	"xmlHashUpdateEntry3(xmlHashTablePtr, const xmlChar *, const xmlChar *, const xmlChar *, void *, xmlHashDeallocator)",
		"go":	"HashUpdateEntry3"
	}, {
		"mangle":	"xmlIOFTPClose",
		"c++":	"xmlIOFTPClose(void *)",
		"go":	"IOFTPClose"
	}, {
		"mangle":	"xmlIOFTPMatch",
		"c++":	"xmlIOFTPMatch(const char *)",
		"go":	"IOFTPMatch"
	}, {
		"mangle":	"xmlIOFTPOpen",
		"c++":	"xmlIOFTPOpen(const char *)",
		"go":	"IOFTPOpen"
	}, {
		"mangle":	"xmlIOFTPRead",
		"c++":	"xmlIOFTPRead(void *, char *, int)",
		"go":	"IOFTPRead"
	}, {
		"mangle":	"xmlIOHTTPClose",
		"c++":	"xmlIOHTTPClose(void *)",
		"go":	"IOHTTPClose"
	}, {
		"mangle":	"xmlIOHTTPMatch",
		"c++":	"xmlIOHTTPMatch(const char *)",
		"go":	"IOHTTPMatch"
	}, {
		"mangle":	"xmlIOHTTPOpen",
		"c++":	"xmlIOHTTPOpen(const char *)",
		"go":	"IOHTTPOpen"
	}, {
		"mangle":	"xmlIOHTTPOpenW",
		"c++":	"xmlIOHTTPOpenW(const char *, int)",
		"go":	"IOHTTPOpenW"
	}, {
		"mangle":	"xmlIOHTTPRead",
		"c++":	"xmlIOHTTPRead(void *, char *, int)",
		"go":	"IOHTTPRead"
	}, {
		"mangle":	"xmlIOParseDTD",
		"c++":	"xmlIOParseDTD(xmlSAXHandlerPtr, xmlParserInputBufferPtr, xmlCharEncoding)",
		"go":	"IOParseDTD"
	}, {
		"mangle":	"xmlInitCharEncodingHandlers",
		"c++":	"xmlInitCharEncodingHandlers()",
		"go":	"InitCharEncodingHandlers"
	}, {
		"mangle":	"xmlInitGlobals",
		"c++":	"xmlInitGlobals()",
		"go":	"InitGlobals"
	}, {
		"mangle":	"xmlInitMemory",
		"c++":	"xmlInitMemory()",
		"go":	"InitMemory"
	}, {
		"mangle":	"xmlInitNodeInfoSeq",
		"c++":	"xmlInitNodeInfoSeq(xmlParserNodeInfoSeqPtr)",
		"go":	"InitNodeInfoSeq"
	}, {
		"mangle":	"xmlInitParser",
		"c++":	"xmlInitParser()",
		"go":	"InitParser"
	}, {
		"mangle":	"xmlInitParserCtxt",
		"c++":	"xmlInitParserCtxt(xmlParserCtxtPtr)",
		"go":	"InitParserCtxt"
	}, {
		"mangle":	"xmlInitThreads",
		"c++":	"xmlInitThreads()",
		"go":	"InitThreads"
	}, {
		"mangle":	"xmlInitializeCatalog",
		"c++":	"xmlInitializeCatalog()",
		"go":	"InitializeCatalog"
	}, {
		"mangle":	"xmlInitializeDict",
		"c++":	"xmlInitializeDict()",
		"go":	"InitializeDict"
	}, {
		"mangle":	"xmlInitializeGlobalState",
		"c++":	"xmlInitializeGlobalState(xmlGlobalStatePtr)",
		"go":	"InitializeGlobalState"
	}, {
		"mangle":	"xmlInitializePredefinedEntities",
		"c++":	"xmlInitializePredefinedEntities()",
		"go":	"InitializePredefinedEntities"
	}, {
		"mangle":	"xmlIsBaseChar",
		"c++":	"xmlIsBaseChar(unsigned int)",
		"go":	"IsBaseChar"
	}, {
		"mangle":	"xmlIsBlank",
		"c++":	"xmlIsBlank(unsigned int)",
		"go":	"IsBlank"
	}, {
		"mangle":	"xmlIsBlankNode",
		"c++":	"xmlIsBlankNode(const xmlNode *)",
		"go":	"(*Node).IsBlankNode"
	}, {
		"mangle":	"xmlIsChar",
		"c++":	"xmlIsChar(unsigned int)",
		"go":	"IsChar"
	}, {
		"mangle":	"xmlIsCombining",
		"c++":	"xmlIsCombining(unsigned int)",
		"go":	"IsCombining"
	}, {
		"mangle":	"xmlIsDigit",
		"c++":	"xmlIsDigit(unsigned int)",
		"go":	"IsDigit"
	}, {
		"mangle":	"xmlIsExtender",
		"c++":	"xmlIsExtender(unsigned int)",
		"go":	"IsExtender"
	}, {
		"mangle":	"xmlIsID",
		"c++":	"xmlIsID(xmlDocPtr, xmlNodePtr, xmlAttrPtr)",
		"go":	"IsID"
	}, {
		"mangle":	"xmlIsIdeographic",
		"c++":	"xmlIsIdeographic(unsigned int)",
		"go":	"IsIdeographic"
	}, {
		"mangle":	"xmlIsLetter",
		"c++":	"xmlIsLetter(int)",
		"go":	"IsLetter"
	}, {
		"mangle":	"xmlIsMainThread",
		"c++":	"xmlIsMainThread()",
		"go":	"IsMainThread"
	}, {
		"mangle":	"xmlIsMixedElement",
		"c++":	"xmlIsMixedElement(xmlDocPtr, const xmlChar *)",
		"go":	"IsMixedElement"
	}, {
		"mangle":	"xmlIsPubidChar",
		"c++":	"xmlIsPubidChar(unsigned int)",
		"go":	"IsPubidChar"
	}, {
		"mangle":	"xmlIsRef",
		"c++":	"xmlIsRef(xmlDocPtr, xmlNodePtr, xmlAttrPtr)",
		"go":	"IsRef"
	}, {
		"mangle":	"xmlIsXHTML",
		"c++":	"xmlIsXHTML(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).IsXHTML"
	}, {
		"mangle":	"xmlKeepBlanksDefault",
		"c++":	"xmlKeepBlanksDefault(int)",
		"go":	"KeepBlanksDefault"
	}, {
		"mangle":	"xmlLastElementChild",
		"c++":	"xmlLastElementChild(xmlNodePtr)",
		"go":	"LastElementChild"
	}, {
		"mangle":	"xmlLineNumbersDefault",
		"c++":	"xmlLineNumbersDefault(int)",
		"go":	"LineNumbersDefault"
	}, {
		"mangle":	"xmlLinkGetData",
		"c++":	"xmlLinkGetData(xmlLinkPtr)",
		"go":	"LinkGetData"
	}, {
		"mangle":	"xmlListAppend",
		"c++":	"xmlListAppend(xmlListPtr, void *)",
		"go":	"ListAppend"
	}, {
		"mangle":	"xmlListClear",
		"c++":	"xmlListClear(xmlListPtr)",
		"go":	"ListClear"
	}, {
		"mangle":	"xmlListCopy",
		"c++":	"xmlListCopy(xmlListPtr, xmlListPtr)",
		"go":	"ListCopy"
	}, {
		"mangle":	"xmlListCreate",
		"c++":	"xmlListCreate(xmlListDeallocator, xmlListDataCompare)",
		"go":	"ListCreate"
	}, {
		"mangle":	"xmlListDelete",
		"c++":	"xmlListDelete(xmlListPtr)",
		"go":	"ListDelete"
	}, {
		"mangle":	"xmlListDup",
		"c++":	"xmlListDup(xmlListPtr)",
		"go":	"ListDup"
	}, {
		"mangle":	"xmlListEmpty",
		"c++":	"xmlListEmpty(xmlListPtr)",
		"go":	"ListEmpty"
	}, {
		"mangle":	"xmlListEnd",
		"c++":	"xmlListEnd(xmlListPtr)",
		"go":	"ListEnd"
	}, {
		"mangle":	"xmlListFront",
		"c++":	"xmlListFront(xmlListPtr)",
		"go":	"ListFront"
	}, {
		"mangle":	"xmlListInsert",
		"c++":	"xmlListInsert(xmlListPtr, void *)",
		"go":	"ListInsert"
	}, {
		"mangle":	"xmlListMerge",
		"c++":	"xmlListMerge(xmlListPtr, xmlListPtr)",
		"go":	"ListMerge"
	}, {
		"mangle":	"xmlListPopBack",
		"c++":	"xmlListPopBack(xmlListPtr)",
		"go":	"ListPopBack"
	}, {
		"mangle":	"xmlListPopFront",
		"c++":	"xmlListPopFront(xmlListPtr)",
		"go":	"ListPopFront"
	}, {
		"mangle":	"xmlListPushBack",
		"c++":	"xmlListPushBack(xmlListPtr, void *)",
		"go":	"ListPushBack"
	}, {
		"mangle":	"xmlListPushFront",
		"c++":	"xmlListPushFront(xmlListPtr, void *)",
		"go":	"ListPushFront"
	}, {
		"mangle":	"xmlListRemoveAll",
		"c++":	"xmlListRemoveAll(xmlListPtr, void *)",
		"go":	"ListRemoveAll"
	}, {
		"mangle":	"xmlListRemoveFirst",
		"c++":	"xmlListRemoveFirst(xmlListPtr, void *)",
		"go":	"ListRemoveFirst"
	}, {
		"mangle":	"xmlListRemoveLast",
		"c++":	"xmlListRemoveLast(xmlListPtr, void *)",
		"go":	"ListRemoveLast"
	}, {
		"mangle":	"xmlListReverse",
		"c++":	"xmlListReverse(xmlListPtr)",
		"go":	"ListReverse"
	}, {
		"mangle":	"xmlListReverseSearch",
		"c++":	"xmlListReverseSearch(xmlListPtr, void *)",
		"go":	"ListReverseSearch"
	}, {
		"mangle":	"xmlListReverseWalk",
		"c++":	"xmlListReverseWalk(xmlListPtr, xmlListWalker, void *)",
		"go":	"ListReverseWalk"
	}, {
		"mangle":	"xmlListSearch",
		"c++":	"xmlListSearch(xmlListPtr, void *)",
		"go":	"ListSearch"
	}, {
		"mangle":	"xmlListSize",
		"c++":	"xmlListSize(xmlListPtr)",
		"go":	"ListSize"
	}, {
		"mangle":	"xmlListSort",
		"c++":	"xmlListSort(xmlListPtr)",
		"go":	"ListSort"
	}, {
		"mangle":	"xmlListWalk",
		"c++":	"xmlListWalk(xmlListPtr, xmlListWalker, void *)",
		"go":	"ListWalk"
	}, {
		"mangle":	"xmlLoadACatalog",
		"c++":	"xmlLoadACatalog(const char *)",
		"go":	"LoadACatalog"
	}, {
		"mangle":	"xmlLoadCatalog",
		"c++":	"xmlLoadCatalog(const char *)",
		"go":	"LoadCatalog"
	}, {
		"mangle":	"xmlLoadCatalogs",
		"c++":	"xmlLoadCatalogs(const char *)",
		"go":	"LoadCatalogs"
	}, {
		"mangle":	"xmlLoadExternalEntity",
		"c++":	"xmlLoadExternalEntity(const char *, const char *, xmlParserCtxtPtr)",
		"go":	"LoadExternalEntity"
	}, {
		"mangle":	"xmlLoadSGMLSuperCatalog",
		"c++":	"xmlLoadSGMLSuperCatalog(const char *)",
		"go":	"LoadSGMLSuperCatalog"
	}, {
		"mangle":	"xmlLockLibrary",
		"c++":	"xmlLockLibrary()",
		"go":	"LockLibrary"
	}, {
		"mangle":	"xmlLookupCharEncodingHandler",
		"c++":	"xmlLookupCharEncodingHandler(xmlCharEncoding, xmlCharEncodingHandlerPtr *)",
		"go":	"CharEncoding.LookupCharEncodingHandler"
	}, {
		"mangle":	"xmlLsCountNode",
		"c++":	"xmlLsCountNode(xmlNodePtr)",
		"go":	"LsCountNode"
	}, {
		"mangle":	"xmlLsOneNode",
		"c++":	"xmlLsOneNode(FILE *, xmlNodePtr)",
		"go":	"LsOneNode"
	}, {
		"mangle":	"xmlMallocAtomicLoc",
		"c++":	"xmlMallocAtomicLoc(size_t, const char *, int)",
		"go":	"MallocAtomicLoc"
	}, {
		"mangle":	"xmlMallocLoc",
		"c++":	"xmlMallocLoc(size_t, const char *, int)",
		"go":	"MallocLoc"
	}, {
		"mangle":	"xmlMemBlocks",
		"c++":	"xmlMemBlocks()",
		"go":	"MemBlocks"
	}, {
		"mangle":	"xmlMemDisplay",
		"c++":	"xmlMemDisplay(FILE *)",
		"go":	"MemDisplay"
	}, {
		"mangle":	"xmlMemDisplayLast",
		"c++":	"xmlMemDisplayLast(FILE *, long)",
		"go":	"MemDisplayLast"
	}, {
		"mangle":	"xmlMemFree",
		"c++":	"xmlMemFree(void *)",
		"go":	"MemFree"
	}, {
		"mangle":	"xmlMemGet",
		"c++":	"xmlMemGet(xmlFreeFunc *, xmlMallocFunc *, xmlReallocFunc *, xmlStrdupFunc *)",
		"go":	"MemGet"
	}, {
		"mangle":	"xmlMemMalloc",
		"c++":	"xmlMemMalloc(size_t)",
		"go":	"MemMalloc"
	}, {
		"mangle":	"xmlMemRealloc",
		"c++":	"xmlMemRealloc(void *, size_t)",
		"go":	"MemRealloc"
	}, {
		"mangle":	"xmlMemSetup",
		"c++":	"xmlMemSetup(xmlFreeFunc, xmlMallocFunc, xmlReallocFunc, xmlStrdupFunc)",
		"go":	"MemSetup"
	}, {
		"mangle":	"xmlMemShow",
		"c++":	"xmlMemShow(FILE *, int)",
		"go":	"MemShow"
	}, {
		"mangle":	"xmlMemSize",
		"c++":	"xmlMemSize(void *)",
		"go":	"MemSize"
	}, {
		"mangle":	"xmlMemStrdupLoc",
		"c++":	"xmlMemStrdupLoc(const char *, const char *, int)",
		"go":	"MemStrdupLoc"
	}, {
		"mangle":	"xmlMemUsed",
		"c++":	"xmlMemUsed()",
		"go":	"MemUsed"
	}, {
		"mangle":	"xmlMemoryDump",
		"c++":	"xmlMemoryDump()",
		"go":	"MemoryDump"
	}, {
		"mangle":	"xmlMemoryStrdup",
		"c++":	"xmlMemoryStrdup(const char *)",
		"go":	"MemoryStrdup"
	}, {
		"mangle":	"xmlModuleClose",
		"c++":	"xmlModuleClose(xmlModulePtr)",
		"go":	"ModuleClose"
	}, {
		"mangle":	"xmlModuleFree",
		"c++":	"xmlModuleFree(xmlModulePtr)",
		"go":	"ModuleFree"
	}, {
		"mangle":	"xmlModuleOpen",
		"c++":	"xmlModuleOpen(const char *, int)",
		"go":	"ModuleOpen"
	}, {
		"mangle":	"xmlModuleSymbol",
		"c++":	"xmlModuleSymbol(xmlModulePtr, const char *, void **)",
		"go":	"ModuleSymbol"
	}, {
		"mangle":	"xmlMutexLock",
		"c++":	"xmlMutexLock(xmlMutexPtr)",
		"go":	"MutexLock"
	}, {
		"mangle":	"xmlMutexUnlock",
		"c++":	"xmlMutexUnlock(xmlMutexPtr)",
		"go":	"MutexUnlock"
	}, {
		"mangle":	"xmlNamespaceParseNCName",
		"c++":	"xmlNamespaceParseNCName(xmlParserCtxtPtr)",
		"go":	"NamespaceParseNCName"
	}, {
		"mangle":	"xmlNamespaceParseNSDef",
		"c++":	"xmlNamespaceParseNSDef(xmlParserCtxtPtr)",
		"go":	"NamespaceParseNSDef"
	}, {
		"mangle":	"xmlNamespaceParseQName",
		"c++":	"xmlNamespaceParseQName(xmlParserCtxtPtr, xmlChar **)",
		"go":	"NamespaceParseQName"
	}, {
		"mangle":	"xmlNanoFTPCheckResponse",
		"c++":	"xmlNanoFTPCheckResponse(void *)",
		"go":	"NanoFTPCheckResponse"
	}, {
		"mangle":	"xmlNanoFTPCleanup",
		"c++":	"xmlNanoFTPCleanup()",
		"go":	"NanoFTPCleanup"
	}, {
		"mangle":	"xmlNanoFTPClose",
		"c++":	"xmlNanoFTPClose(void *)",
		"go":	"NanoFTPClose"
	}, {
		"mangle":	"xmlNanoFTPCloseConnection",
		"c++":	"xmlNanoFTPCloseConnection(void *)",
		"go":	"NanoFTPCloseConnection"
	}, {
		"mangle":	"xmlNanoFTPConnect",
		"c++":	"xmlNanoFTPConnect(void *)",
		"go":	"NanoFTPConnect"
	}, {
		"mangle":	"xmlNanoFTPConnectTo",
		"c++":	"xmlNanoFTPConnectTo(const char *, int)",
		"go":	"NanoFTPConnectTo"
	}, {
		"mangle":	"xmlNanoFTPCwd",
		"c++":	"xmlNanoFTPCwd(void *, const char *)",
		"go":	"NanoFTPCwd"
	}, {
		"mangle":	"xmlNanoFTPDele",
		"c++":	"xmlNanoFTPDele(void *, const char *)",
		"go":	"NanoFTPDele"
	}, {
		"mangle":	"xmlNanoFTPFreeCtxt",
		"c++":	"xmlNanoFTPFreeCtxt(void *)",
		"go":	"NanoFTPFreeCtxt"
	}, {
		"mangle":	"xmlNanoFTPGet",
		"c++":	"xmlNanoFTPGet(void *, ftpDataCallback, void *, const char *)",
		"go":	"NanoFTPGet"
	}, {
		"mangle":	"xmlNanoFTPGetConnection",
		"c++":	"xmlNanoFTPGetConnection(void *)",
		"go":	"NanoFTPGetConnection"
	}, {
		"mangle":	"xmlNanoFTPGetResponse",
		"c++":	"xmlNanoFTPGetResponse(void *)",
		"go":	"NanoFTPGetResponse"
	}, {
		"mangle":	"xmlNanoFTPGetSocket",
		"c++":	"xmlNanoFTPGetSocket(void *, const char *)",
		"go":	"NanoFTPGetSocket"
	}, {
		"mangle":	"xmlNanoFTPInit",
		"c++":	"xmlNanoFTPInit()",
		"go":	"NanoFTPInit"
	}, {
		"mangle":	"xmlNanoFTPList",
		"c++":	"xmlNanoFTPList(void *, ftpListCallback, void *, const char *)",
		"go":	"NanoFTPList"
	}, {
		"mangle":	"xmlNanoFTPNewCtxt",
		"c++":	"xmlNanoFTPNewCtxt(const char *)",
		"go":	"NanoFTPNewCtxt"
	}, {
		"mangle":	"xmlNanoFTPOpen",
		"c++":	"xmlNanoFTPOpen(const char *)",
		"go":	"NanoFTPOpen"
	}, {
		"mangle":	"xmlNanoFTPProxy",
		"c++":	"xmlNanoFTPProxy(const char *, int, const char *, const char *, int)",
		"go":	"NanoFTPProxy"
	}, {
		"mangle":	"xmlNanoFTPQuit",
		"c++":	"xmlNanoFTPQuit(void *)",
		"go":	"NanoFTPQuit"
	}, {
		"mangle":	"xmlNanoFTPRead",
		"c++":	"xmlNanoFTPRead(void *, void *, int)",
		"go":	"NanoFTPRead"
	}, {
		"mangle":	"xmlNanoFTPScanProxy",
		"c++":	"xmlNanoFTPScanProxy(const char *)",
		"go":	"NanoFTPScanProxy"
	}, {
		"mangle":	"xmlNanoFTPUpdateURL",
		"c++":	"xmlNanoFTPUpdateURL(void *, const char *)",
		"go":	"NanoFTPUpdateURL"
	}, {
		"mangle":	"xmlNanoHTTPAuthHeader",
		"c++":	"xmlNanoHTTPAuthHeader(void *)",
		"go":	"NanoHTTPAuthHeader"
	}, {
		"mangle":	"xmlNanoHTTPCleanup",
		"c++":	"xmlNanoHTTPCleanup()",
		"go":	"NanoHTTPCleanup"
	}, {
		"mangle":	"xmlNanoHTTPClose",
		"c++":	"xmlNanoHTTPClose(void *)",
		"go":	"NanoHTTPClose"
	}, {
		"mangle":	"xmlNanoHTTPContentLength",
		"c++":	"xmlNanoHTTPContentLength(void *)",
		"go":	"NanoHTTPContentLength"
	}, {
		"mangle":	"xmlNanoHTTPEncoding",
		"c++":	"xmlNanoHTTPEncoding(void *)",
		"go":	"NanoHTTPEncoding"
	}, {
		"mangle":	"xmlNanoHTTPFetch",
		"c++":	"xmlNanoHTTPFetch(const char *, const char *, char **)",
		"go":	"NanoHTTPFetch"
	}, {
		"mangle":	"xmlNanoHTTPInit",
		"c++":	"xmlNanoHTTPInit()",
		"go":	"NanoHTTPInit"
	}, {
		"mangle":	"xmlNanoHTTPMethod",
		"c++":	"xmlNanoHTTPMethod(const char *, const char *, const char *, char **, const char *, int)",
		"go":	"NanoHTTPMethod"
	}, {
		"mangle":	"xmlNanoHTTPMethodRedir",
		"c++":	"xmlNanoHTTPMethodRedir(const char *, const char *, const char *, char **, char **, const char *, int)",
		"go":	"NanoHTTPMethodRedir"
	}, {
		"mangle":	"xmlNanoHTTPMimeType",
		"c++":	"xmlNanoHTTPMimeType(void *)",
		"go":	"NanoHTTPMimeType"
	}, {
		"mangle":	"xmlNanoHTTPOpen",
		"c++":	"xmlNanoHTTPOpen(const char *, char **)",
		"go":	"NanoHTTPOpen"
	}, {
		"mangle":	"xmlNanoHTTPOpenRedir",
		"c++":	"xmlNanoHTTPOpenRedir(const char *, char **, char **)",
		"go":	"NanoHTTPOpenRedir"
	}, {
		"mangle":	"xmlNanoHTTPRead",
		"c++":	"xmlNanoHTTPRead(void *, void *, int)",
		"go":	"NanoHTTPRead"
	}, {
		"mangle":	"xmlNanoHTTPRedir",
		"c++":	"xmlNanoHTTPRedir(void *)",
		"go":	"NanoHTTPRedir"
	}, {
		"mangle":	"xmlNanoHTTPReturnCode",
		"c++":	"xmlNanoHTTPReturnCode(void *)",
		"go":	"NanoHTTPReturnCode"
	}, {
		"mangle":	"xmlNanoHTTPSave",
		"c++":	"xmlNanoHTTPSave(void *, const char *)",
		"go":	"NanoHTTPSave"
	}, {
		"mangle":	"xmlNanoHTTPScanProxy",
		"c++":	"xmlNanoHTTPScanProxy(const char *)",
		"go":	"NanoHTTPScanProxy"
	}, {
		"mangle":	"xmlNewAutomata",
		"c++":	"xmlNewAutomata()",
		"go":	"NewAutomata"
	}, {
		"mangle":	"xmlNewCDataBlock",
		"c++":	"xmlNewCDataBlock(xmlDocPtr, const xmlChar *, int)",
		"go":	"NewCDataBlock"
	}, {
		"mangle":	"xmlNewCatalog",
		"c++":	"xmlNewCatalog(int)",
		"go":	"NewCatalog"
	}, {
		"mangle":	"xmlNewCharEncodingHandler",
		"c++":	"xmlNewCharEncodingHandler(const char *, xmlCharEncodingInputFunc, xmlCharEncodingOutputFunc)",
		"go":	"NewCharEncodingHandler"
	}, {
		"mangle":	"xmlNewCharRef",
		"c++":	"xmlNewCharRef(xmlDocPtr, const xmlChar *)",
		"go":	"NewCharRef"
	}, {
		"mangle":	"xmlNewChild",
		"c++":	"xmlNewChild(xmlNodePtr, xmlNsPtr, const xmlChar *, const xmlChar *)",
		"go":	"NewChild"
	}, {
		"mangle":	"xmlNewComment",
		"c++":	"xmlNewComment(const xmlChar *)",
		"go":	"(*Char).NewComment"
	}, {
		"mangle":	"xmlNewDoc",
		"c++":	"xmlNewDoc(const xmlChar *)",
		"go":	"(*Char).NewDoc"
	}, {
		"mangle":	"xmlNewDocComment",
		"c++":	"xmlNewDocComment(xmlDocPtr, const xmlChar *)",
		"go":	"NewDocComment"
	}, {
		"mangle":	"xmlNewDocElementContent",
		"c++":	"xmlNewDocElementContent(xmlDocPtr, const xmlChar *, xmlElementContentType)",
		"go":	"NewDocElementContent"
	}, {
		"mangle":	"xmlNewDocFragment",
		"c++":	"xmlNewDocFragment(xmlDocPtr)",
		"go":	"NewDocFragment"
	}, {
		"mangle":	"xmlNewDocNode",
		"c++":	"xmlNewDocNode(xmlDocPtr, xmlNsPtr, const xmlChar *, const xmlChar *)",
		"go":	"NewDocNode"
	}, {
		"mangle":	"xmlNewDocNodeEatName",
		"c++":	"xmlNewDocNodeEatName(xmlDocPtr, xmlNsPtr, xmlChar *, const xmlChar *)",
		"go":	"NewDocNodeEatName"
	}, {
		"mangle":	"xmlNewDocPI",
		"c++":	"xmlNewDocPI(xmlDocPtr, const xmlChar *, const xmlChar *)",
		"go":	"NewDocPI"
	}, {
		"mangle":	"xmlNewDocProp",
		"c++":	"xmlNewDocProp(xmlDocPtr, const xmlChar *, const xmlChar *)",
		"go":	"NewDocProp"
	}, {
		"mangle":	"xmlNewDocRawNode",
		"c++":	"xmlNewDocRawNode(xmlDocPtr, xmlNsPtr, const xmlChar *, const xmlChar *)",
		"go":	"NewDocRawNode"
	}, {
		"mangle":	"xmlNewDocText",
		"c++":	"xmlNewDocText(const xmlDoc *, const xmlChar *)",
		"go":	"(*Doc).NewDocText"
	}, {
		"mangle":	"xmlNewDocTextLen",
		"c++":	"xmlNewDocTextLen(xmlDocPtr, const xmlChar *, int)",
		"go":	"NewDocTextLen"
	}, {
		"mangle":	"xmlNewDtd",
		"c++":	"xmlNewDtd(xmlDocPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"NewDtd"
	}, {
		"mangle":	"xmlNewElementContent",
		"c++":	"xmlNewElementContent(const xmlChar *, xmlElementContentType)",
		"go":	"(*Char).NewElementContent"
	}, {
		"mangle":	"xmlNewEntity",
		"c++":	"xmlNewEntity(xmlDocPtr, const xmlChar *, int, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"NewEntity"
	}, {
		"mangle":	"xmlNewEntityInputStream",
		"c++":	"xmlNewEntityInputStream(xmlParserCtxtPtr, xmlEntityPtr)",
		"go":	"NewEntityInputStream"
	}, {
		"mangle":	"xmlNewGlobalNs",
		"c++":	"xmlNewGlobalNs(xmlDocPtr, const xmlChar *, const xmlChar *)",
		"go":	"NewGlobalNs"
	}, {
		"mangle":	"xmlNewIOInputStream",
		"c++":	"xmlNewIOInputStream(xmlParserCtxtPtr, xmlParserInputBufferPtr, xmlCharEncoding)",
		"go":	"NewIOInputStream"
	}, {
		"mangle":	"xmlNewInputFromFile",
		"c++":	"xmlNewInputFromFile(xmlParserCtxtPtr, const char *)",
		"go":	"NewInputFromFile"
	}, {
		"mangle":	"xmlNewInputStream",
		"c++":	"xmlNewInputStream(xmlParserCtxtPtr)",
		"go":	"NewInputStream"
	}, {
		"mangle":	"xmlNewMutex",
		"c++":	"xmlNewMutex()",
		"go":	"NewMutex"
	}, {
		"mangle":	"xmlNewNode",
		"c++":	"xmlNewNode(xmlNsPtr, const xmlChar *)",
		"go":	"NewNode"
	}, {
		"mangle":	"xmlNewNodeEatName",
		"c++":	"xmlNewNodeEatName(xmlNsPtr, xmlChar *)",
		"go":	"NewNodeEatName"
	}, {
		"mangle":	"xmlNewNs",
		"c++":	"xmlNewNs(xmlNodePtr, const xmlChar *, const xmlChar *)",
		"go":	"NewNs"
	}, {
		"mangle":	"xmlNewNsProp",
		"c++":	"xmlNewNsProp(xmlNodePtr, xmlNsPtr, const xmlChar *, const xmlChar *)",
		"go":	"NewNsProp"
	}, {
		"mangle":	"xmlNewNsPropEatName",
		"c++":	"xmlNewNsPropEatName(xmlNodePtr, xmlNsPtr, xmlChar *, const xmlChar *)",
		"go":	"NewNsPropEatName"
	}, {
		"mangle":	"xmlNewPI",
		"c++":	"xmlNewPI(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).NewPI"
	}, {
		"mangle":	"xmlNewParserCtxt",
		"c++":	"xmlNewParserCtxt()",
		"go":	"NewParserCtxt"
	}, {
		"mangle":	"xmlNewProp",
		"c++":	"xmlNewProp(xmlNodePtr, const xmlChar *, const xmlChar *)",
		"go":	"NewProp"
	}, {
		"mangle":	"xmlNewRMutex",
		"c++":	"xmlNewRMutex()",
		"go":	"NewRMutex"
	}, {
		"mangle":	"xmlNewReference",
		"c++":	"xmlNewReference(const xmlDoc *, const xmlChar *)",
		"go":	"(*Doc).NewReference"
	}, {
		"mangle":	"xmlNewSAXParserCtxt",
		"c++":	"xmlNewSAXParserCtxt(const xmlSAXHandler *, void *)",
		"go":	"(*SAXHandler).NewSAXParserCtxt"
	}, {
		"mangle":	"xmlNewStringInputStream",
		"c++":	"xmlNewStringInputStream(xmlParserCtxtPtr, const xmlChar *)",
		"go":	"NewStringInputStream"
	}, {
		"mangle":	"xmlNewText",
		"c++":	"xmlNewText(const xmlChar *)",
		"go":	"(*Char).NewText"
	}, {
		"mangle":	"xmlNewTextChild",
		"c++":	"xmlNewTextChild(xmlNodePtr, xmlNsPtr, const xmlChar *, const xmlChar *)",
		"go":	"NewTextChild"
	}, {
		"mangle":	"xmlNewTextLen",
		"c++":	"xmlNewTextLen(const xmlChar *, int)",
		"go":	"(*Char).NewTextLen"
	}, {
		"mangle":	"xmlNewTextReader",
		"c++":	"xmlNewTextReader(xmlParserInputBufferPtr, const char *)",
		"go":	"NewTextReader"
	}, {
		"mangle":	"xmlNewTextReaderFilename",
		"c++":	"xmlNewTextReaderFilename(const char *)",
		"go":	"NewTextReaderFilename"
	}, {
		"mangle":	"xmlNewTextWriter",
		"c++":	"xmlNewTextWriter(xmlOutputBufferPtr)",
		"go":	"NewTextWriter"
	}, {
		"mangle":	"xmlNewTextWriterDoc",
		"c++":	"xmlNewTextWriterDoc(xmlDocPtr *, int)",
		"go":	"NewTextWriterDoc"
	}, {
		"mangle":	"xmlNewTextWriterFilename",
		"c++":	"xmlNewTextWriterFilename(const char *, int)",
		"go":	"NewTextWriterFilename"
	}, {
		"mangle":	"xmlNewTextWriterMemory",
		"c++":	"xmlNewTextWriterMemory(xmlBufferPtr, int)",
		"go":	"NewTextWriterMemory"
	}, {
		"mangle":	"xmlNewTextWriterPushParser",
		"c++":	"xmlNewTextWriterPushParser(xmlParserCtxtPtr, int)",
		"go":	"NewTextWriterPushParser"
	}, {
		"mangle":	"xmlNewTextWriterTree",
		"c++":	"xmlNewTextWriterTree(xmlDocPtr, xmlNodePtr, int)",
		"go":	"NewTextWriterTree"
	}, {
		"mangle":	"xmlNewValidCtxt",
		"c++":	"xmlNewValidCtxt()",
		"go":	"NewValidCtxt"
	}, {
		"mangle":	"xmlNextChar",
		"c++":	"xmlNextChar(xmlParserCtxtPtr)",
		"go":	"NextChar"
	}, {
		"mangle":	"xmlNextElementSibling",
		"c++":	"xmlNextElementSibling(xmlNodePtr)",
		"go":	"NextElementSibling"
	}, {
		"mangle":	"xmlNoNetExternalEntityLoader",
		"c++":	"xmlNoNetExternalEntityLoader(const char *, const char *, xmlParserCtxtPtr)",
		"go":	"NoNetExternalEntityLoader"
	}, {
		"mangle":	"xmlNodeAddContent",
		"c++":	"xmlNodeAddContent(xmlNodePtr, const xmlChar *)",
		"go":	"NodeAddContent"
	}, {
		"mangle":	"xmlNodeAddContentLen",
		"c++":	"xmlNodeAddContentLen(xmlNodePtr, const xmlChar *, int)",
		"go":	"NodeAddContentLen"
	}, {
		"mangle":	"xmlNodeBufGetContent",
		"c++":	"xmlNodeBufGetContent(xmlBufferPtr, const xmlNode *)",
		"go":	"NodeBufGetContent"
	}, {
		"mangle":	"xmlNodeDump",
		"c++":	"xmlNodeDump(xmlBufferPtr, xmlDocPtr, xmlNodePtr, int, int)",
		"go":	"NodeDump"
	}, {
		"mangle":	"xmlNodeDumpOutput",
		"c++":	"xmlNodeDumpOutput(xmlOutputBufferPtr, xmlDocPtr, xmlNodePtr, int, int, const char *)",
		"go":	"NodeDumpOutput"
	}, {
		"mangle":	"xmlNodeGetAttrValue",
		"c++":	"xmlNodeGetAttrValue(const xmlNode *, const xmlChar *, const xmlChar *, xmlChar **)",
		"go":	"(*Node).NodeGetAttrValue"
	}, {
		"mangle":	"xmlNodeGetBase",
		"c++":	"xmlNodeGetBase(const xmlDoc *, const xmlNode *)",
		"go":	"(*Doc).NodeGetBase"
	}, {
		"mangle":	"xmlNodeGetBaseSafe",
		"c++":	"xmlNodeGetBaseSafe(const xmlDoc *, const xmlNode *, xmlChar **)",
		"go":	"(*Doc).NodeGetBaseSafe"
	}, {
		"mangle":	"xmlNodeGetContent",
		"c++":	"xmlNodeGetContent(const xmlNode *)",
		"go":	"(*Node).NodeGetContent"
	}, {
		"mangle":	"xmlNodeGetLang",
		"c++":	"xmlNodeGetLang(const xmlNode *)",
		"go":	"(*Node).NodeGetLang"
	}, {
		"mangle":	"xmlNodeGetSpacePreserve",
		"c++":	"xmlNodeGetSpacePreserve(const xmlNode *)",
		"go":	"(*Node).NodeGetSpacePreserve"
	}, {
		"mangle":	"xmlNodeIsText",
		"c++":	"xmlNodeIsText(const xmlNode *)",
		"go":	"(*Node).NodeIsText"
	}, {
		"mangle":	"xmlNodeListGetRawString",
		"c++":	"xmlNodeListGetRawString(const xmlDoc *, const xmlNode *, int)",
		"go":	"(*Doc).NodeListGetRawString"
	}, {
		"mangle":	"xmlNodeListGetString",
		"c++":	"xmlNodeListGetString(xmlDocPtr, const xmlNode *, int)",
		"go":	"NodeListGetString"
	}, {
		"mangle":	"xmlNodeSetBase",
		"c++":	"xmlNodeSetBase(xmlNodePtr, const xmlChar *)",
		"go":	"NodeSetBase"
	}, {
		"mangle":	"xmlNodeSetContent",
		"c++":	"xmlNodeSetContent(xmlNodePtr, const xmlChar *)",
		"go":	"NodeSetContent"
	}, {
		"mangle":	"xmlNodeSetContentLen",
		"c++":	"xmlNodeSetContentLen(xmlNodePtr, const xmlChar *, int)",
		"go":	"NodeSetContentLen"
	}, {
		"mangle":	"xmlNodeSetLang",
		"c++":	"xmlNodeSetLang(xmlNodePtr, const xmlChar *)",
		"go":	"NodeSetLang"
	}, {
		"mangle":	"xmlNodeSetName",
		"c++":	"xmlNodeSetName(xmlNodePtr, const xmlChar *)",
		"go":	"NodeSetName"
	}, {
		"mangle":	"xmlNodeSetSpacePreserve",
		"c++":	"xmlNodeSetSpacePreserve(xmlNodePtr, int)",
		"go":	"NodeSetSpacePreserve"
	}, {
		"mangle":	"xmlNormalizeURIPath",
		"c++":	"xmlNormalizeURIPath(char *)",
		"go":	"NormalizeURIPath"
	}, {
		"mangle":	"xmlNormalizeWindowsPath",
		"c++":	"xmlNormalizeWindowsPath(const xmlChar *)",
		"go":	"(*Char).NormalizeWindowsPath"
	}, {
		"mangle":	"xmlOpenCharEncodingHandler",
		"c++":	"xmlOpenCharEncodingHandler(const char *, int, xmlCharEncodingHandlerPtr *)",
		"go":	"OpenCharEncodingHandler"
	}, {
		"mangle":	"xmlOutputBufferClose",
		"c++":	"xmlOutputBufferClose(xmlOutputBufferPtr)",
		"go":	"OutputBufferClose"
	}, {
		"mangle":	"xmlOutputBufferCreateBuffer",
		"c++":	"xmlOutputBufferCreateBuffer(xmlBufferPtr, xmlCharEncodingHandlerPtr)",
		"go":	"OutputBufferCreateBuffer"
	}, {
		"mangle":	"xmlOutputBufferCreateFd",
		"c++":	"xmlOutputBufferCreateFd(int, xmlCharEncodingHandlerPtr)",
		"go":	"OutputBufferCreateFd"
	}, {
		"mangle":	"xmlOutputBufferCreateFile",
		"c++":	"xmlOutputBufferCreateFile(FILE *, xmlCharEncodingHandlerPtr)",
		"go":	"OutputBufferCreateFile"
	}, {
		"mangle":	"xmlOutputBufferCreateFilename",
		"c++":	"xmlOutputBufferCreateFilename(const char *, xmlCharEncodingHandlerPtr, int)",
		"go":	"OutputBufferCreateFilename"
	}, {
		"mangle":	"xmlOutputBufferCreateFilenameDefault",
		"c++":	"xmlOutputBufferCreateFilenameDefault(xmlOutputBufferCreateFilenameFunc)",
		"go":	"OutputBufferCreateFilenameDefault"
	}, {
		"mangle":	"xmlOutputBufferCreateIO",
		"c++":	"xmlOutputBufferCreateIO(xmlOutputWriteCallback, xmlOutputCloseCallback, void *, xmlCharEncodingHandlerPtr)",
		"go":	"OutputBufferCreateIO"
	}, {
		"mangle":	"xmlOutputBufferFlush",
		"c++":	"xmlOutputBufferFlush(xmlOutputBufferPtr)",
		"go":	"OutputBufferFlush"
	}, {
		"mangle":	"xmlOutputBufferGetContent",
		"c++":	"xmlOutputBufferGetContent(xmlOutputBufferPtr)",
		"go":	"OutputBufferGetContent"
	}, {
		"mangle":	"xmlOutputBufferGetSize",
		"c++":	"xmlOutputBufferGetSize(xmlOutputBufferPtr)",
		"go":	"OutputBufferGetSize"
	}, {
		"mangle":	"xmlOutputBufferWrite",
		"c++":	"xmlOutputBufferWrite(xmlOutputBufferPtr, int, const char *)",
		"go":	"OutputBufferWrite"
	}, {
		"mangle":	"xmlOutputBufferWriteEscape",
		"c++":	"xmlOutputBufferWriteEscape(xmlOutputBufferPtr, const xmlChar *, xmlCharEncodingOutputFunc)",
		"go":	"OutputBufferWriteEscape"
	}, {
		"mangle":	"xmlOutputBufferWriteString",
		"c++":	"xmlOutputBufferWriteString(xmlOutputBufferPtr, const char *)",
		"go":	"OutputBufferWriteString"
	}, {
		"mangle":	"xmlParseAttValue",
		"c++":	"xmlParseAttValue(xmlParserCtxtPtr)",
		"go":	"ParseAttValue"
	}, {
		"mangle":	"xmlParseAttribute",
		"c++":	"xmlParseAttribute(xmlParserCtxtPtr, xmlChar **)",
		"go":	"ParseAttribute"
	}, {
		"mangle":	"xmlParseAttributeListDecl",
		"c++":	"xmlParseAttributeListDecl(xmlParserCtxtPtr)",
		"go":	"ParseAttributeListDecl"
	}, {
		"mangle":	"xmlParseAttributeType",
		"c++":	"xmlParseAttributeType(xmlParserCtxtPtr, xmlEnumerationPtr *)",
		"go":	"ParseAttributeType"
	}, {
		"mangle":	"xmlParseBalancedChunkMemory",
		"c++":	"xmlParseBalancedChunkMemory(xmlDocPtr, xmlSAXHandlerPtr, void *, int, const xmlChar *, xmlNodePtr *)",
		"go":	"ParseBalancedChunkMemory"
	}, {
		"mangle":	"xmlParseBalancedChunkMemoryRecover",
		"c++":	"xmlParseBalancedChunkMemoryRecover(xmlDocPtr, xmlSAXHandlerPtr, void *, int, const xmlChar *, xmlNodePtr *, int)",
		"go":	"ParseBalancedChunkMemoryRecover"
	}, {
		"mangle":	"xmlParseCDSect",
		"c++":	"xmlParseCDSect(xmlParserCtxtPtr)",
		"go":	"ParseCDSect"
	}, {
		"mangle":	"xmlParseCatalogFile",
		"c++":	"xmlParseCatalogFile(const char *)",
		"go":	"ParseCatalogFile"
	}, {
		"mangle":	"xmlParseCharData",
		"c++":	"xmlParseCharData(xmlParserCtxtPtr, int)",
		"go":	"ParseCharData"
	}, {
		"mangle":	"xmlParseCharEncoding",
		"c++":	"xmlParseCharEncoding(const char *)",
		"go":	"ParseCharEncoding"
	}, {
		"mangle":	"xmlParseCharRef",
		"c++":	"xmlParseCharRef(xmlParserCtxtPtr)",
		"go":	"ParseCharRef"
	}, {
		"mangle":	"xmlParseChunk",
		"c++":	"xmlParseChunk(xmlParserCtxtPtr, const char *, int, int)",
		"go":	"ParseChunk"
	}, {
		"mangle":	"xmlParseComment",
		"c++":	"xmlParseComment(xmlParserCtxtPtr)",
		"go":	"ParseComment"
	}, {
		"mangle":	"xmlParseContent",
		"c++":	"xmlParseContent(xmlParserCtxtPtr)",
		"go":	"ParseContent"
	}, {
		"mangle":	"xmlParseCtxtExternalEntity",
		"c++":	"xmlParseCtxtExternalEntity(xmlParserCtxtPtr, const xmlChar *, const xmlChar *, xmlNodePtr *)",
		"go":	"ParseCtxtExternalEntity"
	}, {
		"mangle":	"xmlParseDTD",
		"c++":	"xmlParseDTD(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).ParseDTD"
	}, {
		"mangle":	"xmlParseDefaultDecl",
		"c++":	"xmlParseDefaultDecl(xmlParserCtxtPtr, xmlChar **)",
		"go":	"ParseDefaultDecl"
	}, {
		"mangle":	"xmlParseDoc",
		"c++":	"xmlParseDoc(const xmlChar *)",
		"go":	"(*Char).ParseDoc"
	}, {
		"mangle":	"xmlParseDocTypeDecl",
		"c++":	"xmlParseDocTypeDecl(xmlParserCtxtPtr)",
		"go":	"ParseDocTypeDecl"
	}, {
		"mangle":	"xmlParseDocument",
		"c++":	"xmlParseDocument(xmlParserCtxtPtr)",
		"go":	"ParseDocument"
	}, {
		"mangle":	"xmlParseElement",
		"c++":	"xmlParseElement(xmlParserCtxtPtr)",
		"go":	"ParseElement"
	}, {
		"mangle":	"xmlParseElementChildrenContentDecl",
		"c++":	"xmlParseElementChildrenContentDecl(xmlParserCtxtPtr, int)",
		"go":	"ParseElementChildrenContentDecl"
	}, {
		"mangle":	"xmlParseElementContentDecl",
		"c++":	"xmlParseElementContentDecl(xmlParserCtxtPtr, const xmlChar *, xmlElementContentPtr *)",
		"go":	"ParseElementContentDecl"
	}, {
		"mangle":	"xmlParseElementDecl",
		"c++":	"xmlParseElementDecl(xmlParserCtxtPtr)",
		"go":	"ParseElementDecl"
	}, {
		"mangle":	"xmlParseElementMixedContentDecl",
		"c++":	"xmlParseElementMixedContentDecl(xmlParserCtxtPtr, int)",
		"go":	"ParseElementMixedContentDecl"
	}, {
		"mangle":	"xmlParseEncName",
		"c++":	"xmlParseEncName(xmlParserCtxtPtr)",
		"go":	"ParseEncName"
	}, {
		"mangle":	"xmlParseEncodingDecl",
		"c++":	"xmlParseEncodingDecl(xmlParserCtxtPtr)",
		"go":	"ParseEncodingDecl"
	}, {
		"mangle":	"xmlParseEndTag",
		"c++":	"xmlParseEndTag(xmlParserCtxtPtr)",
		"go":	"ParseEndTag"
	}, {
		"mangle":	"xmlParseEntity",
		"c++":	"xmlParseEntity(const char *)",
		"go":	"ParseEntity"
	}, {
		"mangle":	"xmlParseEntityDecl",
		"c++":	"xmlParseEntityDecl(xmlParserCtxtPtr)",
		"go":	"ParseEntityDecl"
	}, {
		"mangle":	"xmlParseEntityRef",
		"c++":	"xmlParseEntityRef(xmlParserCtxtPtr)",
		"go":	"ParseEntityRef"
	}, {
		"mangle":	"xmlParseEntityValue",
		"c++":	"xmlParseEntityValue(xmlParserCtxtPtr, xmlChar **)",
		"go":	"ParseEntityValue"
	}, {
		"mangle":	"xmlParseEnumeratedType",
		"c++":	"xmlParseEnumeratedType(xmlParserCtxtPtr, xmlEnumerationPtr *)",
		"go":	"ParseEnumeratedType"
	}, {
		"mangle":	"xmlParseEnumerationType",
		"c++":	"xmlParseEnumerationType(xmlParserCtxtPtr)",
		"go":	"ParseEnumerationType"
	}, {
		"mangle":	"xmlParseExtParsedEnt",
		"c++":	"xmlParseExtParsedEnt(xmlParserCtxtPtr)",
		"go":	"ParseExtParsedEnt"
	}, {
		"mangle":	"xmlParseExternalEntity",
		"c++":	"xmlParseExternalEntity(xmlDocPtr, xmlSAXHandlerPtr, void *, int, const xmlChar *, const xmlChar *, xmlNodePtr *)",
		"go":	"ParseExternalEntity"
	}, {
		"mangle":	"xmlParseExternalID",
		"c++":	"xmlParseExternalID(xmlParserCtxtPtr, xmlChar **, int)",
		"go":	"ParseExternalID"
	}, {
		"mangle":	"xmlParseExternalSubset",
		"c++":	"xmlParseExternalSubset(xmlParserCtxtPtr, const xmlChar *, const xmlChar *)",
		"go":	"ParseExternalSubset"
	}, {
		"mangle":	"xmlParseFile",
		"c++":	"xmlParseFile(const char *)",
		"go":	"ParseFile"
	}, {
		"mangle":	"xmlParseInNodeContext",
		"c++":	"xmlParseInNodeContext(xmlNodePtr, const char *, int, int, xmlNodePtr *)",
		"go":	"ParseInNodeContext"
	}, {
		"mangle":	"xmlParseMarkupDecl",
		"c++":	"xmlParseMarkupDecl(xmlParserCtxtPtr)",
		"go":	"ParseMarkupDecl"
	}, {
		"mangle":	"xmlParseMemory",
		"c++":	"xmlParseMemory(const char *, int)",
		"go":	"ParseMemory"
	}, {
		"mangle":	"xmlParseMisc",
		"c++":	"xmlParseMisc(xmlParserCtxtPtr)",
		"go":	"ParseMisc"
	}, {
		"mangle":	"xmlParseName",
		"c++":	"xmlParseName(xmlParserCtxtPtr)",
		"go":	"ParseName"
	}, {
		"mangle":	"xmlParseNamespace",
		"c++":	"xmlParseNamespace(xmlParserCtxtPtr)",
		"go":	"ParseNamespace"
	}, {
		"mangle":	"xmlParseNmtoken",
		"c++":	"xmlParseNmtoken(xmlParserCtxtPtr)",
		"go":	"ParseNmtoken"
	}, {
		"mangle":	"xmlParseNotationDecl",
		"c++":	"xmlParseNotationDecl(xmlParserCtxtPtr)",
		"go":	"ParseNotationDecl"
	}, {
		"mangle":	"xmlParseNotationType",
		"c++":	"xmlParseNotationType(xmlParserCtxtPtr)",
		"go":	"ParseNotationType"
	}, {
		"mangle":	"xmlParsePEReference",
		"c++":	"xmlParsePEReference(xmlParserCtxtPtr)",
		"go":	"ParsePEReference"
	}, {
		"mangle":	"xmlParsePI",
		"c++":	"xmlParsePI(xmlParserCtxtPtr)",
		"go":	"ParsePI"
	}, {
		"mangle":	"xmlParsePITarget",
		"c++":	"xmlParsePITarget(xmlParserCtxtPtr)",
		"go":	"ParsePITarget"
	}, {
		"mangle":	"xmlParsePubidLiteral",
		"c++":	"xmlParsePubidLiteral(xmlParserCtxtPtr)",
		"go":	"ParsePubidLiteral"
	}, {
		"mangle":	"xmlParseQuotedString",
		"c++":	"xmlParseQuotedString(xmlParserCtxtPtr)",
		"go":	"ParseQuotedString"
	}, {
		"mangle":	"xmlParseReference",
		"c++":	"xmlParseReference(xmlParserCtxtPtr)",
		"go":	"ParseReference"
	}, {
		"mangle":	"xmlParseSDDecl",
		"c++":	"xmlParseSDDecl(xmlParserCtxtPtr)",
		"go":	"ParseSDDecl"
	}, {
		"mangle":	"xmlParseStartTag",
		"c++":	"xmlParseStartTag(xmlParserCtxtPtr)",
		"go":	"ParseStartTag"
	}, {
		"mangle":	"xmlParseSystemLiteral",
		"c++":	"xmlParseSystemLiteral(xmlParserCtxtPtr)",
		"go":	"ParseSystemLiteral"
	}, {
		"mangle":	"xmlParseTextDecl",
		"c++":	"xmlParseTextDecl(xmlParserCtxtPtr)",
		"go":	"ParseTextDecl"
	}, {
		"mangle":	"xmlParseURI",
		"c++":	"xmlParseURI(const char *)",
		"go":	"ParseURI"
	}, {
		"mangle":	"xmlParseURIRaw",
		"c++":	"xmlParseURIRaw(const char *, int)",
		"go":	"ParseURIRaw"
	}, {
		"mangle":	"xmlParseURIReference",
		"c++":	"xmlParseURIReference(xmlURIPtr, const char *)",
		"go":	"ParseURIReference"
	}, {
		"mangle":	"xmlParseURISafe",
		"c++":	"xmlParseURISafe(const char *, xmlURIPtr *)",
		"go":	"ParseURISafe"
	}, {
		"mangle":	"xmlParseVersionInfo",
		"c++":	"xmlParseVersionInfo(xmlParserCtxtPtr)",
		"go":	"ParseVersionInfo"
	}, {
		"mangle":	"xmlParseVersionNum",
		"c++":	"xmlParseVersionNum(xmlParserCtxtPtr)",
		"go":	"ParseVersionNum"
	}, {
		"mangle":	"xmlParseXMLDecl",
		"c++":	"xmlParseXMLDecl(xmlParserCtxtPtr)",
		"go":	"ParseXMLDecl"
	}, {
		"mangle":	"xmlParserAddNodeInfo",
		"c++":	"xmlParserAddNodeInfo(xmlParserCtxtPtr, xmlParserNodeInfoPtr)",
		"go":	"ParserAddNodeInfo"
	}, {
		"mangle":	"xmlParserError",
		"c++":	"xmlParserError(void *, const char *, ...)",
		"go":	"ParserError"
	}, {
		"mangle":	"xmlParserFindNodeInfo",
		"c++":	"xmlParserFindNodeInfo(xmlParserCtxtPtr, xmlNodePtr)",
		"go":	"ParserFindNodeInfo"
	}, {
		"mangle":	"xmlParserFindNodeInfoIndex",
		"c++":	"xmlParserFindNodeInfoIndex(xmlParserNodeInfoSeqPtr, xmlNodePtr)",
		"go":	"ParserFindNodeInfoIndex"
	}, {
		"mangle":	"xmlParserGetDirectory",
		"c++":	"xmlParserGetDirectory(const char *)",
		"go":	"ParserGetDirectory"
	}, {
		"mangle":	"xmlParserHandlePEReference",
		"c++":	"xmlParserHandlePEReference(xmlParserCtxtPtr)",
		"go":	"ParserHandlePEReference"
	}, {
		"mangle":	"xmlParserHandleReference",
		"c++":	"xmlParserHandleReference(xmlParserCtxtPtr)",
		"go":	"ParserHandleReference"
	}, {
		"mangle":	"xmlParserInputBufferCreateFd",
		"c++":	"xmlParserInputBufferCreateFd(int, xmlCharEncoding)",
		"go":	"ParserInputBufferCreateFd"
	}, {
		"mangle":	"xmlParserInputBufferCreateFile",
		"c++":	"xmlParserInputBufferCreateFile(FILE *, xmlCharEncoding)",
		"go":	"ParserInputBufferCreateFile"
	}, {
		"mangle":	"xmlParserInputBufferCreateFilename",
		"c++":	"xmlParserInputBufferCreateFilename(const char *, xmlCharEncoding)",
		"go":	"ParserInputBufferCreateFilename"
	}, {
		"mangle":	"xmlParserInputBufferCreateFilenameDefault",
		"c++":	"xmlParserInputBufferCreateFilenameDefault(xmlParserInputBufferCreateFilenameFunc)",
		"go":	"ParserInputBufferCreateFilenameDefault"
	}, {
		"mangle":	"xmlParserInputBufferCreateIO",
		"c++":	"xmlParserInputBufferCreateIO(xmlInputReadCallback, xmlInputCloseCallback, void *, xmlCharEncoding)",
		"go":	"ParserInputBufferCreateIO"
	}, {
		"mangle":	"xmlParserInputBufferCreateMem",
		"c++":	"xmlParserInputBufferCreateMem(const char *, int, xmlCharEncoding)",
		"go":	"ParserInputBufferCreateMem"
	}, {
		"mangle":	"xmlParserInputBufferCreateStatic",
		"c++":	"xmlParserInputBufferCreateStatic(const char *, int, xmlCharEncoding)",
		"go":	"ParserInputBufferCreateStatic"
	}, {
		"mangle":	"xmlParserInputBufferGrow",
		"c++":	"xmlParserInputBufferGrow(xmlParserInputBufferPtr, int)",
		"go":	"ParserInputBufferGrow"
	}, {
		"mangle":	"xmlParserInputBufferPush",
		"c++":	"xmlParserInputBufferPush(xmlParserInputBufferPtr, int, const char *)",
		"go":	"ParserInputBufferPush"
	}, {
		"mangle":	"xmlParserInputBufferRead",
		"c++":	"xmlParserInputBufferRead(xmlParserInputBufferPtr, int)",
		"go":	"ParserInputBufferRead"
	}, {
		"mangle":	"xmlParserInputGrow",
		"c++":	"xmlParserInputGrow(xmlParserInputPtr, int)",
		"go":	"ParserInputGrow"
	}, {
		"mangle":	"xmlParserInputRead",
		"c++":	"xmlParserInputRead(xmlParserInputPtr, int)",
		"go":	"ParserInputRead"
	}, {
		"mangle":	"xmlParserInputShrink",
		"c++":	"xmlParserInputShrink(xmlParserInputPtr)",
		"go":	"ParserInputShrink"
	}, {
		"mangle":	"xmlParserPrintFileContext",
		"c++":	"xmlParserPrintFileContext(struct _xmlParserInput *)",
		"go":	"(*Struct XmlParserInput).ParserPrintFileContext"
	}, {
		"mangle":	"xmlParserPrintFileInfo",
		"c++":	"xmlParserPrintFileInfo(struct _xmlParserInput *)",
		"go":	"(*Struct XmlParserInput).ParserPrintFileInfo"
	}, {
		"mangle":	"xmlParserValidityError",
		"c++":	"xmlParserValidityError(void *, const char *, ...)",
		"go":	"ParserValidityError"
	}, {
		"mangle":	"xmlParserValidityWarning",
		"c++":	"xmlParserValidityWarning(void *, const char *, ...)",
		"go":	"ParserValidityWarning"
	}, {
		"mangle":	"xmlParserWarning",
		"c++":	"xmlParserWarning(void *, const char *, ...)",
		"go":	"ParserWarning"
	}, {
		"mangle":	"xmlPathToURI",
		"c++":	"xmlPathToURI(const xmlChar *)",
		"go":	"(*Char).PathToURI"
	}, {
		"mangle":	"xmlPatternCompileSafe",
		"c++":	"xmlPatternCompileSafe(const xmlChar *, xmlDict *, int, const xmlChar **, xmlPatternPtr *)",
		"go":	"(*Char).PatternCompileSafe"
	}, {
		"mangle":	"xmlPatternFromRoot",
		"c++":	"xmlPatternFromRoot(xmlPatternPtr)",
		"go":	"PatternFromRoot"
	}, {
		"mangle":	"xmlPatternGetStreamCtxt",
		"c++":	"xmlPatternGetStreamCtxt(xmlPatternPtr)",
		"go":	"PatternGetStreamCtxt"
	}, {
		"mangle":	"xmlPatternMatch",
		"c++":	"xmlPatternMatch(xmlPatternPtr, xmlNodePtr)",
		"go":	"PatternMatch"
	}, {
		"mangle":	"xmlPatternMaxDepth",
		"c++":	"xmlPatternMaxDepth(xmlPatternPtr)",
		"go":	"PatternMaxDepth"
	}, {
		"mangle":	"xmlPatternMinDepth",
		"c++":	"xmlPatternMinDepth(xmlPatternPtr)",
		"go":	"PatternMinDepth"
	}, {
		"mangle":	"xmlPatternStreamable",
		"c++":	"xmlPatternStreamable(xmlPatternPtr)",
		"go":	"PatternStreamable"
	}, {
		"mangle":	"xmlPatterncompile",
		"c++":	"xmlPatterncompile(const xmlChar *, xmlDict *, int, const xmlChar **)",
		"go":	"(*Char).Patterncompile"
	}, {
		"mangle":	"xmlPedanticParserDefault",
		"c++":	"xmlPedanticParserDefault(int)",
		"go":	"PedanticParserDefault"
	}, {
		"mangle":	"xmlPopInput",
		"c++":	"xmlPopInput(xmlParserCtxtPtr)",
		"go":	"PopInput"
	}, {
		"mangle":	"xmlPopInputCallbacks",
		"c++":	"xmlPopInputCallbacks()",
		"go":	"PopInputCallbacks"
	}, {
		"mangle":	"xmlPopOutputCallbacks",
		"c++":	"xmlPopOutputCallbacks()",
		"go":	"PopOutputCallbacks"
	}, {
		"mangle":	"xmlPreviousElementSibling",
		"c++":	"xmlPreviousElementSibling(xmlNodePtr)",
		"go":	"PreviousElementSibling"
	}, {
		"mangle":	"xmlPrintURI",
		"c++":	"xmlPrintURI(FILE *, xmlURIPtr)",
		"go":	"PrintURI"
	}, {
		"mangle":	"xmlPushInput",
		"c++":	"xmlPushInput(xmlParserCtxtPtr, xmlParserInputPtr)",
		"go":	"PushInput"
	}, {
		"mangle":	"xmlRMutexLock",
		"c++":	"xmlRMutexLock(xmlRMutexPtr)",
		"go":	"RMutexLock"
	}, {
		"mangle":	"xmlRMutexUnlock",
		"c++":	"xmlRMutexUnlock(xmlRMutexPtr)",
		"go":	"RMutexUnlock"
	}, {
		"mangle":	"xmlReadDoc",
		"c++":	"xmlReadDoc(const xmlChar *, const char *, const char *, int)",
		"go":	"(*Char).ReadDoc"
	}, {
		"mangle":	"xmlReadFd",
		"c++":	"xmlReadFd(int, const char *, const char *, int)",
		"go":	"ReadFd"
	}, {
		"mangle":	"xmlReadFile",
		"c++":	"xmlReadFile(const char *, const char *, int)",
		"go":	"ReadFile"
	}, {
		"mangle":	"xmlReadIO",
		"c++":	"xmlReadIO(xmlInputReadCallback, xmlInputCloseCallback, void *, const char *, const char *, int)",
		"go":	"ReadIO"
	}, {
		"mangle":	"xmlReadMemory",
		"c++":	"xmlReadMemory(const char *, int, const char *, const char *, int)",
		"go":	"ReadMemory"
	}, {
		"mangle":	"xmlReaderForDoc",
		"c++":	"xmlReaderForDoc(const xmlChar *, const char *, const char *, int)",
		"go":	"(*Char).ReaderForDoc"
	}, {
		"mangle":	"xmlReaderForFd",
		"c++":	"xmlReaderForFd(int, const char *, const char *, int)",
		"go":	"ReaderForFd"
	}, {
		"mangle":	"xmlReaderForFile",
		"c++":	"xmlReaderForFile(const char *, const char *, int)",
		"go":	"ReaderForFile"
	}, {
		"mangle":	"xmlReaderForIO",
		"c++":	"xmlReaderForIO(xmlInputReadCallback, xmlInputCloseCallback, void *, const char *, const char *, int)",
		"go":	"ReaderForIO"
	}, {
		"mangle":	"xmlReaderForMemory",
		"c++":	"xmlReaderForMemory(const char *, int, const char *, const char *, int)",
		"go":	"ReaderForMemory"
	}, {
		"mangle":	"xmlReaderNewDoc",
		"c++":	"xmlReaderNewDoc(xmlTextReaderPtr, const xmlChar *, const char *, const char *, int)",
		"go":	"ReaderNewDoc"
	}, {
		"mangle":	"xmlReaderNewFd",
		"c++":	"xmlReaderNewFd(xmlTextReaderPtr, int, const char *, const char *, int)",
		"go":	"ReaderNewFd"
	}, {
		"mangle":	"xmlReaderNewFile",
		"c++":	"xmlReaderNewFile(xmlTextReaderPtr, const char *, const char *, int)",
		"go":	"ReaderNewFile"
	}, {
		"mangle":	"xmlReaderNewIO",
		"c++":	"xmlReaderNewIO(xmlTextReaderPtr, xmlInputReadCallback, xmlInputCloseCallback, void *, const char *, const char *, int)",
		"go":	"ReaderNewIO"
	}, {
		"mangle":	"xmlReaderNewMemory",
		"c++":	"xmlReaderNewMemory(xmlTextReaderPtr, const char *, int, const char *, const char *, int)",
		"go":	"ReaderNewMemory"
	}, {
		"mangle":	"xmlReaderNewWalker",
		"c++":	"xmlReaderNewWalker(xmlTextReaderPtr, xmlDocPtr)",
		"go":	"ReaderNewWalker"
	}, {
		"mangle":	"xmlReaderWalker",
		"c++":	"xmlReaderWalker(xmlDocPtr)",
		"go":	"ReaderWalker"
	}, {
		"mangle":	"xmlReallocLoc",
		"c++":	"xmlReallocLoc(void *, size_t, const char *, int)",
		"go":	"ReallocLoc"
	}, {
		"mangle":	"xmlReconciliateNs",
		"c++":	"xmlReconciliateNs(xmlDocPtr, xmlNodePtr)",
		"go":	"ReconciliateNs"
	}, {
		"mangle":	"xmlRecoverDoc",
		"c++":	"xmlRecoverDoc(const xmlChar *)",
		"go":	"(*Char).RecoverDoc"
	}, {
		"mangle":	"xmlRecoverFile",
		"c++":	"xmlRecoverFile(const char *)",
		"go":	"RecoverFile"
	}, {
		"mangle":	"xmlRecoverMemory",
		"c++":	"xmlRecoverMemory(const char *, int)",
		"go":	"RecoverMemory"
	}, {
		"mangle":	"xmlRegExecErrInfo",
		"c++":	"xmlRegExecErrInfo(xmlRegExecCtxtPtr, const xmlChar **, int *, int *, xmlChar **, int *)",
		"go":	"RegExecErrInfo"
	}, {
		"mangle":	"xmlRegExecNextValues",
		"c++":	"xmlRegExecNextValues(xmlRegExecCtxtPtr, int *, int *, xmlChar **, int *)",
		"go":	"RegExecNextValues"
	}, {
		"mangle":	"xmlRegExecPushString",
		"c++":	"xmlRegExecPushString(xmlRegExecCtxtPtr, const xmlChar *, void *)",
		"go":	"RegExecPushString"
	}, {
		"mangle":	"xmlRegExecPushString2",
		"c++":	"xmlRegExecPushString2(xmlRegExecCtxtPtr, const xmlChar *, const xmlChar *, void *)",
		"go":	"RegExecPushString2"
	}, {
		"mangle":	"xmlRegFreeExecCtxt",
		"c++":	"xmlRegFreeExecCtxt(xmlRegExecCtxtPtr)",
		"go":	"RegFreeExecCtxt"
	}, {
		"mangle":	"xmlRegFreeRegexp",
		"c++":	"xmlRegFreeRegexp(xmlRegexpPtr)",
		"go":	"RegFreeRegexp"
	}, {
		"mangle":	"xmlRegNewExecCtxt",
		"c++":	"xmlRegNewExecCtxt(xmlRegexpPtr, xmlRegExecCallbacks, void *)",
		"go":	"RegNewExecCtxt"
	}, {
		"mangle":	"xmlRegexpCompile",
		"c++":	"xmlRegexpCompile(const xmlChar *)",
		"go":	"(*Char).RegexpCompile"
	}, {
		"mangle":	"xmlRegexpExec",
		"c++":	"xmlRegexpExec(xmlRegexpPtr, const xmlChar *)",
		"go":	"RegexpExec"
	}, {
		"mangle":	"xmlRegexpIsDeterminist",
		"c++":	"xmlRegexpIsDeterminist(xmlRegexpPtr)",
		"go":	"RegexpIsDeterminist"
	}, {
		"mangle":	"xmlRegexpPrint",
		"c++":	"xmlRegexpPrint(FILE *, xmlRegexpPtr)",
		"go":	"RegexpPrint"
	}, {
		"mangle":	"xmlRegisterCharEncodingHandler",
		"c++":	"xmlRegisterCharEncodingHandler(xmlCharEncodingHandlerPtr)",
		"go":	"RegisterCharEncodingHandler"
	}, {
		"mangle":	"xmlRegisterDefaultInputCallbacks",
		"c++":	"xmlRegisterDefaultInputCallbacks()",
		"go":	"RegisterDefaultInputCallbacks"
	}, {
		"mangle":	"xmlRegisterDefaultOutputCallbacks",
		"c++":	"xmlRegisterDefaultOutputCallbacks()",
		"go":	"RegisterDefaultOutputCallbacks"
	}, {
		"mangle":	"xmlRegisterHTTPPostCallbacks",
		"c++":	"xmlRegisterHTTPPostCallbacks()",
		"go":	"RegisterHTTPPostCallbacks"
	}, {
		"mangle":	"xmlRegisterInputCallbacks",
		"c++":	"xmlRegisterInputCallbacks(xmlInputMatchCallback, xmlInputOpenCallback, xmlInputReadCallback, xmlInputCloseCallback)",
		"go":	"RegisterInputCallbacks"
	}, {
		"mangle":	"xmlRegisterNodeDefault",
		"c++":	"xmlRegisterNodeDefault(xmlRegisterNodeFunc)",
		"go":	"RegisterNodeDefault"
	}, {
		"mangle":	"xmlRegisterOutputCallbacks",
		"c++":	"xmlRegisterOutputCallbacks(xmlOutputMatchCallback, xmlOutputOpenCallback, xmlOutputWriteCallback, xmlOutputCloseCallback)",
		"go":	"RegisterOutputCallbacks"
	}, {
		"mangle":	"xmlRelaxNGCleanupTypes",
		"c++":	"xmlRelaxNGCleanupTypes()",
		"go":	"RelaxNGCleanupTypes"
	}, {
		"mangle":	"xmlRelaxNGDump",
		"c++":	"xmlRelaxNGDump(FILE *, xmlRelaxNGPtr)",
		"go":	"RelaxNGDump"
	}, {
		"mangle":	"xmlRelaxNGDumpTree",
		"c++":	"xmlRelaxNGDumpTree(FILE *, xmlRelaxNGPtr)",
		"go":	"RelaxNGDumpTree"
	}, {
		"mangle":	"xmlRelaxNGFree",
		"c++":	"xmlRelaxNGFree(xmlRelaxNGPtr)",
		"go":	"RelaxNGFree"
	}, {
		"mangle":	"xmlRelaxNGFreeParserCtxt",
		"c++":	"xmlRelaxNGFreeParserCtxt(xmlRelaxNGParserCtxtPtr)",
		"go":	"RelaxNGFreeParserCtxt"
	}, {
		"mangle":	"xmlRelaxNGFreeValidCtxt",
		"c++":	"xmlRelaxNGFreeValidCtxt(xmlRelaxNGValidCtxtPtr)",
		"go":	"RelaxNGFreeValidCtxt"
	}, {
		"mangle":	"xmlRelaxNGGetParserErrors",
		"c++":	"xmlRelaxNGGetParserErrors(xmlRelaxNGParserCtxtPtr, xmlRelaxNGValidityErrorFunc *, xmlRelaxNGValidityWarningFunc *, void **)",
		"go":	"RelaxNGGetParserErrors"
	}, {
		"mangle":	"xmlRelaxNGGetValidErrors",
		"c++":	"xmlRelaxNGGetValidErrors(xmlRelaxNGValidCtxtPtr, xmlRelaxNGValidityErrorFunc *, xmlRelaxNGValidityWarningFunc *, void **)",
		"go":	"RelaxNGGetValidErrors"
	}, {
		"mangle":	"xmlRelaxNGInitTypes",
		"c++":	"xmlRelaxNGInitTypes()",
		"go":	"RelaxNGInitTypes"
	}, {
		"mangle":	"xmlRelaxNGNewDocParserCtxt",
		"c++":	"xmlRelaxNGNewDocParserCtxt(xmlDocPtr)",
		"go":	"RelaxNGNewDocParserCtxt"
	}, {
		"mangle":	"xmlRelaxNGNewMemParserCtxt",
		"c++":	"xmlRelaxNGNewMemParserCtxt(const char *, int)",
		"go":	"RelaxNGNewMemParserCtxt"
	}, {
		"mangle":	"xmlRelaxNGNewParserCtxt",
		"c++":	"xmlRelaxNGNewParserCtxt(const char *)",
		"go":	"RelaxNGNewParserCtxt"
	}, {
		"mangle":	"xmlRelaxNGNewValidCtxt",
		"c++":	"xmlRelaxNGNewValidCtxt(xmlRelaxNGPtr)",
		"go":	"RelaxNGNewValidCtxt"
	}, {
		"mangle":	"xmlRelaxNGParse",
		"c++":	"xmlRelaxNGParse(xmlRelaxNGParserCtxtPtr)",
		"go":	"RelaxNGParse"
	}, {
		"mangle":	"xmlRelaxNGSetParserErrors",
		"c++":	"xmlRelaxNGSetParserErrors(xmlRelaxNGParserCtxtPtr, xmlRelaxNGValidityErrorFunc, xmlRelaxNGValidityWarningFunc, void *)",
		"go":	"RelaxNGSetParserErrors"
	}, {
		"mangle":	"xmlRelaxNGSetParserStructuredErrors",
		"c++":	"xmlRelaxNGSetParserStructuredErrors(xmlRelaxNGParserCtxtPtr, xmlStructuredErrorFunc, void *)",
		"go":	"RelaxNGSetParserStructuredErrors"
	}, {
		"mangle":	"xmlRelaxNGSetValidErrors",
		"c++":	"xmlRelaxNGSetValidErrors(xmlRelaxNGValidCtxtPtr, xmlRelaxNGValidityErrorFunc, xmlRelaxNGValidityWarningFunc, void *)",
		"go":	"RelaxNGSetValidErrors"
	}, {
		"mangle":	"xmlRelaxNGSetValidStructuredErrors",
		"c++":	"xmlRelaxNGSetValidStructuredErrors(xmlRelaxNGValidCtxtPtr, xmlStructuredErrorFunc, void *)",
		"go":	"RelaxNGSetValidStructuredErrors"
	}, {
		"mangle":	"xmlRelaxNGValidateDoc",
		"c++":	"xmlRelaxNGValidateDoc(xmlRelaxNGValidCtxtPtr, xmlDocPtr)",
		"go":	"RelaxNGValidateDoc"
	}, {
		"mangle":	"xmlRelaxNGValidateFullElement",
		"c++":	"xmlRelaxNGValidateFullElement(xmlRelaxNGValidCtxtPtr, xmlDocPtr, xmlNodePtr)",
		"go":	"RelaxNGValidateFullElement"
	}, {
		"mangle":	"xmlRelaxNGValidatePopElement",
		"c++":	"xmlRelaxNGValidatePopElement(xmlRelaxNGValidCtxtPtr, xmlDocPtr, xmlNodePtr)",
		"go":	"RelaxNGValidatePopElement"
	}, {
		"mangle":	"xmlRelaxNGValidatePushCData",
		"c++":	"xmlRelaxNGValidatePushCData(xmlRelaxNGValidCtxtPtr, const xmlChar *, int)",
		"go":	"RelaxNGValidatePushCData"
	}, {
		"mangle":	"xmlRelaxNGValidatePushElement",
		"c++":	"xmlRelaxNGValidatePushElement(xmlRelaxNGValidCtxtPtr, xmlDocPtr, xmlNodePtr)",
		"go":	"RelaxNGValidatePushElement"
	}, {
		"mangle":	"xmlRelaxParserSetFlag",
		"c++":	"xmlRelaxParserSetFlag(xmlRelaxNGParserCtxtPtr, int)",
		"go":	"RelaxParserSetFlag"
	}, {
		"mangle":	"xmlRemoveID",
		"c++":	"xmlRemoveID(xmlDocPtr, xmlAttrPtr)",
		"go":	"RemoveID"
	}, {
		"mangle":	"xmlRemoveProp",
		"c++":	"xmlRemoveProp(xmlAttrPtr)",
		"go":	"RemoveProp"
	}, {
		"mangle":	"xmlRemoveRef",
		"c++":	"xmlRemoveRef(xmlDocPtr, xmlAttrPtr)",
		"go":	"RemoveRef"
	}, {
		"mangle":	"xmlReplaceNode",
		"c++":	"xmlReplaceNode(xmlNodePtr, xmlNodePtr)",
		"go":	"ReplaceNode"
	}, {
		"mangle":	"xmlResetError",
		"c++":	"xmlResetError(xmlErrorPtr)",
		"go":	"ResetError"
	}, {
		"mangle":	"xmlResetLastError",
		"c++":	"xmlResetLastError()",
		"go":	"ResetLastError"
	}, {
		"mangle":	"xmlSAX2AttributeDecl",
		"c++":	"xmlSAX2AttributeDecl(void *, const xmlChar *, const xmlChar *, int, int, const xmlChar *, xmlEnumerationPtr)",
		"go":	"SAX2AttributeDecl"
	}, {
		"mangle":	"xmlSAX2CDataBlock",
		"c++":	"xmlSAX2CDataBlock(void *, const xmlChar *, int)",
		"go":	"SAX2CDataBlock"
	}, {
		"mangle":	"xmlSAX2Characters",
		"c++":	"xmlSAX2Characters(void *, const xmlChar *, int)",
		"go":	"SAX2Characters"
	}, {
		"mangle":	"xmlSAX2Comment",
		"c++":	"xmlSAX2Comment(void *, const xmlChar *)",
		"go":	"SAX2Comment"
	}, {
		"mangle":	"xmlSAX2ElementDecl",
		"c++":	"xmlSAX2ElementDecl(void *, const xmlChar *, int, xmlElementContentPtr)",
		"go":	"SAX2ElementDecl"
	}, {
		"mangle":	"xmlSAX2EndDocument",
		"c++":	"xmlSAX2EndDocument(void *)",
		"go":	"SAX2EndDocument"
	}, {
		"mangle":	"xmlSAX2EndElement",
		"c++":	"xmlSAX2EndElement(void *, const xmlChar *)",
		"go":	"SAX2EndElement"
	}, {
		"mangle":	"xmlSAX2EndElementNs",
		"c++":	"xmlSAX2EndElementNs(void *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"SAX2EndElementNs"
	}, {
		"mangle":	"xmlSAX2EntityDecl",
		"c++":	"xmlSAX2EntityDecl(void *, const xmlChar *, int, const xmlChar *, const xmlChar *, xmlChar *)",
		"go":	"SAX2EntityDecl"
	}, {
		"mangle":	"xmlSAX2ExternalSubset",
		"c++":	"xmlSAX2ExternalSubset(void *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"SAX2ExternalSubset"
	}, {
		"mangle":	"xmlSAX2GetColumnNumber",
		"c++":	"xmlSAX2GetColumnNumber(void *)",
		"go":	"SAX2GetColumnNumber"
	}, {
		"mangle":	"xmlSAX2GetEntity",
		"c++":	"xmlSAX2GetEntity(void *, const xmlChar *)",
		"go":	"SAX2GetEntity"
	}, {
		"mangle":	"xmlSAX2GetLineNumber",
		"c++":	"xmlSAX2GetLineNumber(void *)",
		"go":	"SAX2GetLineNumber"
	}, {
		"mangle":	"xmlSAX2GetParameterEntity",
		"c++":	"xmlSAX2GetParameterEntity(void *, const xmlChar *)",
		"go":	"SAX2GetParameterEntity"
	}, {
		"mangle":	"xmlSAX2GetPublicId",
		"c++":	"xmlSAX2GetPublicId(void *)",
		"go":	"SAX2GetPublicId"
	}, {
		"mangle":	"xmlSAX2GetSystemId",
		"c++":	"xmlSAX2GetSystemId(void *)",
		"go":	"SAX2GetSystemId"
	}, {
		"mangle":	"xmlSAX2HasExternalSubset",
		"c++":	"xmlSAX2HasExternalSubset(void *)",
		"go":	"SAX2HasExternalSubset"
	}, {
		"mangle":	"xmlSAX2HasInternalSubset",
		"c++":	"xmlSAX2HasInternalSubset(void *)",
		"go":	"SAX2HasInternalSubset"
	}, {
		"mangle":	"xmlSAX2IgnorableWhitespace",
		"c++":	"xmlSAX2IgnorableWhitespace(void *, const xmlChar *, int)",
		"go":	"SAX2IgnorableWhitespace"
	}, {
		"mangle":	"xmlSAX2InitDefaultSAXHandler",
		"c++":	"xmlSAX2InitDefaultSAXHandler(xmlSAXHandler *, int)",
		"go":	"(*SAXHandler).SAX2InitDefaultSAXHandler"
	}, {
		"mangle":	"xmlSAX2InitHtmlDefaultSAXHandler",
		"c++":	"xmlSAX2InitHtmlDefaultSAXHandler(xmlSAXHandler *)",
		"go":	"(*SAXHandler).SAX2InitHtmlDefaultSAXHandler"
	}, {
		"mangle":	"xmlSAX2InternalSubset",
		"c++":	"xmlSAX2InternalSubset(void *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"SAX2InternalSubset"
	}, {
		"mangle":	"xmlSAX2IsStandalone",
		"c++":	"xmlSAX2IsStandalone(void *)",
		"go":	"SAX2IsStandalone"
	}, {
		"mangle":	"xmlSAX2NotationDecl",
		"c++":	"xmlSAX2NotationDecl(void *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"SAX2NotationDecl"
	}, {
		"mangle":	"xmlSAX2ProcessingInstruction",
		"c++":	"xmlSAX2ProcessingInstruction(void *, const xmlChar *, const xmlChar *)",
		"go":	"SAX2ProcessingInstruction"
	}, {
		"mangle":	"xmlSAX2Reference",
		"c++":	"xmlSAX2Reference(void *, const xmlChar *)",
		"go":	"SAX2Reference"
	}, {
		"mangle":	"xmlSAX2ResolveEntity",
		"c++":	"xmlSAX2ResolveEntity(void *, const xmlChar *, const xmlChar *)",
		"go":	"SAX2ResolveEntity"
	}, {
		"mangle":	"xmlSAX2SetDocumentLocator",
		"c++":	"xmlSAX2SetDocumentLocator(void *, xmlSAXLocatorPtr)",
		"go":	"SAX2SetDocumentLocator"
	}, {
		"mangle":	"xmlSAX2StartDocument",
		"c++":	"xmlSAX2StartDocument(void *)",
		"go":	"SAX2StartDocument"
	}, {
		"mangle":	"xmlSAX2StartElement",
		"c++":	"xmlSAX2StartElement(void *, const xmlChar *, const xmlChar **)",
		"go":	"SAX2StartElement"
	}, {
		"mangle":	"xmlSAX2StartElementNs",
		"c++":	"xmlSAX2StartElementNs(void *, const xmlChar *, const xmlChar *, const xmlChar *, int, const xmlChar **, int, int, const xmlChar **)",
		"go":	"SAX2StartElementNs"
	}, {
		"mangle":	"xmlSAX2UnparsedEntityDecl",
		"c++":	"xmlSAX2UnparsedEntityDecl(void *, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"SAX2UnparsedEntityDecl"
	}, {
		"mangle":	"xmlSAXDefaultVersion",
		"c++":	"xmlSAXDefaultVersion(int)",
		"go":	"SAXDefaultVersion"
	}, {
		"mangle":	"xmlSAXParseDTD",
		"c++":	"xmlSAXParseDTD(xmlSAXHandlerPtr, const xmlChar *, const xmlChar *)",
		"go":	"SAXParseDTD"
	}, {
		"mangle":	"xmlSAXParseDoc",
		"c++":	"xmlSAXParseDoc(xmlSAXHandlerPtr, const xmlChar *, int)",
		"go":	"SAXParseDoc"
	}, {
		"mangle":	"xmlSAXParseEntity",
		"c++":	"xmlSAXParseEntity(xmlSAXHandlerPtr, const char *)",
		"go":	"SAXParseEntity"
	}, {
		"mangle":	"xmlSAXParseFile",
		"c++":	"xmlSAXParseFile(xmlSAXHandlerPtr, const char *, int)",
		"go":	"SAXParseFile"
	}, {
		"mangle":	"xmlSAXParseFileWithData",
		"c++":	"xmlSAXParseFileWithData(xmlSAXHandlerPtr, const char *, int, void *)",
		"go":	"SAXParseFileWithData"
	}, {
		"mangle":	"xmlSAXParseMemory",
		"c++":	"xmlSAXParseMemory(xmlSAXHandlerPtr, const char *, int, int)",
		"go":	"SAXParseMemory"
	}, {
		"mangle":	"xmlSAXParseMemoryWithData",
		"c++":	"xmlSAXParseMemoryWithData(xmlSAXHandlerPtr, const char *, int, int, void *)",
		"go":	"SAXParseMemoryWithData"
	}, {
		"mangle":	"xmlSAXUserParseFile",
		"c++":	"xmlSAXUserParseFile(xmlSAXHandlerPtr, void *, const char *)",
		"go":	"SAXUserParseFile"
	}, {
		"mangle":	"xmlSAXUserParseMemory",
		"c++":	"xmlSAXUserParseMemory(xmlSAXHandlerPtr, void *, const char *, int)",
		"go":	"SAXUserParseMemory"
	}, {
		"mangle":	"xmlSAXVersion",
		"c++":	"xmlSAXVersion(xmlSAXHandler *, int)",
		"go":	"(*SAXHandler).SAXVersion"
	}, {
		"mangle":	"xmlSaveClose",
		"c++":	"xmlSaveClose(xmlSaveCtxtPtr)",
		"go":	"SaveClose"
	}, {
		"mangle":	"xmlSaveDoc",
		"c++":	"xmlSaveDoc(xmlSaveCtxtPtr, xmlDocPtr)",
		"go":	"SaveDoc"
	}, {
		"mangle":	"xmlSaveFile",
		"c++":	"xmlSaveFile(const char *, xmlDocPtr)",
		"go":	"SaveFile"
	}, {
		"mangle":	"xmlSaveFileEnc",
		"c++":	"xmlSaveFileEnc(const char *, xmlDocPtr, const char *)",
		"go":	"SaveFileEnc"
	}, {
		"mangle":	"xmlSaveFileTo",
		"c++":	"xmlSaveFileTo(xmlOutputBufferPtr, xmlDocPtr, const char *)",
		"go":	"SaveFileTo"
	}, {
		"mangle":	"xmlSaveFinish",
		"c++":	"xmlSaveFinish(xmlSaveCtxtPtr)",
		"go":	"SaveFinish"
	}, {
		"mangle":	"xmlSaveFlush",
		"c++":	"xmlSaveFlush(xmlSaveCtxtPtr)",
		"go":	"SaveFlush"
	}, {
		"mangle":	"xmlSaveFormatFile",
		"c++":	"xmlSaveFormatFile(const char *, xmlDocPtr, int)",
		"go":	"SaveFormatFile"
	}, {
		"mangle":	"xmlSaveFormatFileEnc",
		"c++":	"xmlSaveFormatFileEnc(const char *, xmlDocPtr, const char *, int)",
		"go":	"SaveFormatFileEnc"
	}, {
		"mangle":	"xmlSaveFormatFileTo",
		"c++":	"xmlSaveFormatFileTo(xmlOutputBufferPtr, xmlDocPtr, const char *, int)",
		"go":	"SaveFormatFileTo"
	}, {
		"mangle":	"xmlSaveSetAttrEscape",
		"c++":	"xmlSaveSetAttrEscape(xmlSaveCtxtPtr, xmlCharEncodingOutputFunc)",
		"go":	"SaveSetAttrEscape"
	}, {
		"mangle":	"xmlSaveSetEscape",
		"c++":	"xmlSaveSetEscape(xmlSaveCtxtPtr, xmlCharEncodingOutputFunc)",
		"go":	"SaveSetEscape"
	}, {
		"mangle":	"xmlSaveToBuffer",
		"c++":	"xmlSaveToBuffer(xmlBufferPtr, const char *, int)",
		"go":	"SaveToBuffer"
	}, {
		"mangle":	"xmlSaveToFd",
		"c++":	"xmlSaveToFd(int, const char *, int)",
		"go":	"SaveToFd"
	}, {
		"mangle":	"xmlSaveToFilename",
		"c++":	"xmlSaveToFilename(const char *, const char *, int)",
		"go":	"SaveToFilename"
	}, {
		"mangle":	"xmlSaveToIO",
		"c++":	"xmlSaveToIO(xmlOutputWriteCallback, xmlOutputCloseCallback, void *, const char *, int)",
		"go":	"SaveToIO"
	}, {
		"mangle":	"xmlSaveTree",
		"c++":	"xmlSaveTree(xmlSaveCtxtPtr, xmlNodePtr)",
		"go":	"SaveTree"
	}, {
		"mangle":	"xmlSaveUri",
		"c++":	"xmlSaveUri(xmlURIPtr)",
		"go":	"SaveUri"
	}, {
		"mangle":	"xmlScanName",
		"c++":	"xmlScanName(xmlParserCtxtPtr)",
		"go":	"ScanName"
	}, {
		"mangle":	"xmlSchemaCheckFacet",
		"c++":	"xmlSchemaCheckFacet(xmlSchemaFacetPtr, xmlSchemaTypePtr, xmlSchemaParserCtxtPtr, const xmlChar *)",
		"go":	"SchemaCheckFacet"
	}, {
		"mangle":	"xmlSchemaCleanupTypes",
		"c++":	"xmlSchemaCleanupTypes()",
		"go":	"SchemaCleanupTypes"
	}, {
		"mangle":	"xmlSchemaCollapseString",
		"c++":	"xmlSchemaCollapseString(const xmlChar *)",
		"go":	"(*Char).SchemaCollapseString"
	}, {
		"mangle":	"xmlSchemaCompareValues",
		"c++":	"xmlSchemaCompareValues(xmlSchemaValPtr, xmlSchemaValPtr)",
		"go":	"SchemaCompareValues"
	}, {
		"mangle":	"xmlSchemaCompareValuesWhtsp",
		"c++":	"xmlSchemaCompareValuesWhtsp(xmlSchemaValPtr, xmlSchemaWhitespaceValueType, xmlSchemaValPtr, xmlSchemaWhitespaceValueType)",
		"go":	"SchemaCompareValuesWhtsp"
	}, {
		"mangle":	"xmlSchemaCopyValue",
		"c++":	"xmlSchemaCopyValue(xmlSchemaValPtr)",
		"go":	"SchemaCopyValue"
	}, {
		"mangle":	"xmlSchemaDump",
		"c++":	"xmlSchemaDump(FILE *, xmlSchemaPtr)",
		"go":	"SchemaDump"
	}, {
		"mangle":	"xmlSchemaFree",
		"c++":	"xmlSchemaFree(xmlSchemaPtr)",
		"go":	"SchemaFree"
	}, {
		"mangle":	"xmlSchemaFreeFacet",
		"c++":	"xmlSchemaFreeFacet(xmlSchemaFacetPtr)",
		"go":	"SchemaFreeFacet"
	}, {
		"mangle":	"xmlSchemaFreeParserCtxt",
		"c++":	"xmlSchemaFreeParserCtxt(xmlSchemaParserCtxtPtr)",
		"go":	"SchemaFreeParserCtxt"
	}, {
		"mangle":	"xmlSchemaFreeType",
		"c++":	"xmlSchemaFreeType(xmlSchemaTypePtr)",
		"go":	"SchemaFreeType"
	}, {
		"mangle":	"xmlSchemaFreeValidCtxt",
		"c++":	"xmlSchemaFreeValidCtxt(xmlSchemaValidCtxtPtr)",
		"go":	"SchemaFreeValidCtxt"
	}, {
		"mangle":	"xmlSchemaFreeValue",
		"c++":	"xmlSchemaFreeValue(xmlSchemaValPtr)",
		"go":	"SchemaFreeValue"
	}, {
		"mangle":	"xmlSchemaFreeWildcard",
		"c++":	"xmlSchemaFreeWildcard(xmlSchemaWildcardPtr)",
		"go":	"SchemaFreeWildcard"
	}, {
		"mangle":	"xmlSchemaGetBuiltInListSimpleTypeItemType",
		"c++":	"xmlSchemaGetBuiltInListSimpleTypeItemType(xmlSchemaTypePtr)",
		"go":	"SchemaGetBuiltInListSimpleTypeItemType"
	}, {
		"mangle":	"xmlSchemaGetBuiltInType",
		"c++":	"xmlSchemaGetBuiltInType(xmlSchemaValType)",
		"go":	"SchemaValType.SchemaGetBuiltInType"
	}, {
		"mangle":	"xmlSchemaGetCanonValue",
		"c++":	"xmlSchemaGetCanonValue(xmlSchemaValPtr, const xmlChar **)",
		"go":	"SchemaGetCanonValue"
	}, {
		"mangle":	"xmlSchemaGetCanonValueWhtsp",
		"c++":	"xmlSchemaGetCanonValueWhtsp(xmlSchemaValPtr, const xmlChar **, xmlSchemaWhitespaceValueType)",
		"go":	"SchemaGetCanonValueWhtsp"
	}, {
		"mangle":	"xmlSchemaGetFacetValueAsULong",
		"c++":	"xmlSchemaGetFacetValueAsULong(xmlSchemaFacetPtr)",
		"go":	"SchemaGetFacetValueAsULong"
	}, {
		"mangle":	"xmlSchemaGetParserErrors",
		"c++":	"xmlSchemaGetParserErrors(xmlSchemaParserCtxtPtr, xmlSchemaValidityErrorFunc *, xmlSchemaValidityWarningFunc *, void **)",
		"go":	"SchemaGetParserErrors"
	}, {
		"mangle":	"xmlSchemaGetPredefinedType",
		"c++":	"xmlSchemaGetPredefinedType(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).SchemaGetPredefinedType"
	}, {
		"mangle":	"xmlSchemaGetValType",
		"c++":	"xmlSchemaGetValType(xmlSchemaValPtr)",
		"go":	"SchemaGetValType"
	}, {
		"mangle":	"xmlSchemaGetValidErrors",
		"c++":	"xmlSchemaGetValidErrors(xmlSchemaValidCtxtPtr, xmlSchemaValidityErrorFunc *, xmlSchemaValidityWarningFunc *, void **)",
		"go":	"SchemaGetValidErrors"
	}, {
		"mangle":	"xmlSchemaInitTypes",
		"c++":	"xmlSchemaInitTypes()",
		"go":	"SchemaInitTypes"
	}, {
		"mangle":	"xmlSchemaIsBuiltInTypeFacet",
		"c++":	"xmlSchemaIsBuiltInTypeFacet(xmlSchemaTypePtr, int)",
		"go":	"SchemaIsBuiltInTypeFacet"
	}, {
		"mangle":	"xmlSchemaIsValid",
		"c++":	"xmlSchemaIsValid(xmlSchemaValidCtxtPtr)",
		"go":	"SchemaIsValid"
	}, {
		"mangle":	"xmlSchemaNewDocParserCtxt",
		"c++":	"xmlSchemaNewDocParserCtxt(xmlDocPtr)",
		"go":	"SchemaNewDocParserCtxt"
	}, {
		"mangle":	"xmlSchemaNewFacet",
		"c++":	"xmlSchemaNewFacet()",
		"go":	"SchemaNewFacet"
	}, {
		"mangle":	"xmlSchemaNewMemParserCtxt",
		"c++":	"xmlSchemaNewMemParserCtxt(const char *, int)",
		"go":	"SchemaNewMemParserCtxt"
	}, {
		"mangle":	"xmlSchemaNewNOTATIONValue",
		"c++":	"xmlSchemaNewNOTATIONValue(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).SchemaNewNOTATIONValue"
	}, {
		"mangle":	"xmlSchemaNewParserCtxt",
		"c++":	"xmlSchemaNewParserCtxt(const char *)",
		"go":	"SchemaNewParserCtxt"
	}, {
		"mangle":	"xmlSchemaNewQNameValue",
		"c++":	"xmlSchemaNewQNameValue(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).SchemaNewQNameValue"
	}, {
		"mangle":	"xmlSchemaNewStringValue",
		"c++":	"xmlSchemaNewStringValue(xmlSchemaValType, const xmlChar *)",
		"go":	"SchemaValType.SchemaNewStringValue"
	}, {
		"mangle":	"xmlSchemaNewValidCtxt",
		"c++":	"xmlSchemaNewValidCtxt(xmlSchemaPtr)",
		"go":	"SchemaNewValidCtxt"
	}, {
		"mangle":	"xmlSchemaParse",
		"c++":	"xmlSchemaParse(xmlSchemaParserCtxtPtr)",
		"go":	"SchemaParse"
	}, {
		"mangle":	"xmlSchemaSAXPlug",
		"c++":	"xmlSchemaSAXPlug(xmlSchemaValidCtxtPtr, xmlSAXHandlerPtr *, void **)",
		"go":	"SchemaSAXPlug"
	}, {
		"mangle":	"xmlSchemaSAXUnplug",
		"c++":	"xmlSchemaSAXUnplug(xmlSchemaSAXPlugPtr)",
		"go":	"SchemaSAXUnplug"
	}, {
		"mangle":	"xmlSchemaSetParserErrors",
		"c++":	"xmlSchemaSetParserErrors(xmlSchemaParserCtxtPtr, xmlSchemaValidityErrorFunc, xmlSchemaValidityWarningFunc, void *)",
		"go":	"SchemaSetParserErrors"
	}, {
		"mangle":	"xmlSchemaSetParserStructuredErrors",
		"c++":	"xmlSchemaSetParserStructuredErrors(xmlSchemaParserCtxtPtr, xmlStructuredErrorFunc, void *)",
		"go":	"SchemaSetParserStructuredErrors"
	}, {
		"mangle":	"xmlSchemaSetValidErrors",
		"c++":	"xmlSchemaSetValidErrors(xmlSchemaValidCtxtPtr, xmlSchemaValidityErrorFunc, xmlSchemaValidityWarningFunc, void *)",
		"go":	"SchemaSetValidErrors"
	}, {
		"mangle":	"xmlSchemaSetValidOptions",
		"c++":	"xmlSchemaSetValidOptions(xmlSchemaValidCtxtPtr, int)",
		"go":	"SchemaSetValidOptions"
	}, {
		"mangle":	"xmlSchemaSetValidStructuredErrors",
		"c++":	"xmlSchemaSetValidStructuredErrors(xmlSchemaValidCtxtPtr, xmlStructuredErrorFunc, void *)",
		"go":	"SchemaSetValidStructuredErrors"
	}, {
		"mangle":	"xmlSchemaValPredefTypeNode",
		"c++":	"xmlSchemaValPredefTypeNode(xmlSchemaTypePtr, const xmlChar *, xmlSchemaValPtr *, xmlNodePtr)",
		"go":	"SchemaValPredefTypeNode"
	}, {
		"mangle":	"xmlSchemaValPredefTypeNodeNoNorm",
		"c++":	"xmlSchemaValPredefTypeNodeNoNorm(xmlSchemaTypePtr, const xmlChar *, xmlSchemaValPtr *, xmlNodePtr)",
		"go":	"SchemaValPredefTypeNodeNoNorm"
	}, {
		"mangle":	"xmlSchemaValidCtxtGetOptions",
		"c++":	"xmlSchemaValidCtxtGetOptions(xmlSchemaValidCtxtPtr)",
		"go":	"SchemaValidCtxtGetOptions"
	}, {
		"mangle":	"xmlSchemaValidCtxtGetParserCtxt",
		"c++":	"xmlSchemaValidCtxtGetParserCtxt(xmlSchemaValidCtxtPtr)",
		"go":	"SchemaValidCtxtGetParserCtxt"
	}, {
		"mangle":	"xmlSchemaValidateDoc",
		"c++":	"xmlSchemaValidateDoc(xmlSchemaValidCtxtPtr, xmlDocPtr)",
		"go":	"SchemaValidateDoc"
	}, {
		"mangle":	"xmlSchemaValidateFacet",
		"c++":	"xmlSchemaValidateFacet(xmlSchemaTypePtr, xmlSchemaFacetPtr, const xmlChar *, xmlSchemaValPtr)",
		"go":	"SchemaValidateFacet"
	}, {
		"mangle":	"xmlSchemaValidateFacetWhtsp",
		"c++":	"xmlSchemaValidateFacetWhtsp(xmlSchemaFacetPtr, xmlSchemaWhitespaceValueType, xmlSchemaValType, const xmlChar *, xmlSchemaValPtr, xmlSchemaWhitespaceValueType)",
		"go":	"SchemaValidateFacetWhtsp"
	}, {
		"mangle":	"xmlSchemaValidateFile",
		"c++":	"xmlSchemaValidateFile(xmlSchemaValidCtxtPtr, const char *, int)",
		"go":	"SchemaValidateFile"
	}, {
		"mangle":	"xmlSchemaValidateLengthFacet",
		"c++":	"xmlSchemaValidateLengthFacet(xmlSchemaTypePtr, xmlSchemaFacetPtr, const xmlChar *, xmlSchemaValPtr, unsigned long *)",
		"go":	"SchemaValidateLengthFacet"
	}, {
		"mangle":	"xmlSchemaValidateLengthFacetWhtsp",
		"c++":	"xmlSchemaValidateLengthFacetWhtsp(xmlSchemaFacetPtr, xmlSchemaValType, const xmlChar *, xmlSchemaValPtr, unsigned long *, xmlSchemaWhitespaceValueType)",
		"go":	"SchemaValidateLengthFacetWhtsp"
	}, {
		"mangle":	"xmlSchemaValidateListSimpleTypeFacet",
		"c++":	"xmlSchemaValidateListSimpleTypeFacet(xmlSchemaFacetPtr, const xmlChar *, unsigned long, unsigned long *)",
		"go":	"SchemaValidateListSimpleTypeFacet"
	}, {
		"mangle":	"xmlSchemaValidateOneElement",
		"c++":	"xmlSchemaValidateOneElement(xmlSchemaValidCtxtPtr, xmlNodePtr)",
		"go":	"SchemaValidateOneElement"
	}, {
		"mangle":	"xmlSchemaValidatePredefinedType",
		"c++":	"xmlSchemaValidatePredefinedType(xmlSchemaTypePtr, const xmlChar *, xmlSchemaValPtr *)",
		"go":	"SchemaValidatePredefinedType"
	}, {
		"mangle":	"xmlSchemaValidateSetFilename",
		"c++":	"xmlSchemaValidateSetFilename(xmlSchemaValidCtxtPtr, const char *)",
		"go":	"SchemaValidateSetFilename"
	}, {
		"mangle":	"xmlSchemaValidateSetLocator",
		"c++":	"xmlSchemaValidateSetLocator(xmlSchemaValidCtxtPtr, xmlSchemaValidityLocatorFunc, void *)",
		"go":	"SchemaValidateSetLocator"
	}, {
		"mangle":	"xmlSchemaValidateStream",
		"c++":	"xmlSchemaValidateStream(xmlSchemaValidCtxtPtr, xmlParserInputBufferPtr, xmlCharEncoding, xmlSAXHandlerPtr, void *)",
		"go":	"SchemaValidateStream"
	}, {
		"mangle":	"xmlSchemaValueAppend",
		"c++":	"xmlSchemaValueAppend(xmlSchemaValPtr, xmlSchemaValPtr)",
		"go":	"SchemaValueAppend"
	}, {
		"mangle":	"xmlSchemaValueGetAsBoolean",
		"c++":	"xmlSchemaValueGetAsBoolean(xmlSchemaValPtr)",
		"go":	"SchemaValueGetAsBoolean"
	}, {
		"mangle":	"xmlSchemaValueGetAsString",
		"c++":	"xmlSchemaValueGetAsString(xmlSchemaValPtr)",
		"go":	"SchemaValueGetAsString"
	}, {
		"mangle":	"xmlSchemaValueGetNext",
		"c++":	"xmlSchemaValueGetNext(xmlSchemaValPtr)",
		"go":	"SchemaValueGetNext"
	}, {
		"mangle":	"xmlSchemaWhiteSpaceReplace",
		"c++":	"xmlSchemaWhiteSpaceReplace(const xmlChar *)",
		"go":	"(*Char).SchemaWhiteSpaceReplace"
	}, {
		"mangle":	"xmlSchematronFree",
		"c++":	"xmlSchematronFree(xmlSchematronPtr)",
		"go":	"SchematronFree"
	}, {
		"mangle":	"xmlSchematronFreeParserCtxt",
		"c++":	"xmlSchematronFreeParserCtxt(xmlSchematronParserCtxtPtr)",
		"go":	"SchematronFreeParserCtxt"
	}, {
		"mangle":	"xmlSchematronFreeValidCtxt",
		"c++":	"xmlSchematronFreeValidCtxt(xmlSchematronValidCtxtPtr)",
		"go":	"SchematronFreeValidCtxt"
	}, {
		"mangle":	"xmlSchematronNewDocParserCtxt",
		"c++":	"xmlSchematronNewDocParserCtxt(xmlDocPtr)",
		"go":	"SchematronNewDocParserCtxt"
	}, {
		"mangle":	"xmlSchematronNewMemParserCtxt",
		"c++":	"xmlSchematronNewMemParserCtxt(const char *, int)",
		"go":	"SchematronNewMemParserCtxt"
	}, {
		"mangle":	"xmlSchematronNewParserCtxt",
		"c++":	"xmlSchematronNewParserCtxt(const char *)",
		"go":	"SchematronNewParserCtxt"
	}, {
		"mangle":	"xmlSchematronNewValidCtxt",
		"c++":	"xmlSchematronNewValidCtxt(xmlSchematronPtr, int)",
		"go":	"SchematronNewValidCtxt"
	}, {
		"mangle":	"xmlSchematronParse",
		"c++":	"xmlSchematronParse(xmlSchematronParserCtxtPtr)",
		"go":	"SchematronParse"
	}, {
		"mangle":	"xmlSchematronSetValidStructuredErrors",
		"c++":	"xmlSchematronSetValidStructuredErrors(xmlSchematronValidCtxtPtr, xmlStructuredErrorFunc, void *)",
		"go":	"SchematronSetValidStructuredErrors"
	}, {
		"mangle":	"xmlSchematronValidateDoc",
		"c++":	"xmlSchematronValidateDoc(xmlSchematronValidCtxtPtr, xmlDocPtr)",
		"go":	"SchematronValidateDoc"
	}, {
		"mangle":	"xmlSearchNs",
		"c++":	"xmlSearchNs(xmlDocPtr, xmlNodePtr, const xmlChar *)",
		"go":	"SearchNs"
	}, {
		"mangle":	"xmlSearchNsByHref",
		"c++":	"xmlSearchNsByHref(xmlDocPtr, xmlNodePtr, const xmlChar *)",
		"go":	"SearchNsByHref"
	}, {
		"mangle":	"xmlSetBufferAllocationScheme",
		"c++":	"xmlSetBufferAllocationScheme(xmlBufferAllocationScheme)",
		"go":	"BufferAllocationScheme.SetBufferAllocationScheme"
	}, {
		"mangle":	"xmlSetCompressMode",
		"c++":	"xmlSetCompressMode(int)",
		"go":	"SetCompressMode"
	}, {
		"mangle":	"xmlSetDocCompressMode",
		"c++":	"xmlSetDocCompressMode(xmlDocPtr, int)",
		"go":	"SetDocCompressMode"
	}, {
		"mangle":	"xmlSetEntityReferenceFunc",
		"c++":	"xmlSetEntityReferenceFunc(xmlEntityReferenceFunc)",
		"go":	"SetEntityReferenceFunc"
	}, {
		"mangle":	"xmlSetExternalEntityLoader",
		"c++":	"xmlSetExternalEntityLoader(xmlExternalEntityLoader)",
		"go":	"SetExternalEntityLoader"
	}, {
		"mangle":	"xmlSetFeature",
		"c++":	"xmlSetFeature(xmlParserCtxtPtr, const char *, void *)",
		"go":	"SetFeature"
	}, {
		"mangle":	"xmlSetGenericErrorFunc",
		"c++":	"xmlSetGenericErrorFunc(void *, xmlGenericErrorFunc)",
		"go":	"SetGenericErrorFunc"
	}, {
		"mangle":	"xmlSetListDoc",
		"c++":	"xmlSetListDoc(xmlNodePtr, xmlDocPtr)",
		"go":	"SetListDoc"
	}, {
		"mangle":	"xmlSetNs",
		"c++":	"xmlSetNs(xmlNodePtr, xmlNsPtr)",
		"go":	"SetNs"
	}, {
		"mangle":	"xmlSetNsProp",
		"c++":	"xmlSetNsProp(xmlNodePtr, xmlNsPtr, const xmlChar *, const xmlChar *)",
		"go":	"SetNsProp"
	}, {
		"mangle":	"xmlSetProp",
		"c++":	"xmlSetProp(xmlNodePtr, const xmlChar *, const xmlChar *)",
		"go":	"SetProp"
	}, {
		"mangle":	"xmlSetStructuredErrorFunc",
		"c++":	"xmlSetStructuredErrorFunc(void *, xmlStructuredErrorFunc)",
		"go":	"SetStructuredErrorFunc"
	}, {
		"mangle":	"xmlSetTreeDoc",
		"c++":	"xmlSetTreeDoc(xmlNodePtr, xmlDocPtr)",
		"go":	"SetTreeDoc"
	}, {
		"mangle":	"xmlSetupParserForBuffer",
		"c++":	"xmlSetupParserForBuffer(xmlParserCtxtPtr, const xmlChar *, const char *)",
		"go":	"SetupParserForBuffer"
	}, {
		"mangle":	"xmlShell",
		"c++":	"xmlShell(xmlDocPtr, const char *, xmlShellReadlineFunc, FILE *)",
		"go":	"Shell"
	}, {
		"mangle":	"xmlShellBase",
		"c++":	"xmlShellBase(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"ShellBase"
	}, {
		"mangle":	"xmlShellCat",
		"c++":	"xmlShellCat(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"ShellCat"
	}, {
		"mangle":	"xmlShellDir",
		"c++":	"xmlShellDir(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"ShellDir"
	}, {
		"mangle":	"xmlShellDu",
		"c++":	"xmlShellDu(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"ShellDu"
	}, {
		"mangle":	"xmlShellList",
		"c++":	"xmlShellList(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"ShellList"
	}, {
		"mangle":	"xmlShellLoad",
		"c++":	"xmlShellLoad(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"ShellLoad"
	}, {
		"mangle":	"xmlShellPrintNode",
		"c++":	"xmlShellPrintNode(xmlNodePtr)",
		"go":	"ShellPrintNode"
	}, {
		"mangle":	"xmlShellPrintXPathError",
		"c++":	"xmlShellPrintXPathError(int, const char *)",
		"go":	"ShellPrintXPathError"
	}, {
		"mangle":	"xmlShellPrintXPathResult",
		"c++":	"xmlShellPrintXPathResult(xmlXPathObjectPtr)",
		"go":	"ShellPrintXPathResult"
	}, {
		"mangle":	"xmlShellPwd",
		"c++":	"xmlShellPwd(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"ShellPwd"
	}, {
		"mangle":	"xmlShellSave",
		"c++":	"xmlShellSave(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"ShellSave"
	}, {
		"mangle":	"xmlShellValidate",
		"c++":	"xmlShellValidate(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"ShellValidate"
	}, {
		"mangle":	"xmlShellWrite",
		"c++":	"xmlShellWrite(xmlShellCtxtPtr, char *, xmlNodePtr, xmlNodePtr)",
		"go":	"ShellWrite"
	}, {
		"mangle":	"xmlSkipBlankChars",
		"c++":	"xmlSkipBlankChars(xmlParserCtxtPtr)",
		"go":	"SkipBlankChars"
	}, {
		"mangle":	"xmlSnprintfElementContent",
		"c++":	"xmlSnprintfElementContent(char *, int, xmlElementContentPtr, int)",
		"go":	"SnprintfElementContent"
	}, {
		"mangle":	"xmlSplitQName",
		"c++":	"xmlSplitQName(xmlParserCtxtPtr, const xmlChar *, xmlChar **)",
		"go":	"SplitQName"
	}, {
		"mangle":	"xmlSplitQName2",
		"c++":	"xmlSplitQName2(const xmlChar *, xmlChar **)",
		"go":	"(*Char).SplitQName2"
	}, {
		"mangle":	"xmlSplitQName3",
		"c++":	"xmlSplitQName3(const xmlChar *, int *)",
		"go":	"(*Char).SplitQName3"
	}, {
		"mangle":	"xmlSprintfElementContent",
		"c++":	"xmlSprintfElementContent(char *, xmlElementContentPtr, int)",
		"go":	"SprintfElementContent"
	}, {
		"mangle":	"xmlStopParser",
		"c++":	"xmlStopParser(xmlParserCtxtPtr)",
		"go":	"StopParser"
	}, {
		"mangle":	"xmlStrEqual",
		"c++":	"xmlStrEqual(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).StrEqual"
	}, {
		"mangle":	"xmlStrPrintf",
		"c++":	"xmlStrPrintf(xmlChar *, int, const char *, ...)",
		"go":	"(*Char).StrPrintf"
	}, {
		"mangle":	"xmlStrQEqual",
		"c++":	"xmlStrQEqual(const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"(*Char).StrQEqual"
	}, {
		"mangle":	"xmlStrVPrintf",
		"c++":	"xmlStrVPrintf(xmlChar *, int, const char *, va_list)",
		"go":	"(*Char).StrVPrintf"
	}, {
		"mangle":	"xmlStrcasecmp",
		"c++":	"xmlStrcasecmp(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).Strcasecmp"
	}, {
		"mangle":	"xmlStrcasestr",
		"c++":	"xmlStrcasestr(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).Strcasestr"
	}, {
		"mangle":	"xmlStrcat",
		"c++":	"xmlStrcat(xmlChar *, const xmlChar *)",
		"go":	"(*Char).Strcat"
	}, {
		"mangle":	"xmlStrchr",
		"c++":	"xmlStrchr(const xmlChar *, xmlChar)",
		"go":	"(*Char).Strchr"
	}, {
		"mangle":	"xmlStrcmp",
		"c++":	"xmlStrcmp(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).Strcmp"
	}, {
		"mangle":	"xmlStrdup",
		"c++":	"xmlStrdup(const xmlChar *)",
		"go":	"(*Char).Strdup"
	}, {
		"mangle":	"xmlStreamPop",
		"c++":	"xmlStreamPop(xmlStreamCtxtPtr)",
		"go":	"StreamPop"
	}, {
		"mangle":	"xmlStreamPush",
		"c++":	"xmlStreamPush(xmlStreamCtxtPtr, const xmlChar *, const xmlChar *)",
		"go":	"StreamPush"
	}, {
		"mangle":	"xmlStreamPushAttr",
		"c++":	"xmlStreamPushAttr(xmlStreamCtxtPtr, const xmlChar *, const xmlChar *)",
		"go":	"StreamPushAttr"
	}, {
		"mangle":	"xmlStreamPushNode",
		"c++":	"xmlStreamPushNode(xmlStreamCtxtPtr, const xmlChar *, const xmlChar *, int)",
		"go":	"StreamPushNode"
	}, {
		"mangle":	"xmlStreamWantsAnyNode",
		"c++":	"xmlStreamWantsAnyNode(xmlStreamCtxtPtr)",
		"go":	"StreamWantsAnyNode"
	}, {
		"mangle":	"xmlStringCurrentChar",
		"c++":	"xmlStringCurrentChar(xmlParserCtxtPtr, const xmlChar *, int *)",
		"go":	"StringCurrentChar"
	}, {
		"mangle":	"xmlStringDecodeEntities",
		"c++":	"xmlStringDecodeEntities(xmlParserCtxtPtr, const xmlChar *, int, xmlChar, xmlChar, xmlChar)",
		"go":	"StringDecodeEntities"
	}, {
		"mangle":	"xmlStringGetNodeList",
		"c++":	"xmlStringGetNodeList(const xmlDoc *, const xmlChar *)",
		"go":	"(*Doc).StringGetNodeList"
	}, {
		"mangle":	"xmlStringLenDecodeEntities",
		"c++":	"xmlStringLenDecodeEntities(xmlParserCtxtPtr, const xmlChar *, int, int, xmlChar, xmlChar, xmlChar)",
		"go":	"StringLenDecodeEntities"
	}, {
		"mangle":	"xmlStringLenGetNodeList",
		"c++":	"xmlStringLenGetNodeList(const xmlDoc *, const xmlChar *, int)",
		"go":	"(*Doc).StringLenGetNodeList"
	}, {
		"mangle":	"xmlStrlen",
		"c++":	"xmlStrlen(const xmlChar *)",
		"go":	"(*Char).Strlen"
	}, {
		"mangle":	"xmlStrncasecmp",
		"c++":	"xmlStrncasecmp(const xmlChar *, const xmlChar *, int)",
		"go":	"(*Char).Strncasecmp"
	}, {
		"mangle":	"xmlStrncat",
		"c++":	"xmlStrncat(xmlChar *, const xmlChar *, int)",
		"go":	"(*Char).Strncat"
	}, {
		"mangle":	"xmlStrncatNew",
		"c++":	"xmlStrncatNew(const xmlChar *, const xmlChar *, int)",
		"go":	"(*Char).StrncatNew"
	}, {
		"mangle":	"xmlStrncmp",
		"c++":	"xmlStrncmp(const xmlChar *, const xmlChar *, int)",
		"go":	"(*Char).Strncmp"
	}, {
		"mangle":	"xmlStrndup",
		"c++":	"xmlStrndup(const xmlChar *, int)",
		"go":	"(*Char).Strndup"
	}, {
		"mangle":	"xmlStrstr",
		"c++":	"xmlStrstr(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).Strstr"
	}, {
		"mangle":	"xmlStrsub",
		"c++":	"xmlStrsub(const xmlChar *, int, int)",
		"go":	"(*Char).Strsub"
	}, {
		"mangle":	"xmlSubstituteEntitiesDefault",
		"c++":	"xmlSubstituteEntitiesDefault(int)",
		"go":	"SubstituteEntitiesDefault"
	}, {
		"mangle":	"xmlSwitchEncoding",
		"c++":	"xmlSwitchEncoding(xmlParserCtxtPtr, xmlCharEncoding)",
		"go":	"SwitchEncoding"
	}, {
		"mangle":	"xmlSwitchEncodingName",
		"c++":	"xmlSwitchEncodingName(xmlParserCtxtPtr, const char *)",
		"go":	"SwitchEncodingName"
	}, {
		"mangle":	"xmlSwitchInputEncoding",
		"c++":	"xmlSwitchInputEncoding(xmlParserCtxtPtr, xmlParserInputPtr, xmlCharEncodingHandlerPtr)",
		"go":	"SwitchInputEncoding"
	}, {
		"mangle":	"xmlSwitchToEncoding",
		"c++":	"xmlSwitchToEncoding(xmlParserCtxtPtr, xmlCharEncodingHandlerPtr)",
		"go":	"SwitchToEncoding"
	}, {
		"mangle":	"xmlTextConcat",
		"c++":	"xmlTextConcat(xmlNodePtr, const xmlChar *, int)",
		"go":	"TextConcat"
	}, {
		"mangle":	"xmlTextMerge",
		"c++":	"xmlTextMerge(xmlNodePtr, xmlNodePtr)",
		"go":	"TextMerge"
	}, {
		"mangle":	"xmlTextReaderAttributeCount",
		"c++":	"xmlTextReaderAttributeCount(xmlTextReaderPtr)",
		"go":	"TextReaderAttributeCount"
	}, {
		"mangle":	"xmlTextReaderBaseUri",
		"c++":	"xmlTextReaderBaseUri(xmlTextReaderPtr)",
		"go":	"TextReaderBaseUri"
	}, {
		"mangle":	"xmlTextReaderByteConsumed",
		"c++":	"xmlTextReaderByteConsumed(xmlTextReaderPtr)",
		"go":	"TextReaderByteConsumed"
	}, {
		"mangle":	"xmlTextReaderClose",
		"c++":	"xmlTextReaderClose(xmlTextReaderPtr)",
		"go":	"TextReaderClose"
	}, {
		"mangle":	"xmlTextReaderConstBaseUri",
		"c++":	"xmlTextReaderConstBaseUri(xmlTextReaderPtr)",
		"go":	"TextReaderConstBaseUri"
	}, {
		"mangle":	"xmlTextReaderConstEncoding",
		"c++":	"xmlTextReaderConstEncoding(xmlTextReaderPtr)",
		"go":	"TextReaderConstEncoding"
	}, {
		"mangle":	"xmlTextReaderConstLocalName",
		"c++":	"xmlTextReaderConstLocalName(xmlTextReaderPtr)",
		"go":	"TextReaderConstLocalName"
	}, {
		"mangle":	"xmlTextReaderConstName",
		"c++":	"xmlTextReaderConstName(xmlTextReaderPtr)",
		"go":	"TextReaderConstName"
	}, {
		"mangle":	"xmlTextReaderConstNamespaceUri",
		"c++":	"xmlTextReaderConstNamespaceUri(xmlTextReaderPtr)",
		"go":	"TextReaderConstNamespaceUri"
	}, {
		"mangle":	"xmlTextReaderConstPrefix",
		"c++":	"xmlTextReaderConstPrefix(xmlTextReaderPtr)",
		"go":	"TextReaderConstPrefix"
	}, {
		"mangle":	"xmlTextReaderConstString",
		"c++":	"xmlTextReaderConstString(xmlTextReaderPtr, const xmlChar *)",
		"go":	"TextReaderConstString"
	}, {
		"mangle":	"xmlTextReaderConstValue",
		"c++":	"xmlTextReaderConstValue(xmlTextReaderPtr)",
		"go":	"TextReaderConstValue"
	}, {
		"mangle":	"xmlTextReaderConstXmlLang",
		"c++":	"xmlTextReaderConstXmlLang(xmlTextReaderPtr)",
		"go":	"TextReaderConstXmlLang"
	}, {
		"mangle":	"xmlTextReaderConstXmlVersion",
		"c++":	"xmlTextReaderConstXmlVersion(xmlTextReaderPtr)",
		"go":	"TextReaderConstXmlVersion"
	}, {
		"mangle":	"xmlTextReaderCurrentDoc",
		"c++":	"xmlTextReaderCurrentDoc(xmlTextReaderPtr)",
		"go":	"TextReaderCurrentDoc"
	}, {
		"mangle":	"xmlTextReaderCurrentNode",
		"c++":	"xmlTextReaderCurrentNode(xmlTextReaderPtr)",
		"go":	"TextReaderCurrentNode"
	}, {
		"mangle":	"xmlTextReaderDepth",
		"c++":	"xmlTextReaderDepth(xmlTextReaderPtr)",
		"go":	"TextReaderDepth"
	}, {
		"mangle":	"xmlTextReaderExpand",
		"c++":	"xmlTextReaderExpand(xmlTextReaderPtr)",
		"go":	"TextReaderExpand"
	}, {
		"mangle":	"xmlTextReaderGetAttribute",
		"c++":	"xmlTextReaderGetAttribute(xmlTextReaderPtr, const xmlChar *)",
		"go":	"TextReaderGetAttribute"
	}, {
		"mangle":	"xmlTextReaderGetAttributeNo",
		"c++":	"xmlTextReaderGetAttributeNo(xmlTextReaderPtr, int)",
		"go":	"TextReaderGetAttributeNo"
	}, {
		"mangle":	"xmlTextReaderGetAttributeNs",
		"c++":	"xmlTextReaderGetAttributeNs(xmlTextReaderPtr, const xmlChar *, const xmlChar *)",
		"go":	"TextReaderGetAttributeNs"
	}, {
		"mangle":	"xmlTextReaderGetErrorHandler",
		"c++":	"xmlTextReaderGetErrorHandler(xmlTextReaderPtr, xmlTextReaderErrorFunc *, void **)",
		"go":	"TextReaderGetErrorHandler"
	}, {
		"mangle":	"xmlTextReaderGetLastError",
		"c++":	"xmlTextReaderGetLastError(xmlTextReaderPtr)",
		"go":	"TextReaderGetLastError"
	}, {
		"mangle":	"xmlTextReaderGetParserColumnNumber",
		"c++":	"xmlTextReaderGetParserColumnNumber(xmlTextReaderPtr)",
		"go":	"TextReaderGetParserColumnNumber"
	}, {
		"mangle":	"xmlTextReaderGetParserLineNumber",
		"c++":	"xmlTextReaderGetParserLineNumber(xmlTextReaderPtr)",
		"go":	"TextReaderGetParserLineNumber"
	}, {
		"mangle":	"xmlTextReaderGetParserProp",
		"c++":	"xmlTextReaderGetParserProp(xmlTextReaderPtr, int)",
		"go":	"TextReaderGetParserProp"
	}, {
		"mangle":	"xmlTextReaderGetRemainder",
		"c++":	"xmlTextReaderGetRemainder(xmlTextReaderPtr)",
		"go":	"TextReaderGetRemainder"
	}, {
		"mangle":	"xmlTextReaderHasAttributes",
		"c++":	"xmlTextReaderHasAttributes(xmlTextReaderPtr)",
		"go":	"TextReaderHasAttributes"
	}, {
		"mangle":	"xmlTextReaderHasValue",
		"c++":	"xmlTextReaderHasValue(xmlTextReaderPtr)",
		"go":	"TextReaderHasValue"
	}, {
		"mangle":	"xmlTextReaderIsDefault",
		"c++":	"xmlTextReaderIsDefault(xmlTextReaderPtr)",
		"go":	"TextReaderIsDefault"
	}, {
		"mangle":	"xmlTextReaderIsEmptyElement",
		"c++":	"xmlTextReaderIsEmptyElement(xmlTextReaderPtr)",
		"go":	"TextReaderIsEmptyElement"
	}, {
		"mangle":	"xmlTextReaderIsNamespaceDecl",
		"c++":	"xmlTextReaderIsNamespaceDecl(xmlTextReaderPtr)",
		"go":	"TextReaderIsNamespaceDecl"
	}, {
		"mangle":	"xmlTextReaderIsValid",
		"c++":	"xmlTextReaderIsValid(xmlTextReaderPtr)",
		"go":	"TextReaderIsValid"
	}, {
		"mangle":	"xmlTextReaderLocalName",
		"c++":	"xmlTextReaderLocalName(xmlTextReaderPtr)",
		"go":	"TextReaderLocalName"
	}, {
		"mangle":	"xmlTextReaderLocatorBaseURI",
		"c++":	"xmlTextReaderLocatorBaseURI(xmlTextReaderLocatorPtr)",
		"go":	"TextReaderLocatorBaseURI"
	}, {
		"mangle":	"xmlTextReaderLocatorLineNumber",
		"c++":	"xmlTextReaderLocatorLineNumber(xmlTextReaderLocatorPtr)",
		"go":	"TextReaderLocatorLineNumber"
	}, {
		"mangle":	"xmlTextReaderLookupNamespace",
		"c++":	"xmlTextReaderLookupNamespace(xmlTextReaderPtr, const xmlChar *)",
		"go":	"TextReaderLookupNamespace"
	}, {
		"mangle":	"xmlTextReaderMoveToAttribute",
		"c++":	"xmlTextReaderMoveToAttribute(xmlTextReaderPtr, const xmlChar *)",
		"go":	"TextReaderMoveToAttribute"
	}, {
		"mangle":	"xmlTextReaderMoveToAttributeNo",
		"c++":	"xmlTextReaderMoveToAttributeNo(xmlTextReaderPtr, int)",
		"go":	"TextReaderMoveToAttributeNo"
	}, {
		"mangle":	"xmlTextReaderMoveToAttributeNs",
		"c++":	"xmlTextReaderMoveToAttributeNs(xmlTextReaderPtr, const xmlChar *, const xmlChar *)",
		"go":	"TextReaderMoveToAttributeNs"
	}, {
		"mangle":	"xmlTextReaderMoveToElement",
		"c++":	"xmlTextReaderMoveToElement(xmlTextReaderPtr)",
		"go":	"TextReaderMoveToElement"
	}, {
		"mangle":	"xmlTextReaderMoveToFirstAttribute",
		"c++":	"xmlTextReaderMoveToFirstAttribute(xmlTextReaderPtr)",
		"go":	"TextReaderMoveToFirstAttribute"
	}, {
		"mangle":	"xmlTextReaderMoveToNextAttribute",
		"c++":	"xmlTextReaderMoveToNextAttribute(xmlTextReaderPtr)",
		"go":	"TextReaderMoveToNextAttribute"
	}, {
		"mangle":	"xmlTextReaderName",
		"c++":	"xmlTextReaderName(xmlTextReaderPtr)",
		"go":	"TextReaderName"
	}, {
		"mangle":	"xmlTextReaderNamespaceUri",
		"c++":	"xmlTextReaderNamespaceUri(xmlTextReaderPtr)",
		"go":	"TextReaderNamespaceUri"
	}, {
		"mangle":	"xmlTextReaderNext",
		"c++":	"xmlTextReaderNext(xmlTextReaderPtr)",
		"go":	"TextReaderNext"
	}, {
		"mangle":	"xmlTextReaderNextSibling",
		"c++":	"xmlTextReaderNextSibling(xmlTextReaderPtr)",
		"go":	"TextReaderNextSibling"
	}, {
		"mangle":	"xmlTextReaderNodeType",
		"c++":	"xmlTextReaderNodeType(xmlTextReaderPtr)",
		"go":	"TextReaderNodeType"
	}, {
		"mangle":	"xmlTextReaderNormalization",
		"c++":	"xmlTextReaderNormalization(xmlTextReaderPtr)",
		"go":	"TextReaderNormalization"
	}, {
		"mangle":	"xmlTextReaderPrefix",
		"c++":	"xmlTextReaderPrefix(xmlTextReaderPtr)",
		"go":	"TextReaderPrefix"
	}, {
		"mangle":	"xmlTextReaderPreserve",
		"c++":	"xmlTextReaderPreserve(xmlTextReaderPtr)",
		"go":	"TextReaderPreserve"
	}, {
		"mangle":	"xmlTextReaderPreservePattern",
		"c++":	"xmlTextReaderPreservePattern(xmlTextReaderPtr, const xmlChar *, const xmlChar **)",
		"go":	"TextReaderPreservePattern"
	}, {
		"mangle":	"xmlTextReaderQuoteChar",
		"c++":	"xmlTextReaderQuoteChar(xmlTextReaderPtr)",
		"go":	"TextReaderQuoteChar"
	}, {
		"mangle":	"xmlTextReaderRead",
		"c++":	"xmlTextReaderRead(xmlTextReaderPtr)",
		"go":	"TextReaderRead"
	}, {
		"mangle":	"xmlTextReaderReadAttributeValue",
		"c++":	"xmlTextReaderReadAttributeValue(xmlTextReaderPtr)",
		"go":	"TextReaderReadAttributeValue"
	}, {
		"mangle":	"xmlTextReaderReadInnerXml",
		"c++":	"xmlTextReaderReadInnerXml(xmlTextReaderPtr)",
		"go":	"TextReaderReadInnerXml"
	}, {
		"mangle":	"xmlTextReaderReadOuterXml",
		"c++":	"xmlTextReaderReadOuterXml(xmlTextReaderPtr)",
		"go":	"TextReaderReadOuterXml"
	}, {
		"mangle":	"xmlTextReaderReadState",
		"c++":	"xmlTextReaderReadState(xmlTextReaderPtr)",
		"go":	"TextReaderReadState"
	}, {
		"mangle":	"xmlTextReaderReadString",
		"c++":	"xmlTextReaderReadString(xmlTextReaderPtr)",
		"go":	"TextReaderReadString"
	}, {
		"mangle":	"xmlTextReaderRelaxNGSetSchema",
		"c++":	"xmlTextReaderRelaxNGSetSchema(xmlTextReaderPtr, xmlRelaxNGPtr)",
		"go":	"TextReaderRelaxNGSetSchema"
	}, {
		"mangle":	"xmlTextReaderRelaxNGValidate",
		"c++":	"xmlTextReaderRelaxNGValidate(xmlTextReaderPtr, const char *)",
		"go":	"TextReaderRelaxNGValidate"
	}, {
		"mangle":	"xmlTextReaderRelaxNGValidateCtxt",
		"c++":	"xmlTextReaderRelaxNGValidateCtxt(xmlTextReaderPtr, xmlRelaxNGValidCtxtPtr, int)",
		"go":	"TextReaderRelaxNGValidateCtxt"
	}, {
		"mangle":	"xmlTextReaderSchemaValidate",
		"c++":	"xmlTextReaderSchemaValidate(xmlTextReaderPtr, const char *)",
		"go":	"TextReaderSchemaValidate"
	}, {
		"mangle":	"xmlTextReaderSchemaValidateCtxt",
		"c++":	"xmlTextReaderSchemaValidateCtxt(xmlTextReaderPtr, xmlSchemaValidCtxtPtr, int)",
		"go":	"TextReaderSchemaValidateCtxt"
	}, {
		"mangle":	"xmlTextReaderSetErrorHandler",
		"c++":	"xmlTextReaderSetErrorHandler(xmlTextReaderPtr, xmlTextReaderErrorFunc, void *)",
		"go":	"TextReaderSetErrorHandler"
	}, {
		"mangle":	"xmlTextReaderSetMaxAmplification",
		"c++":	"xmlTextReaderSetMaxAmplification(xmlTextReaderPtr, unsigned int)",
		"go":	"TextReaderSetMaxAmplification"
	}, {
		"mangle":	"xmlTextReaderSetParserProp",
		"c++":	"xmlTextReaderSetParserProp(xmlTextReaderPtr, int, int)",
		"go":	"TextReaderSetParserProp"
	}, {
		"mangle":	"xmlTextReaderSetSchema",
		"c++":	"xmlTextReaderSetSchema(xmlTextReaderPtr, xmlSchemaPtr)",
		"go":	"TextReaderSetSchema"
	}, {
		"mangle":	"xmlTextReaderSetStructuredErrorHandler",
		"c++":	"xmlTextReaderSetStructuredErrorHandler(xmlTextReaderPtr, xmlStructuredErrorFunc, void *)",
		"go":	"TextReaderSetStructuredErrorHandler"
	}, {
		"mangle":	"xmlTextReaderSetup",
		"c++":	"xmlTextReaderSetup(xmlTextReaderPtr, xmlParserInputBufferPtr, const char *, const char *, int)",
		"go":	"TextReaderSetup"
	}, {
		"mangle":	"xmlTextReaderStandalone",
		"c++":	"xmlTextReaderStandalone(xmlTextReaderPtr)",
		"go":	"TextReaderStandalone"
	}, {
		"mangle":	"xmlTextReaderValue",
		"c++":	"xmlTextReaderValue(xmlTextReaderPtr)",
		"go":	"TextReaderValue"
	}, {
		"mangle":	"xmlTextReaderXmlLang",
		"c++":	"xmlTextReaderXmlLang(xmlTextReaderPtr)",
		"go":	"TextReaderXmlLang"
	}, {
		"mangle":	"xmlTextWriterClose",
		"c++":	"xmlTextWriterClose(xmlTextWriterPtr)",
		"go":	"TextWriterClose"
	}, {
		"mangle":	"xmlTextWriterEndAttribute",
		"c++":	"xmlTextWriterEndAttribute(xmlTextWriterPtr)",
		"go":	"TextWriterEndAttribute"
	}, {
		"mangle":	"xmlTextWriterEndCDATA",
		"c++":	"xmlTextWriterEndCDATA(xmlTextWriterPtr)",
		"go":	"TextWriterEndCDATA"
	}, {
		"mangle":	"xmlTextWriterEndComment",
		"c++":	"xmlTextWriterEndComment(xmlTextWriterPtr)",
		"go":	"TextWriterEndComment"
	}, {
		"mangle":	"xmlTextWriterEndDTD",
		"c++":	"xmlTextWriterEndDTD(xmlTextWriterPtr)",
		"go":	"TextWriterEndDTD"
	}, {
		"mangle":	"xmlTextWriterEndDTDAttlist",
		"c++":	"xmlTextWriterEndDTDAttlist(xmlTextWriterPtr)",
		"go":	"TextWriterEndDTDAttlist"
	}, {
		"mangle":	"xmlTextWriterEndDTDElement",
		"c++":	"xmlTextWriterEndDTDElement(xmlTextWriterPtr)",
		"go":	"TextWriterEndDTDElement"
	}, {
		"mangle":	"xmlTextWriterEndDTDEntity",
		"c++":	"xmlTextWriterEndDTDEntity(xmlTextWriterPtr)",
		"go":	"TextWriterEndDTDEntity"
	}, {
		"mangle":	"xmlTextWriterEndDocument",
		"c++":	"xmlTextWriterEndDocument(xmlTextWriterPtr)",
		"go":	"TextWriterEndDocument"
	}, {
		"mangle":	"xmlTextWriterEndElement",
		"c++":	"xmlTextWriterEndElement(xmlTextWriterPtr)",
		"go":	"TextWriterEndElement"
	}, {
		"mangle":	"xmlTextWriterEndPI",
		"c++":	"xmlTextWriterEndPI(xmlTextWriterPtr)",
		"go":	"TextWriterEndPI"
	}, {
		"mangle":	"xmlTextWriterFlush",
		"c++":	"xmlTextWriterFlush(xmlTextWriterPtr)",
		"go":	"TextWriterFlush"
	}, {
		"mangle":	"xmlTextWriterFullEndElement",
		"c++":	"xmlTextWriterFullEndElement(xmlTextWriterPtr)",
		"go":	"TextWriterFullEndElement"
	}, {
		"mangle":	"xmlTextWriterSetIndent",
		"c++":	"xmlTextWriterSetIndent(xmlTextWriterPtr, int)",
		"go":	"TextWriterSetIndent"
	}, {
		"mangle":	"xmlTextWriterSetIndentString",
		"c++":	"xmlTextWriterSetIndentString(xmlTextWriterPtr, const xmlChar *)",
		"go":	"TextWriterSetIndentString"
	}, {
		"mangle":	"xmlTextWriterSetQuoteChar",
		"c++":	"xmlTextWriterSetQuoteChar(xmlTextWriterPtr, xmlChar)",
		"go":	"TextWriterSetQuoteChar"
	}, {
		"mangle":	"xmlTextWriterStartAttribute",
		"c++":	"xmlTextWriterStartAttribute(xmlTextWriterPtr, const xmlChar *)",
		"go":	"TextWriterStartAttribute"
	}, {
		"mangle":	"xmlTextWriterStartAttributeNS",
		"c++":	"xmlTextWriterStartAttributeNS(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"TextWriterStartAttributeNS"
	}, {
		"mangle":	"xmlTextWriterStartCDATA",
		"c++":	"xmlTextWriterStartCDATA(xmlTextWriterPtr)",
		"go":	"TextWriterStartCDATA"
	}, {
		"mangle":	"xmlTextWriterStartComment",
		"c++":	"xmlTextWriterStartComment(xmlTextWriterPtr)",
		"go":	"TextWriterStartComment"
	}, {
		"mangle":	"xmlTextWriterStartDTD",
		"c++":	"xmlTextWriterStartDTD(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"TextWriterStartDTD"
	}, {
		"mangle":	"xmlTextWriterStartDTDAttlist",
		"c++":	"xmlTextWriterStartDTDAttlist(xmlTextWriterPtr, const xmlChar *)",
		"go":	"TextWriterStartDTDAttlist"
	}, {
		"mangle":	"xmlTextWriterStartDTDElement",
		"c++":	"xmlTextWriterStartDTDElement(xmlTextWriterPtr, const xmlChar *)",
		"go":	"TextWriterStartDTDElement"
	}, {
		"mangle":	"xmlTextWriterStartDTDEntity",
		"c++":	"xmlTextWriterStartDTDEntity(xmlTextWriterPtr, int, const xmlChar *)",
		"go":	"TextWriterStartDTDEntity"
	}, {
		"mangle":	"xmlTextWriterStartDocument",
		"c++":	"xmlTextWriterStartDocument(xmlTextWriterPtr, const char *, const char *, const char *)",
		"go":	"TextWriterStartDocument"
	}, {
		"mangle":	"xmlTextWriterStartElement",
		"c++":	"xmlTextWriterStartElement(xmlTextWriterPtr, const xmlChar *)",
		"go":	"TextWriterStartElement"
	}, {
		"mangle":	"xmlTextWriterStartElementNS",
		"c++":	"xmlTextWriterStartElementNS(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"TextWriterStartElementNS"
	}, {
		"mangle":	"xmlTextWriterStartPI",
		"c++":	"xmlTextWriterStartPI(xmlTextWriterPtr, const xmlChar *)",
		"go":	"TextWriterStartPI"
	}, {
		"mangle":	"xmlTextWriterWriteAttribute",
		"c++":	"xmlTextWriterWriteAttribute(xmlTextWriterPtr, const xmlChar *, const xmlChar *)",
		"go":	"TextWriterWriteAttribute"
	}, {
		"mangle":	"xmlTextWriterWriteAttributeNS",
		"c++":	"xmlTextWriterWriteAttributeNS(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"TextWriterWriteAttributeNS"
	}, {
		"mangle":	"xmlTextWriterWriteBase64",
		"c++":	"xmlTextWriterWriteBase64(xmlTextWriterPtr, const char *, int, int)",
		"go":	"TextWriterWriteBase64"
	}, {
		"mangle":	"xmlTextWriterWriteBinHex",
		"c++":	"xmlTextWriterWriteBinHex(xmlTextWriterPtr, const char *, int, int)",
		"go":	"TextWriterWriteBinHex"
	}, {
		"mangle":	"xmlTextWriterWriteCDATA",
		"c++":	"xmlTextWriterWriteCDATA(xmlTextWriterPtr, const xmlChar *)",
		"go":	"TextWriterWriteCDATA"
	}, {
		"mangle":	"xmlTextWriterWriteComment",
		"c++":	"xmlTextWriterWriteComment(xmlTextWriterPtr, const xmlChar *)",
		"go":	"TextWriterWriteComment"
	}, {
		"mangle":	"xmlTextWriterWriteDTD",
		"c++":	"xmlTextWriterWriteDTD(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"TextWriterWriteDTD"
	}, {
		"mangle":	"xmlTextWriterWriteDTDAttlist",
		"c++":	"xmlTextWriterWriteDTDAttlist(xmlTextWriterPtr, const xmlChar *, const xmlChar *)",
		"go":	"TextWriterWriteDTDAttlist"
	}, {
		"mangle":	"xmlTextWriterWriteDTDElement",
		"c++":	"xmlTextWriterWriteDTDElement(xmlTextWriterPtr, const xmlChar *, const xmlChar *)",
		"go":	"TextWriterWriteDTDElement"
	}, {
		"mangle":	"xmlTextWriterWriteDTDEntity",
		"c++":	"xmlTextWriterWriteDTDEntity(xmlTextWriterPtr, int, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"TextWriterWriteDTDEntity"
	}, {
		"mangle":	"xmlTextWriterWriteDTDExternalEntity",
		"c++":	"xmlTextWriterWriteDTDExternalEntity(xmlTextWriterPtr, int, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"TextWriterWriteDTDExternalEntity"
	}, {
		"mangle":	"xmlTextWriterWriteDTDExternalEntityContents",
		"c++":	"xmlTextWriterWriteDTDExternalEntityContents(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"TextWriterWriteDTDExternalEntityContents"
	}, {
		"mangle":	"xmlTextWriterWriteDTDInternalEntity",
		"c++":	"xmlTextWriterWriteDTDInternalEntity(xmlTextWriterPtr, int, const xmlChar *, const xmlChar *)",
		"go":	"TextWriterWriteDTDInternalEntity"
	}, {
		"mangle":	"xmlTextWriterWriteDTDNotation",
		"c++":	"xmlTextWriterWriteDTDNotation(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"TextWriterWriteDTDNotation"
	}, {
		"mangle":	"xmlTextWriterWriteElement",
		"c++":	"xmlTextWriterWriteElement(xmlTextWriterPtr, const xmlChar *, const xmlChar *)",
		"go":	"TextWriterWriteElement"
	}, {
		"mangle":	"xmlTextWriterWriteElementNS",
		"c++":	"xmlTextWriterWriteElementNS(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *, const xmlChar *)",
		"go":	"TextWriterWriteElementNS"
	}, {
		"mangle":	"xmlTextWriterWriteFormatAttribute",
		"c++":	"xmlTextWriterWriteFormatAttribute(xmlTextWriterPtr, const xmlChar *, const char *, ...)",
		"go":	"TextWriterWriteFormatAttribute"
	}, {
		"mangle":	"xmlTextWriterWriteFormatAttributeNS",
		"c++":	"xmlTextWriterWriteFormatAttributeNS(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *, const char *, ...)",
		"go":	"TextWriterWriteFormatAttributeNS"
	}, {
		"mangle":	"xmlTextWriterWriteFormatCDATA",
		"c++":	"xmlTextWriterWriteFormatCDATA(xmlTextWriterPtr, const char *, ...)",
		"go":	"TextWriterWriteFormatCDATA"
	}, {
		"mangle":	"xmlTextWriterWriteFormatComment",
		"c++":	"xmlTextWriterWriteFormatComment(xmlTextWriterPtr, const char *, ...)",
		"go":	"TextWriterWriteFormatComment"
	}, {
		"mangle":	"xmlTextWriterWriteFormatDTD",
		"c++":	"xmlTextWriterWriteFormatDTD(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *, const char *, ...)",
		"go":	"TextWriterWriteFormatDTD"
	}, {
		"mangle":	"xmlTextWriterWriteFormatDTDAttlist",
		"c++":	"xmlTextWriterWriteFormatDTDAttlist(xmlTextWriterPtr, const xmlChar *, const char *, ...)",
		"go":	"TextWriterWriteFormatDTDAttlist"
	}, {
		"mangle":	"xmlTextWriterWriteFormatDTDElement",
		"c++":	"xmlTextWriterWriteFormatDTDElement(xmlTextWriterPtr, const xmlChar *, const char *, ...)",
		"go":	"TextWriterWriteFormatDTDElement"
	}, {
		"mangle":	"xmlTextWriterWriteFormatDTDInternalEntity",
		"c++":	"xmlTextWriterWriteFormatDTDInternalEntity(xmlTextWriterPtr, int, const xmlChar *, const char *, ...)",
		"go":	"TextWriterWriteFormatDTDInternalEntity"
	}, {
		"mangle":	"xmlTextWriterWriteFormatElement",
		"c++":	"xmlTextWriterWriteFormatElement(xmlTextWriterPtr, const xmlChar *, const char *, ...)",
		"go":	"TextWriterWriteFormatElement"
	}, {
		"mangle":	"xmlTextWriterWriteFormatElementNS",
		"c++":	"xmlTextWriterWriteFormatElementNS(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *, const char *, ...)",
		"go":	"TextWriterWriteFormatElementNS"
	}, {
		"mangle":	"xmlTextWriterWriteFormatPI",
		"c++":	"xmlTextWriterWriteFormatPI(xmlTextWriterPtr, const xmlChar *, const char *, ...)",
		"go":	"TextWriterWriteFormatPI"
	}, {
		"mangle":	"xmlTextWriterWriteFormatRaw",
		"c++":	"xmlTextWriterWriteFormatRaw(xmlTextWriterPtr, const char *, ...)",
		"go":	"TextWriterWriteFormatRaw"
	}, {
		"mangle":	"xmlTextWriterWriteFormatString",
		"c++":	"xmlTextWriterWriteFormatString(xmlTextWriterPtr, const char *, ...)",
		"go":	"TextWriterWriteFormatString"
	}, {
		"mangle":	"xmlTextWriterWritePI",
		"c++":	"xmlTextWriterWritePI(xmlTextWriterPtr, const xmlChar *, const xmlChar *)",
		"go":	"TextWriterWritePI"
	}, {
		"mangle":	"xmlTextWriterWriteRaw",
		"c++":	"xmlTextWriterWriteRaw(xmlTextWriterPtr, const xmlChar *)",
		"go":	"TextWriterWriteRaw"
	}, {
		"mangle":	"xmlTextWriterWriteRawLen",
		"c++":	"xmlTextWriterWriteRawLen(xmlTextWriterPtr, const xmlChar *, int)",
		"go":	"TextWriterWriteRawLen"
	}, {
		"mangle":	"xmlTextWriterWriteString",
		"c++":	"xmlTextWriterWriteString(xmlTextWriterPtr, const xmlChar *)",
		"go":	"TextWriterWriteString"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatAttribute",
		"c++":	"xmlTextWriterWriteVFormatAttribute(xmlTextWriterPtr, const xmlChar *, const char *, va_list)",
		"go":	"TextWriterWriteVFormatAttribute"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatAttributeNS",
		"c++":	"xmlTextWriterWriteVFormatAttributeNS(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *, const char *, va_list)",
		"go":	"TextWriterWriteVFormatAttributeNS"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatCDATA",
		"c++":	"xmlTextWriterWriteVFormatCDATA(xmlTextWriterPtr, const char *, va_list)",
		"go":	"TextWriterWriteVFormatCDATA"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatComment",
		"c++":	"xmlTextWriterWriteVFormatComment(xmlTextWriterPtr, const char *, va_list)",
		"go":	"TextWriterWriteVFormatComment"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatDTD",
		"c++":	"xmlTextWriterWriteVFormatDTD(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *, const char *, va_list)",
		"go":	"TextWriterWriteVFormatDTD"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatDTDAttlist",
		"c++":	"xmlTextWriterWriteVFormatDTDAttlist(xmlTextWriterPtr, const xmlChar *, const char *, va_list)",
		"go":	"TextWriterWriteVFormatDTDAttlist"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatDTDElement",
		"c++":	"xmlTextWriterWriteVFormatDTDElement(xmlTextWriterPtr, const xmlChar *, const char *, va_list)",
		"go":	"TextWriterWriteVFormatDTDElement"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatDTDInternalEntity",
		"c++":	"xmlTextWriterWriteVFormatDTDInternalEntity(xmlTextWriterPtr, int, const xmlChar *, const char *, va_list)",
		"go":	"TextWriterWriteVFormatDTDInternalEntity"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatElement",
		"c++":	"xmlTextWriterWriteVFormatElement(xmlTextWriterPtr, const xmlChar *, const char *, va_list)",
		"go":	"TextWriterWriteVFormatElement"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatElementNS",
		"c++":	"xmlTextWriterWriteVFormatElementNS(xmlTextWriterPtr, const xmlChar *, const xmlChar *, const xmlChar *, const char *, va_list)",
		"go":	"TextWriterWriteVFormatElementNS"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatPI",
		"c++":	"xmlTextWriterWriteVFormatPI(xmlTextWriterPtr, const xmlChar *, const char *, va_list)",
		"go":	"TextWriterWriteVFormatPI"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatRaw",
		"c++":	"xmlTextWriterWriteVFormatRaw(xmlTextWriterPtr, const char *, va_list)",
		"go":	"TextWriterWriteVFormatRaw"
	}, {
		"mangle":	"xmlTextWriterWriteVFormatString",
		"c++":	"xmlTextWriterWriteVFormatString(xmlTextWriterPtr, const char *, va_list)",
		"go":	"TextWriterWriteVFormatString"
	}, {
		"mangle":	"xmlThrDefBufferAllocScheme",
		"c++":	"xmlThrDefBufferAllocScheme(xmlBufferAllocationScheme)",
		"go":	"BufferAllocationScheme.ThrDefBufferAllocScheme"
	}, {
		"mangle":	"xmlThrDefDefaultBufferSize",
		"c++":	"xmlThrDefDefaultBufferSize(int)",
		"go":	"ThrDefDefaultBufferSize"
	}, {
		"mangle":	"xmlThrDefDeregisterNodeDefault",
		"c++":	"xmlThrDefDeregisterNodeDefault(xmlDeregisterNodeFunc)",
		"go":	"ThrDefDeregisterNodeDefault"
	}, {
		"mangle":	"xmlThrDefDoValidityCheckingDefaultValue",
		"c++":	"xmlThrDefDoValidityCheckingDefaultValue(int)",
		"go":	"ThrDefDoValidityCheckingDefaultValue"
	}, {
		"mangle":	"xmlThrDefGetWarningsDefaultValue",
		"c++":	"xmlThrDefGetWarningsDefaultValue(int)",
		"go":	"ThrDefGetWarningsDefaultValue"
	}, {
		"mangle":	"xmlThrDefIndentTreeOutput",
		"c++":	"xmlThrDefIndentTreeOutput(int)",
		"go":	"ThrDefIndentTreeOutput"
	}, {
		"mangle":	"xmlThrDefKeepBlanksDefaultValue",
		"c++":	"xmlThrDefKeepBlanksDefaultValue(int)",
		"go":	"ThrDefKeepBlanksDefaultValue"
	}, {
		"mangle":	"xmlThrDefLineNumbersDefaultValue",
		"c++":	"xmlThrDefLineNumbersDefaultValue(int)",
		"go":	"ThrDefLineNumbersDefaultValue"
	}, {
		"mangle":	"xmlThrDefLoadExtDtdDefaultValue",
		"c++":	"xmlThrDefLoadExtDtdDefaultValue(int)",
		"go":	"ThrDefLoadExtDtdDefaultValue"
	}, {
		"mangle":	"xmlThrDefOutputBufferCreateFilenameDefault",
		"c++":	"xmlThrDefOutputBufferCreateFilenameDefault(xmlOutputBufferCreateFilenameFunc)",
		"go":	"ThrDefOutputBufferCreateFilenameDefault"
	}, {
		"mangle":	"xmlThrDefParserDebugEntities",
		"c++":	"xmlThrDefParserDebugEntities(int)",
		"go":	"ThrDefParserDebugEntities"
	}, {
		"mangle":	"xmlThrDefParserInputBufferCreateFilenameDefault",
		"c++":	"xmlThrDefParserInputBufferCreateFilenameDefault(xmlParserInputBufferCreateFilenameFunc)",
		"go":	"ThrDefParserInputBufferCreateFilenameDefault"
	}, {
		"mangle":	"xmlThrDefPedanticParserDefaultValue",
		"c++":	"xmlThrDefPedanticParserDefaultValue(int)",
		"go":	"ThrDefPedanticParserDefaultValue"
	}, {
		"mangle":	"xmlThrDefRegisterNodeDefault",
		"c++":	"xmlThrDefRegisterNodeDefault(xmlRegisterNodeFunc)",
		"go":	"ThrDefRegisterNodeDefault"
	}, {
		"mangle":	"xmlThrDefSaveNoEmptyTags",
		"c++":	"xmlThrDefSaveNoEmptyTags(int)",
		"go":	"ThrDefSaveNoEmptyTags"
	}, {
		"mangle":	"xmlThrDefSetGenericErrorFunc",
		"c++":	"xmlThrDefSetGenericErrorFunc(void *, xmlGenericErrorFunc)",
		"go":	"ThrDefSetGenericErrorFunc"
	}, {
		"mangle":	"xmlThrDefSetStructuredErrorFunc",
		"c++":	"xmlThrDefSetStructuredErrorFunc(void *, xmlStructuredErrorFunc)",
		"go":	"ThrDefSetStructuredErrorFunc"
	}, {
		"mangle":	"xmlThrDefSubstituteEntitiesDefaultValue",
		"c++":	"xmlThrDefSubstituteEntitiesDefaultValue(int)",
		"go":	"ThrDefSubstituteEntitiesDefaultValue"
	}, {
		"mangle":	"xmlThrDefTreeIndentString",
		"c++":	"xmlThrDefTreeIndentString(const char *)",
		"go":	"ThrDefTreeIndentString"
	}, {
		"mangle":	"xmlUCSIsAegeanNumbers",
		"c++":	"xmlUCSIsAegeanNumbers(int)",
		"go":	"UCSIsAegeanNumbers"
	}, {
		"mangle":	"xmlUCSIsAlphabeticPresentationForms",
		"c++":	"xmlUCSIsAlphabeticPresentationForms(int)",
		"go":	"UCSIsAlphabeticPresentationForms"
	}, {
		"mangle":	"xmlUCSIsArabic",
		"c++":	"xmlUCSIsArabic(int)",
		"go":	"UCSIsArabic"
	}, {
		"mangle":	"xmlUCSIsArabicPresentationFormsA",
		"c++":	"xmlUCSIsArabicPresentationFormsA(int)",
		"go":	"UCSIsArabicPresentationFormsA"
	}, {
		"mangle":	"xmlUCSIsArabicPresentationFormsB",
		"c++":	"xmlUCSIsArabicPresentationFormsB(int)",
		"go":	"UCSIsArabicPresentationFormsB"
	}, {
		"mangle":	"xmlUCSIsArmenian",
		"c++":	"xmlUCSIsArmenian(int)",
		"go":	"UCSIsArmenian"
	}, {
		"mangle":	"xmlUCSIsArrows",
		"c++":	"xmlUCSIsArrows(int)",
		"go":	"UCSIsArrows"
	}, {
		"mangle":	"xmlUCSIsBasicLatin",
		"c++":	"xmlUCSIsBasicLatin(int)",
		"go":	"UCSIsBasicLatin"
	}, {
		"mangle":	"xmlUCSIsBengali",
		"c++":	"xmlUCSIsBengali(int)",
		"go":	"UCSIsBengali"
	}, {
		"mangle":	"xmlUCSIsBlock",
		"c++":	"xmlUCSIsBlock(int, const char *)",
		"go":	"UCSIsBlock"
	}, {
		"mangle":	"xmlUCSIsBlockElements",
		"c++":	"xmlUCSIsBlockElements(int)",
		"go":	"UCSIsBlockElements"
	}, {
		"mangle":	"xmlUCSIsBopomofo",
		"c++":	"xmlUCSIsBopomofo(int)",
		"go":	"UCSIsBopomofo"
	}, {
		"mangle":	"xmlUCSIsBopomofoExtended",
		"c++":	"xmlUCSIsBopomofoExtended(int)",
		"go":	"UCSIsBopomofoExtended"
	}, {
		"mangle":	"xmlUCSIsBoxDrawing",
		"c++":	"xmlUCSIsBoxDrawing(int)",
		"go":	"UCSIsBoxDrawing"
	}, {
		"mangle":	"xmlUCSIsBraillePatterns",
		"c++":	"xmlUCSIsBraillePatterns(int)",
		"go":	"UCSIsBraillePatterns"
	}, {
		"mangle":	"xmlUCSIsBuhid",
		"c++":	"xmlUCSIsBuhid(int)",
		"go":	"UCSIsBuhid"
	}, {
		"mangle":	"xmlUCSIsByzantineMusicalSymbols",
		"c++":	"xmlUCSIsByzantineMusicalSymbols(int)",
		"go":	"UCSIsByzantineMusicalSymbols"
	}, {
		"mangle":	"xmlUCSIsCJKCompatibility",
		"c++":	"xmlUCSIsCJKCompatibility(int)",
		"go":	"UCSIsCJKCompatibility"
	}, {
		"mangle":	"xmlUCSIsCJKCompatibilityForms",
		"c++":	"xmlUCSIsCJKCompatibilityForms(int)",
		"go":	"UCSIsCJKCompatibilityForms"
	}, {
		"mangle":	"xmlUCSIsCJKCompatibilityIdeographs",
		"c++":	"xmlUCSIsCJKCompatibilityIdeographs(int)",
		"go":	"UCSIsCJKCompatibilityIdeographs"
	}, {
		"mangle":	"xmlUCSIsCJKCompatibilityIdeographsSupplement",
		"c++":	"xmlUCSIsCJKCompatibilityIdeographsSupplement(int)",
		"go":	"UCSIsCJKCompatibilityIdeographsSupplement"
	}, {
		"mangle":	"xmlUCSIsCJKRadicalsSupplement",
		"c++":	"xmlUCSIsCJKRadicalsSupplement(int)",
		"go":	"UCSIsCJKRadicalsSupplement"
	}, {
		"mangle":	"xmlUCSIsCJKSymbolsandPunctuation",
		"c++":	"xmlUCSIsCJKSymbolsandPunctuation(int)",
		"go":	"UCSIsCJKSymbolsandPunctuation"
	}, {
		"mangle":	"xmlUCSIsCJKUnifiedIdeographs",
		"c++":	"xmlUCSIsCJKUnifiedIdeographs(int)",
		"go":	"UCSIsCJKUnifiedIdeographs"
	}, {
		"mangle":	"xmlUCSIsCJKUnifiedIdeographsExtensionA",
		"c++":	"xmlUCSIsCJKUnifiedIdeographsExtensionA(int)",
		"go":	"UCSIsCJKUnifiedIdeographsExtensionA"
	}, {
		"mangle":	"xmlUCSIsCJKUnifiedIdeographsExtensionB",
		"c++":	"xmlUCSIsCJKUnifiedIdeographsExtensionB(int)",
		"go":	"UCSIsCJKUnifiedIdeographsExtensionB"
	}, {
		"mangle":	"xmlUCSIsCat",
		"c++":	"xmlUCSIsCat(int, const char *)",
		"go":	"UCSIsCat"
	}, {
		"mangle":	"xmlUCSIsCatC",
		"c++":	"xmlUCSIsCatC(int)",
		"go":	"UCSIsCatC"
	}, {
		"mangle":	"xmlUCSIsCatCc",
		"c++":	"xmlUCSIsCatCc(int)",
		"go":	"UCSIsCatCc"
	}, {
		"mangle":	"xmlUCSIsCatCf",
		"c++":	"xmlUCSIsCatCf(int)",
		"go":	"UCSIsCatCf"
	}, {
		"mangle":	"xmlUCSIsCatCo",
		"c++":	"xmlUCSIsCatCo(int)",
		"go":	"UCSIsCatCo"
	}, {
		"mangle":	"xmlUCSIsCatCs",
		"c++":	"xmlUCSIsCatCs(int)",
		"go":	"UCSIsCatCs"
	}, {
		"mangle":	"xmlUCSIsCatL",
		"c++":	"xmlUCSIsCatL(int)",
		"go":	"UCSIsCatL"
	}, {
		"mangle":	"xmlUCSIsCatLl",
		"c++":	"xmlUCSIsCatLl(int)",
		"go":	"UCSIsCatLl"
	}, {
		"mangle":	"xmlUCSIsCatLm",
		"c++":	"xmlUCSIsCatLm(int)",
		"go":	"UCSIsCatLm"
	}, {
		"mangle":	"xmlUCSIsCatLo",
		"c++":	"xmlUCSIsCatLo(int)",
		"go":	"UCSIsCatLo"
	}, {
		"mangle":	"xmlUCSIsCatLt",
		"c++":	"xmlUCSIsCatLt(int)",
		"go":	"UCSIsCatLt"
	}, {
		"mangle":	"xmlUCSIsCatLu",
		"c++":	"xmlUCSIsCatLu(int)",
		"go":	"UCSIsCatLu"
	}, {
		"mangle":	"xmlUCSIsCatM",
		"c++":	"xmlUCSIsCatM(int)",
		"go":	"UCSIsCatM"
	}, {
		"mangle":	"xmlUCSIsCatMc",
		"c++":	"xmlUCSIsCatMc(int)",
		"go":	"UCSIsCatMc"
	}, {
		"mangle":	"xmlUCSIsCatMe",
		"c++":	"xmlUCSIsCatMe(int)",
		"go":	"UCSIsCatMe"
	}, {
		"mangle":	"xmlUCSIsCatMn",
		"c++":	"xmlUCSIsCatMn(int)",
		"go":	"UCSIsCatMn"
	}, {
		"mangle":	"xmlUCSIsCatN",
		"c++":	"xmlUCSIsCatN(int)",
		"go":	"UCSIsCatN"
	}, {
		"mangle":	"xmlUCSIsCatNd",
		"c++":	"xmlUCSIsCatNd(int)",
		"go":	"UCSIsCatNd"
	}, {
		"mangle":	"xmlUCSIsCatNl",
		"c++":	"xmlUCSIsCatNl(int)",
		"go":	"UCSIsCatNl"
	}, {
		"mangle":	"xmlUCSIsCatNo",
		"c++":	"xmlUCSIsCatNo(int)",
		"go":	"UCSIsCatNo"
	}, {
		"mangle":	"xmlUCSIsCatP",
		"c++":	"xmlUCSIsCatP(int)",
		"go":	"UCSIsCatP"
	}, {
		"mangle":	"xmlUCSIsCatPc",
		"c++":	"xmlUCSIsCatPc(int)",
		"go":	"UCSIsCatPc"
	}, {
		"mangle":	"xmlUCSIsCatPd",
		"c++":	"xmlUCSIsCatPd(int)",
		"go":	"UCSIsCatPd"
	}, {
		"mangle":	"xmlUCSIsCatPe",
		"c++":	"xmlUCSIsCatPe(int)",
		"go":	"UCSIsCatPe"
	}, {
		"mangle":	"xmlUCSIsCatPf",
		"c++":	"xmlUCSIsCatPf(int)",
		"go":	"UCSIsCatPf"
	}, {
		"mangle":	"xmlUCSIsCatPi",
		"c++":	"xmlUCSIsCatPi(int)",
		"go":	"UCSIsCatPi"
	}, {
		"mangle":	"xmlUCSIsCatPo",
		"c++":	"xmlUCSIsCatPo(int)",
		"go":	"UCSIsCatPo"
	}, {
		"mangle":	"xmlUCSIsCatPs",
		"c++":	"xmlUCSIsCatPs(int)",
		"go":	"UCSIsCatPs"
	}, {
		"mangle":	"xmlUCSIsCatS",
		"c++":	"xmlUCSIsCatS(int)",
		"go":	"UCSIsCatS"
	}, {
		"mangle":	"xmlUCSIsCatSc",
		"c++":	"xmlUCSIsCatSc(int)",
		"go":	"UCSIsCatSc"
	}, {
		"mangle":	"xmlUCSIsCatSk",
		"c++":	"xmlUCSIsCatSk(int)",
		"go":	"UCSIsCatSk"
	}, {
		"mangle":	"xmlUCSIsCatSm",
		"c++":	"xmlUCSIsCatSm(int)",
		"go":	"UCSIsCatSm"
	}, {
		"mangle":	"xmlUCSIsCatSo",
		"c++":	"xmlUCSIsCatSo(int)",
		"go":	"UCSIsCatSo"
	}, {
		"mangle":	"xmlUCSIsCatZ",
		"c++":	"xmlUCSIsCatZ(int)",
		"go":	"UCSIsCatZ"
	}, {
		"mangle":	"xmlUCSIsCatZl",
		"c++":	"xmlUCSIsCatZl(int)",
		"go":	"UCSIsCatZl"
	}, {
		"mangle":	"xmlUCSIsCatZp",
		"c++":	"xmlUCSIsCatZp(int)",
		"go":	"UCSIsCatZp"
	}, {
		"mangle":	"xmlUCSIsCatZs",
		"c++":	"xmlUCSIsCatZs(int)",
		"go":	"UCSIsCatZs"
	}, {
		"mangle":	"xmlUCSIsCherokee",
		"c++":	"xmlUCSIsCherokee(int)",
		"go":	"UCSIsCherokee"
	}, {
		"mangle":	"xmlUCSIsCombiningDiacriticalMarks",
		"c++":	"xmlUCSIsCombiningDiacriticalMarks(int)",
		"go":	"UCSIsCombiningDiacriticalMarks"
	}, {
		"mangle":	"xmlUCSIsCombiningDiacriticalMarksforSymbols",
		"c++":	"xmlUCSIsCombiningDiacriticalMarksforSymbols(int)",
		"go":	"UCSIsCombiningDiacriticalMarksforSymbols"
	}, {
		"mangle":	"xmlUCSIsCombiningHalfMarks",
		"c++":	"xmlUCSIsCombiningHalfMarks(int)",
		"go":	"UCSIsCombiningHalfMarks"
	}, {
		"mangle":	"xmlUCSIsCombiningMarksforSymbols",
		"c++":	"xmlUCSIsCombiningMarksforSymbols(int)",
		"go":	"UCSIsCombiningMarksforSymbols"
	}, {
		"mangle":	"xmlUCSIsControlPictures",
		"c++":	"xmlUCSIsControlPictures(int)",
		"go":	"UCSIsControlPictures"
	}, {
		"mangle":	"xmlUCSIsCurrencySymbols",
		"c++":	"xmlUCSIsCurrencySymbols(int)",
		"go":	"UCSIsCurrencySymbols"
	}, {
		"mangle":	"xmlUCSIsCypriotSyllabary",
		"c++":	"xmlUCSIsCypriotSyllabary(int)",
		"go":	"UCSIsCypriotSyllabary"
	}, {
		"mangle":	"xmlUCSIsCyrillic",
		"c++":	"xmlUCSIsCyrillic(int)",
		"go":	"UCSIsCyrillic"
	}, {
		"mangle":	"xmlUCSIsCyrillicSupplement",
		"c++":	"xmlUCSIsCyrillicSupplement(int)",
		"go":	"UCSIsCyrillicSupplement"
	}, {
		"mangle":	"xmlUCSIsDeseret",
		"c++":	"xmlUCSIsDeseret(int)",
		"go":	"UCSIsDeseret"
	}, {
		"mangle":	"xmlUCSIsDevanagari",
		"c++":	"xmlUCSIsDevanagari(int)",
		"go":	"UCSIsDevanagari"
	}, {
		"mangle":	"xmlUCSIsDingbats",
		"c++":	"xmlUCSIsDingbats(int)",
		"go":	"UCSIsDingbats"
	}, {
		"mangle":	"xmlUCSIsEnclosedAlphanumerics",
		"c++":	"xmlUCSIsEnclosedAlphanumerics(int)",
		"go":	"UCSIsEnclosedAlphanumerics"
	}, {
		"mangle":	"xmlUCSIsEnclosedCJKLettersandMonths",
		"c++":	"xmlUCSIsEnclosedCJKLettersandMonths(int)",
		"go":	"UCSIsEnclosedCJKLettersandMonths"
	}, {
		"mangle":	"xmlUCSIsEthiopic",
		"c++":	"xmlUCSIsEthiopic(int)",
		"go":	"UCSIsEthiopic"
	}, {
		"mangle":	"xmlUCSIsGeneralPunctuation",
		"c++":	"xmlUCSIsGeneralPunctuation(int)",
		"go":	"UCSIsGeneralPunctuation"
	}, {
		"mangle":	"xmlUCSIsGeometricShapes",
		"c++":	"xmlUCSIsGeometricShapes(int)",
		"go":	"UCSIsGeometricShapes"
	}, {
		"mangle":	"xmlUCSIsGeorgian",
		"c++":	"xmlUCSIsGeorgian(int)",
		"go":	"UCSIsGeorgian"
	}, {
		"mangle":	"xmlUCSIsGothic",
		"c++":	"xmlUCSIsGothic(int)",
		"go":	"UCSIsGothic"
	}, {
		"mangle":	"xmlUCSIsGreek",
		"c++":	"xmlUCSIsGreek(int)",
		"go":	"UCSIsGreek"
	}, {
		"mangle":	"xmlUCSIsGreekExtended",
		"c++":	"xmlUCSIsGreekExtended(int)",
		"go":	"UCSIsGreekExtended"
	}, {
		"mangle":	"xmlUCSIsGreekandCoptic",
		"c++":	"xmlUCSIsGreekandCoptic(int)",
		"go":	"UCSIsGreekandCoptic"
	}, {
		"mangle":	"xmlUCSIsGujarati",
		"c++":	"xmlUCSIsGujarati(int)",
		"go":	"UCSIsGujarati"
	}, {
		"mangle":	"xmlUCSIsGurmukhi",
		"c++":	"xmlUCSIsGurmukhi(int)",
		"go":	"UCSIsGurmukhi"
	}, {
		"mangle":	"xmlUCSIsHalfwidthandFullwidthForms",
		"c++":	"xmlUCSIsHalfwidthandFullwidthForms(int)",
		"go":	"UCSIsHalfwidthandFullwidthForms"
	}, {
		"mangle":	"xmlUCSIsHangulCompatibilityJamo",
		"c++":	"xmlUCSIsHangulCompatibilityJamo(int)",
		"go":	"UCSIsHangulCompatibilityJamo"
	}, {
		"mangle":	"xmlUCSIsHangulJamo",
		"c++":	"xmlUCSIsHangulJamo(int)",
		"go":	"UCSIsHangulJamo"
	}, {
		"mangle":	"xmlUCSIsHangulSyllables",
		"c++":	"xmlUCSIsHangulSyllables(int)",
		"go":	"UCSIsHangulSyllables"
	}, {
		"mangle":	"xmlUCSIsHanunoo",
		"c++":	"xmlUCSIsHanunoo(int)",
		"go":	"UCSIsHanunoo"
	}, {
		"mangle":	"xmlUCSIsHebrew",
		"c++":	"xmlUCSIsHebrew(int)",
		"go":	"UCSIsHebrew"
	}, {
		"mangle":	"xmlUCSIsHighPrivateUseSurrogates",
		"c++":	"xmlUCSIsHighPrivateUseSurrogates(int)",
		"go":	"UCSIsHighPrivateUseSurrogates"
	}, {
		"mangle":	"xmlUCSIsHighSurrogates",
		"c++":	"xmlUCSIsHighSurrogates(int)",
		"go":	"UCSIsHighSurrogates"
	}, {
		"mangle":	"xmlUCSIsHiragana",
		"c++":	"xmlUCSIsHiragana(int)",
		"go":	"UCSIsHiragana"
	}, {
		"mangle":	"xmlUCSIsIPAExtensions",
		"c++":	"xmlUCSIsIPAExtensions(int)",
		"go":	"UCSIsIPAExtensions"
	}, {
		"mangle":	"xmlUCSIsIdeographicDescriptionCharacters",
		"c++":	"xmlUCSIsIdeographicDescriptionCharacters(int)",
		"go":	"UCSIsIdeographicDescriptionCharacters"
	}, {
		"mangle":	"xmlUCSIsKanbun",
		"c++":	"xmlUCSIsKanbun(int)",
		"go":	"UCSIsKanbun"
	}, {
		"mangle":	"xmlUCSIsKangxiRadicals",
		"c++":	"xmlUCSIsKangxiRadicals(int)",
		"go":	"UCSIsKangxiRadicals"
	}, {
		"mangle":	"xmlUCSIsKannada",
		"c++":	"xmlUCSIsKannada(int)",
		"go":	"UCSIsKannada"
	}, {
		"mangle":	"xmlUCSIsKatakana",
		"c++":	"xmlUCSIsKatakana(int)",
		"go":	"UCSIsKatakana"
	}, {
		"mangle":	"xmlUCSIsKatakanaPhoneticExtensions",
		"c++":	"xmlUCSIsKatakanaPhoneticExtensions(int)",
		"go":	"UCSIsKatakanaPhoneticExtensions"
	}, {
		"mangle":	"xmlUCSIsKhmer",
		"c++":	"xmlUCSIsKhmer(int)",
		"go":	"UCSIsKhmer"
	}, {
		"mangle":	"xmlUCSIsKhmerSymbols",
		"c++":	"xmlUCSIsKhmerSymbols(int)",
		"go":	"UCSIsKhmerSymbols"
	}, {
		"mangle":	"xmlUCSIsLao",
		"c++":	"xmlUCSIsLao(int)",
		"go":	"UCSIsLao"
	}, {
		"mangle":	"xmlUCSIsLatin1Supplement",
		"c++":	"xmlUCSIsLatin1Supplement(int)",
		"go":	"UCSIsLatin1Supplement"
	}, {
		"mangle":	"xmlUCSIsLatinExtendedA",
		"c++":	"xmlUCSIsLatinExtendedA(int)",
		"go":	"UCSIsLatinExtendedA"
	}, {
		"mangle":	"xmlUCSIsLatinExtendedAdditional",
		"c++":	"xmlUCSIsLatinExtendedAdditional(int)",
		"go":	"UCSIsLatinExtendedAdditional"
	}, {
		"mangle":	"xmlUCSIsLatinExtendedB",
		"c++":	"xmlUCSIsLatinExtendedB(int)",
		"go":	"UCSIsLatinExtendedB"
	}, {
		"mangle":	"xmlUCSIsLetterlikeSymbols",
		"c++":	"xmlUCSIsLetterlikeSymbols(int)",
		"go":	"UCSIsLetterlikeSymbols"
	}, {
		"mangle":	"xmlUCSIsLimbu",
		"c++":	"xmlUCSIsLimbu(int)",
		"go":	"UCSIsLimbu"
	}, {
		"mangle":	"xmlUCSIsLinearBIdeograms",
		"c++":	"xmlUCSIsLinearBIdeograms(int)",
		"go":	"UCSIsLinearBIdeograms"
	}, {
		"mangle":	"xmlUCSIsLinearBSyllabary",
		"c++":	"xmlUCSIsLinearBSyllabary(int)",
		"go":	"UCSIsLinearBSyllabary"
	}, {
		"mangle":	"xmlUCSIsLowSurrogates",
		"c++":	"xmlUCSIsLowSurrogates(int)",
		"go":	"UCSIsLowSurrogates"
	}, {
		"mangle":	"xmlUCSIsMalayalam",
		"c++":	"xmlUCSIsMalayalam(int)",
		"go":	"UCSIsMalayalam"
	}, {
		"mangle":	"xmlUCSIsMathematicalAlphanumericSymbols",
		"c++":	"xmlUCSIsMathematicalAlphanumericSymbols(int)",
		"go":	"UCSIsMathematicalAlphanumericSymbols"
	}, {
		"mangle":	"xmlUCSIsMathematicalOperators",
		"c++":	"xmlUCSIsMathematicalOperators(int)",
		"go":	"UCSIsMathematicalOperators"
	}, {
		"mangle":	"xmlUCSIsMiscellaneousMathematicalSymbolsA",
		"c++":	"xmlUCSIsMiscellaneousMathematicalSymbolsA(int)",
		"go":	"UCSIsMiscellaneousMathematicalSymbolsA"
	}, {
		"mangle":	"xmlUCSIsMiscellaneousMathematicalSymbolsB",
		"c++":	"xmlUCSIsMiscellaneousMathematicalSymbolsB(int)",
		"go":	"UCSIsMiscellaneousMathematicalSymbolsB"
	}, {
		"mangle":	"xmlUCSIsMiscellaneousSymbols",
		"c++":	"xmlUCSIsMiscellaneousSymbols(int)",
		"go":	"UCSIsMiscellaneousSymbols"
	}, {
		"mangle":	"xmlUCSIsMiscellaneousSymbolsandArrows",
		"c++":	"xmlUCSIsMiscellaneousSymbolsandArrows(int)",
		"go":	"UCSIsMiscellaneousSymbolsandArrows"
	}, {
		"mangle":	"xmlUCSIsMiscellaneousTechnical",
		"c++":	"xmlUCSIsMiscellaneousTechnical(int)",
		"go":	"UCSIsMiscellaneousTechnical"
	}, {
		"mangle":	"xmlUCSIsMongolian",
		"c++":	"xmlUCSIsMongolian(int)",
		"go":	"UCSIsMongolian"
	}, {
		"mangle":	"xmlUCSIsMusicalSymbols",
		"c++":	"xmlUCSIsMusicalSymbols(int)",
		"go":	"UCSIsMusicalSymbols"
	}, {
		"mangle":	"xmlUCSIsMyanmar",
		"c++":	"xmlUCSIsMyanmar(int)",
		"go":	"UCSIsMyanmar"
	}, {
		"mangle":	"xmlUCSIsNumberForms",
		"c++":	"xmlUCSIsNumberForms(int)",
		"go":	"UCSIsNumberForms"
	}, {
		"mangle":	"xmlUCSIsOgham",
		"c++":	"xmlUCSIsOgham(int)",
		"go":	"UCSIsOgham"
	}, {
		"mangle":	"xmlUCSIsOldItalic",
		"c++":	"xmlUCSIsOldItalic(int)",
		"go":	"UCSIsOldItalic"
	}, {
		"mangle":	"xmlUCSIsOpticalCharacterRecognition",
		"c++":	"xmlUCSIsOpticalCharacterRecognition(int)",
		"go":	"UCSIsOpticalCharacterRecognition"
	}, {
		"mangle":	"xmlUCSIsOriya",
		"c++":	"xmlUCSIsOriya(int)",
		"go":	"UCSIsOriya"
	}, {
		"mangle":	"xmlUCSIsOsmanya",
		"c++":	"xmlUCSIsOsmanya(int)",
		"go":	"UCSIsOsmanya"
	}, {
		"mangle":	"xmlUCSIsPhoneticExtensions",
		"c++":	"xmlUCSIsPhoneticExtensions(int)",
		"go":	"UCSIsPhoneticExtensions"
	}, {
		"mangle":	"xmlUCSIsPrivateUse",
		"c++":	"xmlUCSIsPrivateUse(int)",
		"go":	"UCSIsPrivateUse"
	}, {
		"mangle":	"xmlUCSIsPrivateUseArea",
		"c++":	"xmlUCSIsPrivateUseArea(int)",
		"go":	"UCSIsPrivateUseArea"
	}, {
		"mangle":	"xmlUCSIsRunic",
		"c++":	"xmlUCSIsRunic(int)",
		"go":	"UCSIsRunic"
	}, {
		"mangle":	"xmlUCSIsShavian",
		"c++":	"xmlUCSIsShavian(int)",
		"go":	"UCSIsShavian"
	}, {
		"mangle":	"xmlUCSIsSinhala",
		"c++":	"xmlUCSIsSinhala(int)",
		"go":	"UCSIsSinhala"
	}, {
		"mangle":	"xmlUCSIsSmallFormVariants",
		"c++":	"xmlUCSIsSmallFormVariants(int)",
		"go":	"UCSIsSmallFormVariants"
	}, {
		"mangle":	"xmlUCSIsSpacingModifierLetters",
		"c++":	"xmlUCSIsSpacingModifierLetters(int)",
		"go":	"UCSIsSpacingModifierLetters"
	}, {
		"mangle":	"xmlUCSIsSpecials",
		"c++":	"xmlUCSIsSpecials(int)",
		"go":	"UCSIsSpecials"
	}, {
		"mangle":	"xmlUCSIsSuperscriptsandSubscripts",
		"c++":	"xmlUCSIsSuperscriptsandSubscripts(int)",
		"go":	"UCSIsSuperscriptsandSubscripts"
	}, {
		"mangle":	"xmlUCSIsSupplementalArrowsA",
		"c++":	"xmlUCSIsSupplementalArrowsA(int)",
		"go":	"UCSIsSupplementalArrowsA"
	}, {
		"mangle":	"xmlUCSIsSupplementalArrowsB",
		"c++":	"xmlUCSIsSupplementalArrowsB(int)",
		"go":	"UCSIsSupplementalArrowsB"
	}, {
		"mangle":	"xmlUCSIsSupplementalMathematicalOperators",
		"c++":	"xmlUCSIsSupplementalMathematicalOperators(int)",
		"go":	"UCSIsSupplementalMathematicalOperators"
	}, {
		"mangle":	"xmlUCSIsSupplementaryPrivateUseAreaA",
		"c++":	"xmlUCSIsSupplementaryPrivateUseAreaA(int)",
		"go":	"UCSIsSupplementaryPrivateUseAreaA"
	}, {
		"mangle":	"xmlUCSIsSupplementaryPrivateUseAreaB",
		"c++":	"xmlUCSIsSupplementaryPrivateUseAreaB(int)",
		"go":	"UCSIsSupplementaryPrivateUseAreaB"
	}, {
		"mangle":	"xmlUCSIsSyriac",
		"c++":	"xmlUCSIsSyriac(int)",
		"go":	"UCSIsSyriac"
	}, {
		"mangle":	"xmlUCSIsTagalog",
		"c++":	"xmlUCSIsTagalog(int)",
		"go":	"UCSIsTagalog"
	}, {
		"mangle":	"xmlUCSIsTagbanwa",
		"c++":	"xmlUCSIsTagbanwa(int)",
		"go":	"UCSIsTagbanwa"
	}, {
		"mangle":	"xmlUCSIsTags",
		"c++":	"xmlUCSIsTags(int)",
		"go":	"UCSIsTags"
	}, {
		"mangle":	"xmlUCSIsTaiLe",
		"c++":	"xmlUCSIsTaiLe(int)",
		"go":	"UCSIsTaiLe"
	}, {
		"mangle":	"xmlUCSIsTaiXuanJingSymbols",
		"c++":	"xmlUCSIsTaiXuanJingSymbols(int)",
		"go":	"UCSIsTaiXuanJingSymbols"
	}, {
		"mangle":	"xmlUCSIsTamil",
		"c++":	"xmlUCSIsTamil(int)",
		"go":	"UCSIsTamil"
	}, {
		"mangle":	"xmlUCSIsTelugu",
		"c++":	"xmlUCSIsTelugu(int)",
		"go":	"UCSIsTelugu"
	}, {
		"mangle":	"xmlUCSIsThaana",
		"c++":	"xmlUCSIsThaana(int)",
		"go":	"UCSIsThaana"
	}, {
		"mangle":	"xmlUCSIsThai",
		"c++":	"xmlUCSIsThai(int)",
		"go":	"UCSIsThai"
	}, {
		"mangle":	"xmlUCSIsTibetan",
		"c++":	"xmlUCSIsTibetan(int)",
		"go":	"UCSIsTibetan"
	}, {
		"mangle":	"xmlUCSIsUgaritic",
		"c++":	"xmlUCSIsUgaritic(int)",
		"go":	"UCSIsUgaritic"
	}, {
		"mangle":	"xmlUCSIsUnifiedCanadianAboriginalSyllabics",
		"c++":	"xmlUCSIsUnifiedCanadianAboriginalSyllabics(int)",
		"go":	"UCSIsUnifiedCanadianAboriginalSyllabics"
	}, {
		"mangle":	"xmlUCSIsVariationSelectors",
		"c++":	"xmlUCSIsVariationSelectors(int)",
		"go":	"UCSIsVariationSelectors"
	}, {
		"mangle":	"xmlUCSIsVariationSelectorsSupplement",
		"c++":	"xmlUCSIsVariationSelectorsSupplement(int)",
		"go":	"UCSIsVariationSelectorsSupplement"
	}, {
		"mangle":	"xmlUCSIsYiRadicals",
		"c++":	"xmlUCSIsYiRadicals(int)",
		"go":	"UCSIsYiRadicals"
	}, {
		"mangle":	"xmlUCSIsYiSyllables",
		"c++":	"xmlUCSIsYiSyllables(int)",
		"go":	"UCSIsYiSyllables"
	}, {
		"mangle":	"xmlUCSIsYijingHexagramSymbols",
		"c++":	"xmlUCSIsYijingHexagramSymbols(int)",
		"go":	"UCSIsYijingHexagramSymbols"
	}, {
		"mangle":	"xmlURIEscape",
		"c++":	"xmlURIEscape(const xmlChar *)",
		"go":	"(*Char).URIEscape"
	}, {
		"mangle":	"xmlURIEscapeStr",
		"c++":	"xmlURIEscapeStr(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).URIEscapeStr"
	}, {
		"mangle":	"xmlURIUnescapeString",
		"c++":	"xmlURIUnescapeString(const char *, int, char *)",
		"go":	"URIUnescapeString"
	}, {
		"mangle":	"xmlUTF8Charcmp",
		"c++":	"xmlUTF8Charcmp(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).UTF8Charcmp"
	}, {
		"mangle":	"xmlUTF8Size",
		"c++":	"xmlUTF8Size(const xmlChar *)",
		"go":	"(*Char).UTF8Size"
	}, {
		"mangle":	"xmlUTF8Strlen",
		"c++":	"xmlUTF8Strlen(const xmlChar *)",
		"go":	"(*Char).UTF8Strlen"
	}, {
		"mangle":	"xmlUTF8Strloc",
		"c++":	"xmlUTF8Strloc(const xmlChar *, const xmlChar *)",
		"go":	"(*Char).UTF8Strloc"
	}, {
		"mangle":	"xmlUTF8Strndup",
		"c++":	"xmlUTF8Strndup(const xmlChar *, int)",
		"go":	"(*Char).UTF8Strndup"
	}, {
		"mangle":	"xmlUTF8Strpos",
		"c++":	"xmlUTF8Strpos(const xmlChar *, int)",
		"go":	"(*Char).UTF8Strpos"
	}, {
		"mangle":	"xmlUTF8Strsize",
		"c++":	"xmlUTF8Strsize(const xmlChar *, int)",
		"go":	"(*Char).UTF8Strsize"
	}, {
		"mangle":	"xmlUTF8Strsub",
		"c++":	"xmlUTF8Strsub(const xmlChar *, int, int)",
		"go":	"(*Char).UTF8Strsub"
	}, {
		"mangle":	"xmlUnlinkNode",
		"c++":	"xmlUnlinkNode(xmlNodePtr)",
		"go":	"UnlinkNode"
	}, {
		"mangle":	"xmlUnlockLibrary",
		"c++":	"xmlUnlockLibrary()",
		"go":	"UnlockLibrary"
	}, {
		"mangle":	"xmlUnsetNsProp",
		"c++":	"xmlUnsetNsProp(xmlNodePtr, xmlNsPtr, const xmlChar *)",
		"go":	"UnsetNsProp"
	}, {
		"mangle":	"xmlUnsetProp",
		"c++":	"xmlUnsetProp(xmlNodePtr, const xmlChar *)",
		"go":	"UnsetProp"
	}, {
		"mangle":	"xmlValidBuildContentModel",
		"c++":	"xmlValidBuildContentModel(xmlValidCtxtPtr, xmlElementPtr)",
		"go":	"ValidBuildContentModel"
	}, {
		"mangle":	"xmlValidCtxtNormalizeAttributeValue",
		"c++":	"xmlValidCtxtNormalizeAttributeValue(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr, const xmlChar *, const xmlChar *)",
		"go":	"ValidCtxtNormalizeAttributeValue"
	}, {
		"mangle":	"xmlValidGetPotentialChildren",
		"c++":	"xmlValidGetPotentialChildren(xmlElementContent *, const xmlChar **, int *, int)",
		"go":	"(*ElementContent).ValidGetPotentialChildren"
	}, {
		"mangle":	"xmlValidGetValidElements",
		"c++":	"xmlValidGetValidElements(xmlNode *, xmlNode *, const xmlChar **, int)",
		"go":	"(*Node).ValidGetValidElements"
	}, {
		"mangle":	"xmlValidNormalizeAttributeValue",
		"c++":	"xmlValidNormalizeAttributeValue(xmlDocPtr, xmlNodePtr, const xmlChar *, const xmlChar *)",
		"go":	"ValidNormalizeAttributeValue"
	}, {
		"mangle":	"xmlValidateAttributeDecl",
		"c++":	"xmlValidateAttributeDecl(xmlValidCtxtPtr, xmlDocPtr, xmlAttributePtr)",
		"go":	"ValidateAttributeDecl"
	}, {
		"mangle":	"xmlValidateAttributeValue",
		"c++":	"xmlValidateAttributeValue(xmlAttributeType, const xmlChar *)",
		"go":	"AttributeType.ValidateAttributeValue"
	}, {
		"mangle":	"xmlValidateDocument",
		"c++":	"xmlValidateDocument(xmlValidCtxtPtr, xmlDocPtr)",
		"go":	"ValidateDocument"
	}, {
		"mangle":	"xmlValidateDocumentFinal",
		"c++":	"xmlValidateDocumentFinal(xmlValidCtxtPtr, xmlDocPtr)",
		"go":	"ValidateDocumentFinal"
	}, {
		"mangle":	"xmlValidateDtd",
		"c++":	"xmlValidateDtd(xmlValidCtxtPtr, xmlDocPtr, xmlDtdPtr)",
		"go":	"ValidateDtd"
	}, {
		"mangle":	"xmlValidateDtdFinal",
		"c++":	"xmlValidateDtdFinal(xmlValidCtxtPtr, xmlDocPtr)",
		"go":	"ValidateDtdFinal"
	}, {
		"mangle":	"xmlValidateElement",
		"c++":	"xmlValidateElement(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr)",
		"go":	"ValidateElement"
	}, {
		"mangle":	"xmlValidateElementDecl",
		"c++":	"xmlValidateElementDecl(xmlValidCtxtPtr, xmlDocPtr, xmlElementPtr)",
		"go":	"ValidateElementDecl"
	}, {
		"mangle":	"xmlValidateNCName",
		"c++":	"xmlValidateNCName(const xmlChar *, int)",
		"go":	"(*Char).ValidateNCName"
	}, {
		"mangle":	"xmlValidateNMToken",
		"c++":	"xmlValidateNMToken(const xmlChar *, int)",
		"go":	"(*Char).ValidateNMToken"
	}, {
		"mangle":	"xmlValidateName",
		"c++":	"xmlValidateName(const xmlChar *, int)",
		"go":	"(*Char).ValidateName"
	}, {
		"mangle":	"xmlValidateNameValue",
		"c++":	"xmlValidateNameValue(const xmlChar *)",
		"go":	"(*Char).ValidateNameValue"
	}, {
		"mangle":	"xmlValidateNamesValue",
		"c++":	"xmlValidateNamesValue(const xmlChar *)",
		"go":	"(*Char).ValidateNamesValue"
	}, {
		"mangle":	"xmlValidateNmtokenValue",
		"c++":	"xmlValidateNmtokenValue(const xmlChar *)",
		"go":	"(*Char).ValidateNmtokenValue"
	}, {
		"mangle":	"xmlValidateNmtokensValue",
		"c++":	"xmlValidateNmtokensValue(const xmlChar *)",
		"go":	"(*Char).ValidateNmtokensValue"
	}, {
		"mangle":	"xmlValidateNotationDecl",
		"c++":	"xmlValidateNotationDecl(xmlValidCtxtPtr, xmlDocPtr, xmlNotationPtr)",
		"go":	"ValidateNotationDecl"
	}, {
		"mangle":	"xmlValidateNotationUse",
		"c++":	"xmlValidateNotationUse(xmlValidCtxtPtr, xmlDocPtr, const xmlChar *)",
		"go":	"ValidateNotationUse"
	}, {
		"mangle":	"xmlValidateOneAttribute",
		"c++":	"xmlValidateOneAttribute(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr, xmlAttrPtr, const xmlChar *)",
		"go":	"ValidateOneAttribute"
	}, {
		"mangle":	"xmlValidateOneElement",
		"c++":	"xmlValidateOneElement(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr)",
		"go":	"ValidateOneElement"
	}, {
		"mangle":	"xmlValidateOneNamespace",
		"c++":	"xmlValidateOneNamespace(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr, const xmlChar *, xmlNsPtr, const xmlChar *)",
		"go":	"ValidateOneNamespace"
	}, {
		"mangle":	"xmlValidatePopElement",
		"c++":	"xmlValidatePopElement(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr, const xmlChar *)",
		"go":	"ValidatePopElement"
	}, {
		"mangle":	"xmlValidatePushCData",
		"c++":	"xmlValidatePushCData(xmlValidCtxtPtr, const xmlChar *, int)",
		"go":	"ValidatePushCData"
	}, {
		"mangle":	"xmlValidatePushElement",
		"c++":	"xmlValidatePushElement(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr, const xmlChar *)",
		"go":	"ValidatePushElement"
	}, {
		"mangle":	"xmlValidateQName",
		"c++":	"xmlValidateQName(const xmlChar *, int)",
		"go":	"(*Char).ValidateQName"
	}, {
		"mangle":	"xmlValidateRoot",
		"c++":	"xmlValidateRoot(xmlValidCtxtPtr, xmlDocPtr)",
		"go":	"ValidateRoot"
	}, {
		"mangle":	"xmlXIncludeFreeContext",
		"c++":	"xmlXIncludeFreeContext(xmlXIncludeCtxtPtr)",
		"go":	"XIncludeFreeContext"
	}, {
		"mangle":	"xmlXIncludeGetLastError",
		"c++":	"xmlXIncludeGetLastError(xmlXIncludeCtxtPtr)",
		"go":	"XIncludeGetLastError"
	}, {
		"mangle":	"xmlXIncludeNewContext",
		"c++":	"xmlXIncludeNewContext(xmlDocPtr)",
		"go":	"XIncludeNewContext"
	}, {
		"mangle":	"xmlXIncludeProcess",
		"c++":	"xmlXIncludeProcess(xmlDocPtr)",
		"go":	"XIncludeProcess"
	}, {
		"mangle":	"xmlXIncludeProcessFlags",
		"c++":	"xmlXIncludeProcessFlags(xmlDocPtr, int)",
		"go":	"XIncludeProcessFlags"
	}, {
		"mangle":	"xmlXIncludeProcessFlagsData",
		"c++":	"xmlXIncludeProcessFlagsData(xmlDocPtr, int, void *)",
		"go":	"XIncludeProcessFlagsData"
	}, {
		"mangle":	"xmlXIncludeProcessNode",
		"c++":	"xmlXIncludeProcessNode(xmlXIncludeCtxtPtr, xmlNodePtr)",
		"go":	"XIncludeProcessNode"
	}, {
		"mangle":	"xmlXIncludeProcessTree",
		"c++":	"xmlXIncludeProcessTree(xmlNodePtr)",
		"go":	"XIncludeProcessTree"
	}, {
		"mangle":	"xmlXIncludeProcessTreeFlags",
		"c++":	"xmlXIncludeProcessTreeFlags(xmlNodePtr, int)",
		"go":	"XIncludeProcessTreeFlags"
	}, {
		"mangle":	"xmlXIncludeProcessTreeFlagsData",
		"c++":	"xmlXIncludeProcessTreeFlagsData(xmlNodePtr, int, void *)",
		"go":	"XIncludeProcessTreeFlagsData"
	}, {
		"mangle":	"xmlXIncludeSetErrorHandler",
		"c++":	"xmlXIncludeSetErrorHandler(xmlXIncludeCtxtPtr, xmlStructuredErrorFunc, void *)",
		"go":	"XIncludeSetErrorHandler"
	}, {
		"mangle":	"xmlXIncludeSetFlags",
		"c++":	"xmlXIncludeSetFlags(xmlXIncludeCtxtPtr, int)",
		"go":	"XIncludeSetFlags"
	}, {
		"mangle":	"xmlXPathAddValues",
		"c++":	"xmlXPathAddValues(xmlXPathParserContextPtr)",
		"go":	"XPathAddValues"
	}, {
		"mangle":	"xmlXPathBooleanFunction",
		"c++":	"xmlXPathBooleanFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathBooleanFunction"
	}, {
		"mangle":	"xmlXPathCastBooleanToNumber",
		"c++":	"xmlXPathCastBooleanToNumber(int)",
		"go":	"XPathCastBooleanToNumber"
	}, {
		"mangle":	"xmlXPathCastBooleanToString",
		"c++":	"xmlXPathCastBooleanToString(int)",
		"go":	"XPathCastBooleanToString"
	}, {
		"mangle":	"xmlXPathCastNodeSetToBoolean",
		"c++":	"xmlXPathCastNodeSetToBoolean(xmlNodeSetPtr)",
		"go":	"XPathCastNodeSetToBoolean"
	}, {
		"mangle":	"xmlXPathCastNodeSetToNumber",
		"c++":	"xmlXPathCastNodeSetToNumber(xmlNodeSetPtr)",
		"go":	"XPathCastNodeSetToNumber"
	}, {
		"mangle":	"xmlXPathCastNodeSetToString",
		"c++":	"xmlXPathCastNodeSetToString(xmlNodeSetPtr)",
		"go":	"XPathCastNodeSetToString"
	}, {
		"mangle":	"xmlXPathCastNodeToNumber",
		"c++":	"xmlXPathCastNodeToNumber(xmlNodePtr)",
		"go":	"XPathCastNodeToNumber"
	}, {
		"mangle":	"xmlXPathCastNodeToString",
		"c++":	"xmlXPathCastNodeToString(xmlNodePtr)",
		"go":	"XPathCastNodeToString"
	}, {
		"mangle":	"xmlXPathCastNumberToBoolean",
		"c++":	"xmlXPathCastNumberToBoolean(double)",
		"go":	"XPathCastNumberToBoolean"
	}, {
		"mangle":	"xmlXPathCastNumberToString",
		"c++":	"xmlXPathCastNumberToString(double)",
		"go":	"XPathCastNumberToString"
	}, {
		"mangle":	"xmlXPathCastStringToBoolean",
		"c++":	"xmlXPathCastStringToBoolean(const xmlChar *)",
		"go":	"(*Char).XPathCastStringToBoolean"
	}, {
		"mangle":	"xmlXPathCastStringToNumber",
		"c++":	"xmlXPathCastStringToNumber(const xmlChar *)",
		"go":	"(*Char).XPathCastStringToNumber"
	}, {
		"mangle":	"xmlXPathCastToBoolean",
		"c++":	"xmlXPathCastToBoolean(xmlXPathObjectPtr)",
		"go":	"XPathCastToBoolean"
	}, {
		"mangle":	"xmlXPathCastToNumber",
		"c++":	"xmlXPathCastToNumber(xmlXPathObjectPtr)",
		"go":	"XPathCastToNumber"
	}, {
		"mangle":	"xmlXPathCastToString",
		"c++":	"xmlXPathCastToString(xmlXPathObjectPtr)",
		"go":	"XPathCastToString"
	}, {
		"mangle":	"xmlXPathCeilingFunction",
		"c++":	"xmlXPathCeilingFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathCeilingFunction"
	}, {
		"mangle":	"xmlXPathCmpNodes",
		"c++":	"xmlXPathCmpNodes(xmlNodePtr, xmlNodePtr)",
		"go":	"XPathCmpNodes"
	}, {
		"mangle":	"xmlXPathCompareValues",
		"c++":	"xmlXPathCompareValues(xmlXPathParserContextPtr, int, int)",
		"go":	"XPathCompareValues"
	}, {
		"mangle":	"xmlXPathCompile",
		"c++":	"xmlXPathCompile(const xmlChar *)",
		"go":	"(*Char).XPathCompile"
	}, {
		"mangle":	"xmlXPathCompiledEval",
		"c++":	"xmlXPathCompiledEval(xmlXPathCompExprPtr, xmlXPathContextPtr)",
		"go":	"XPathCompiledEval"
	}, {
		"mangle":	"xmlXPathCompiledEvalToBoolean",
		"c++":	"xmlXPathCompiledEvalToBoolean(xmlXPathCompExprPtr, xmlXPathContextPtr)",
		"go":	"XPathCompiledEvalToBoolean"
	}, {
		"mangle":	"xmlXPathConcatFunction",
		"c++":	"xmlXPathConcatFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathConcatFunction"
	}, {
		"mangle":	"xmlXPathContainsFunction",
		"c++":	"xmlXPathContainsFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathContainsFunction"
	}, {
		"mangle":	"xmlXPathContextSetCache",
		"c++":	"xmlXPathContextSetCache(xmlXPathContextPtr, int, int, int)",
		"go":	"XPathContextSetCache"
	}, {
		"mangle":	"xmlXPathConvertBoolean",
		"c++":	"xmlXPathConvertBoolean(xmlXPathObjectPtr)",
		"go":	"XPathConvertBoolean"
	}, {
		"mangle":	"xmlXPathConvertNumber",
		"c++":	"xmlXPathConvertNumber(xmlXPathObjectPtr)",
		"go":	"XPathConvertNumber"
	}, {
		"mangle":	"xmlXPathConvertString",
		"c++":	"xmlXPathConvertString(xmlXPathObjectPtr)",
		"go":	"XPathConvertString"
	}, {
		"mangle":	"xmlXPathCountFunction",
		"c++":	"xmlXPathCountFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathCountFunction"
	}, {
		"mangle":	"xmlXPathCtxtCompile",
		"c++":	"xmlXPathCtxtCompile(xmlXPathContextPtr, const xmlChar *)",
		"go":	"XPathCtxtCompile"
	}, {
		"mangle":	"xmlXPathDebugDumpCompExpr",
		"c++":	"xmlXPathDebugDumpCompExpr(FILE *, xmlXPathCompExprPtr, int)",
		"go":	"XPathDebugDumpCompExpr"
	}, {
		"mangle":	"xmlXPathDebugDumpObject",
		"c++":	"xmlXPathDebugDumpObject(FILE *, xmlXPathObjectPtr, int)",
		"go":	"XPathDebugDumpObject"
	}, {
		"mangle":	"xmlXPathDifference",
		"c++":	"xmlXPathDifference(xmlNodeSetPtr, xmlNodeSetPtr)",
		"go":	"XPathDifference"
	}, {
		"mangle":	"xmlXPathDistinct",
		"c++":	"xmlXPathDistinct(xmlNodeSetPtr)",
		"go":	"XPathDistinct"
	}, {
		"mangle":	"xmlXPathDistinctSorted",
		"c++":	"xmlXPathDistinctSorted(xmlNodeSetPtr)",
		"go":	"XPathDistinctSorted"
	}, {
		"mangle":	"xmlXPathDivValues",
		"c++":	"xmlXPathDivValues(xmlXPathParserContextPtr)",
		"go":	"XPathDivValues"
	}, {
		"mangle":	"xmlXPathEqualValues",
		"c++":	"xmlXPathEqualValues(xmlXPathParserContextPtr)",
		"go":	"XPathEqualValues"
	}, {
		"mangle":	"xmlXPathErr",
		"c++":	"xmlXPathErr(xmlXPathParserContextPtr, int)",
		"go":	"XPathErr"
	}, {
		"mangle":	"xmlXPathEval",
		"c++":	"xmlXPathEval(const xmlChar *, xmlXPathContextPtr)",
		"go":	"(*Char).XPathEval"
	}, {
		"mangle":	"xmlXPathEvalExpr",
		"c++":	"xmlXPathEvalExpr(xmlXPathParserContextPtr)",
		"go":	"XPathEvalExpr"
	}, {
		"mangle":	"xmlXPathEvalExpression",
		"c++":	"xmlXPathEvalExpression(const xmlChar *, xmlXPathContextPtr)",
		"go":	"(*Char).XPathEvalExpression"
	}, {
		"mangle":	"xmlXPathEvalPredicate",
		"c++":	"xmlXPathEvalPredicate(xmlXPathContextPtr, xmlXPathObjectPtr)",
		"go":	"XPathEvalPredicate"
	}, {
		"mangle":	"xmlXPathEvaluatePredicateResult",
		"c++":	"xmlXPathEvaluatePredicateResult(xmlXPathParserContextPtr, xmlXPathObjectPtr)",
		"go":	"XPathEvaluatePredicateResult"
	}, {
		"mangle":	"xmlXPathFalseFunction",
		"c++":	"xmlXPathFalseFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathFalseFunction"
	}, {
		"mangle":	"xmlXPathFloorFunction",
		"c++":	"xmlXPathFloorFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathFloorFunction"
	}, {
		"mangle":	"xmlXPathFreeCompExpr",
		"c++":	"xmlXPathFreeCompExpr(xmlXPathCompExprPtr)",
		"go":	"XPathFreeCompExpr"
	}, {
		"mangle":	"xmlXPathFreeContext",
		"c++":	"xmlXPathFreeContext(xmlXPathContextPtr)",
		"go":	"XPathFreeContext"
	}, {
		"mangle":	"xmlXPathFreeNodeSet",
		"c++":	"xmlXPathFreeNodeSet(xmlNodeSetPtr)",
		"go":	"XPathFreeNodeSet"
	}, {
		"mangle":	"xmlXPathFreeNodeSetList",
		"c++":	"xmlXPathFreeNodeSetList(xmlXPathObjectPtr)",
		"go":	"XPathFreeNodeSetList"
	}, {
		"mangle":	"xmlXPathFreeObject",
		"c++":	"xmlXPathFreeObject(xmlXPathObjectPtr)",
		"go":	"XPathFreeObject"
	}, {
		"mangle":	"xmlXPathFreeParserContext",
		"c++":	"xmlXPathFreeParserContext(xmlXPathParserContextPtr)",
		"go":	"XPathFreeParserContext"
	}, {
		"mangle":	"xmlXPathFunctionLookup",
		"c++":	"xmlXPathFunctionLookup(xmlXPathContextPtr, const xmlChar *)",
		"go":	"XPathFunctionLookup"
	}, {
		"mangle":	"xmlXPathFunctionLookupNS",
		"c++":	"xmlXPathFunctionLookupNS(xmlXPathContextPtr, const xmlChar *, const xmlChar *)",
		"go":	"XPathFunctionLookupNS"
	}, {
		"mangle":	"xmlXPathHasSameNodes",
		"c++":	"xmlXPathHasSameNodes(xmlNodeSetPtr, xmlNodeSetPtr)",
		"go":	"XPathHasSameNodes"
	}, {
		"mangle":	"xmlXPathIdFunction",
		"c++":	"xmlXPathIdFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathIdFunction"
	}, {
		"mangle":	"xmlXPathInit",
		"c++":	"xmlXPathInit()",
		"go":	"XPathInit"
	}, {
		"mangle":	"xmlXPathIntersection",
		"c++":	"xmlXPathIntersection(xmlNodeSetPtr, xmlNodeSetPtr)",
		"go":	"XPathIntersection"
	}, {
		"mangle":	"xmlXPathIsInf",
		"c++":	"xmlXPathIsInf(double)",
		"go":	"XPathIsInf"
	}, {
		"mangle":	"xmlXPathIsNaN",
		"c++":	"xmlXPathIsNaN(double)",
		"go":	"XPathIsNaN"
	}, {
		"mangle":	"xmlXPathIsNodeType",
		"c++":	"xmlXPathIsNodeType(const xmlChar *)",
		"go":	"(*Char).XPathIsNodeType"
	}, {
		"mangle":	"xmlXPathLangFunction",
		"c++":	"xmlXPathLangFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathLangFunction"
	}, {
		"mangle":	"xmlXPathLastFunction",
		"c++":	"xmlXPathLastFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathLastFunction"
	}, {
		"mangle":	"xmlXPathLeading",
		"c++":	"xmlXPathLeading(xmlNodeSetPtr, xmlNodeSetPtr)",
		"go":	"XPathLeading"
	}, {
		"mangle":	"xmlXPathLeadingSorted",
		"c++":	"xmlXPathLeadingSorted(xmlNodeSetPtr, xmlNodeSetPtr)",
		"go":	"XPathLeadingSorted"
	}, {
		"mangle":	"xmlXPathLocalNameFunction",
		"c++":	"xmlXPathLocalNameFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathLocalNameFunction"
	}, {
		"mangle":	"xmlXPathModValues",
		"c++":	"xmlXPathModValues(xmlXPathParserContextPtr)",
		"go":	"XPathModValues"
	}, {
		"mangle":	"xmlXPathMultValues",
		"c++":	"xmlXPathMultValues(xmlXPathParserContextPtr)",
		"go":	"XPathMultValues"
	}, {
		"mangle":	"xmlXPathNamespaceURIFunction",
		"c++":	"xmlXPathNamespaceURIFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathNamespaceURIFunction"
	}, {
		"mangle":	"xmlXPathNewBoolean",
		"c++":	"xmlXPathNewBoolean(int)",
		"go":	"XPathNewBoolean"
	}, {
		"mangle":	"xmlXPathNewCString",
		"c++":	"xmlXPathNewCString(const char *)",
		"go":	"XPathNewCString"
	}, {
		"mangle":	"xmlXPathNewContext",
		"c++":	"xmlXPathNewContext(xmlDocPtr)",
		"go":	"XPathNewContext"
	}, {
		"mangle":	"xmlXPathNewFloat",
		"c++":	"xmlXPathNewFloat(double)",
		"go":	"XPathNewFloat"
	}, {
		"mangle":	"xmlXPathNewNodeSet",
		"c++":	"xmlXPathNewNodeSet(xmlNodePtr)",
		"go":	"XPathNewNodeSet"
	}, {
		"mangle":	"xmlXPathNewNodeSetList",
		"c++":	"xmlXPathNewNodeSetList(xmlNodeSetPtr)",
		"go":	"XPathNewNodeSetList"
	}, {
		"mangle":	"xmlXPathNewParserContext",
		"c++":	"xmlXPathNewParserContext(const xmlChar *, xmlXPathContextPtr)",
		"go":	"(*Char).XPathNewParserContext"
	}, {
		"mangle":	"xmlXPathNewString",
		"c++":	"xmlXPathNewString(const xmlChar *)",
		"go":	"(*Char).XPathNewString"
	}, {
		"mangle":	"xmlXPathNewValueTree",
		"c++":	"xmlXPathNewValueTree(xmlNodePtr)",
		"go":	"XPathNewValueTree"
	}, {
		"mangle":	"xmlXPathNextAncestor",
		"c++":	"xmlXPathNextAncestor(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XPathNextAncestor"
	}, {
		"mangle":	"xmlXPathNextAncestorOrSelf",
		"c++":	"xmlXPathNextAncestorOrSelf(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XPathNextAncestorOrSelf"
	}, {
		"mangle":	"xmlXPathNextAttribute",
		"c++":	"xmlXPathNextAttribute(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XPathNextAttribute"
	}, {
		"mangle":	"xmlXPathNextChild",
		"c++":	"xmlXPathNextChild(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XPathNextChild"
	}, {
		"mangle":	"xmlXPathNextDescendant",
		"c++":	"xmlXPathNextDescendant(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XPathNextDescendant"
	}, {
		"mangle":	"xmlXPathNextDescendantOrSelf",
		"c++":	"xmlXPathNextDescendantOrSelf(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XPathNextDescendantOrSelf"
	}, {
		"mangle":	"xmlXPathNextFollowing",
		"c++":	"xmlXPathNextFollowing(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XPathNextFollowing"
	}, {
		"mangle":	"xmlXPathNextFollowingSibling",
		"c++":	"xmlXPathNextFollowingSibling(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XPathNextFollowingSibling"
	}, {
		"mangle":	"xmlXPathNextNamespace",
		"c++":	"xmlXPathNextNamespace(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XPathNextNamespace"
	}, {
		"mangle":	"xmlXPathNextParent",
		"c++":	"xmlXPathNextParent(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XPathNextParent"
	}, {
		"mangle":	"xmlXPathNextPreceding",
		"c++":	"xmlXPathNextPreceding(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XPathNextPreceding"
	}, {
		"mangle":	"xmlXPathNextPrecedingSibling",
		"c++":	"xmlXPathNextPrecedingSibling(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XPathNextPrecedingSibling"
	}, {
		"mangle":	"xmlXPathNextSelf",
		"c++":	"xmlXPathNextSelf(xmlXPathParserContextPtr, xmlNodePtr)",
		"go":	"XPathNextSelf"
	}, {
		"mangle":	"xmlXPathNodeEval",
		"c++":	"xmlXPathNodeEval(xmlNodePtr, const xmlChar *, xmlXPathContextPtr)",
		"go":	"XPathNodeEval"
	}, {
		"mangle":	"xmlXPathNodeLeading",
		"c++":	"xmlXPathNodeLeading(xmlNodeSetPtr, xmlNodePtr)",
		"go":	"XPathNodeLeading"
	}, {
		"mangle":	"xmlXPathNodeLeadingSorted",
		"c++":	"xmlXPathNodeLeadingSorted(xmlNodeSetPtr, xmlNodePtr)",
		"go":	"XPathNodeLeadingSorted"
	}, {
		"mangle":	"xmlXPathNodeSetAdd",
		"c++":	"xmlXPathNodeSetAdd(xmlNodeSetPtr, xmlNodePtr)",
		"go":	"XPathNodeSetAdd"
	}, {
		"mangle":	"xmlXPathNodeSetAddNs",
		"c++":	"xmlXPathNodeSetAddNs(xmlNodeSetPtr, xmlNodePtr, xmlNsPtr)",
		"go":	"XPathNodeSetAddNs"
	}, {
		"mangle":	"xmlXPathNodeSetAddUnique",
		"c++":	"xmlXPathNodeSetAddUnique(xmlNodeSetPtr, xmlNodePtr)",
		"go":	"XPathNodeSetAddUnique"
	}, {
		"mangle":	"xmlXPathNodeSetContains",
		"c++":	"xmlXPathNodeSetContains(xmlNodeSetPtr, xmlNodePtr)",
		"go":	"XPathNodeSetContains"
	}, {
		"mangle":	"xmlXPathNodeSetCreate",
		"c++":	"xmlXPathNodeSetCreate(xmlNodePtr)",
		"go":	"XPathNodeSetCreate"
	}, {
		"mangle":	"xmlXPathNodeSetDel",
		"c++":	"xmlXPathNodeSetDel(xmlNodeSetPtr, xmlNodePtr)",
		"go":	"XPathNodeSetDel"
	}, {
		"mangle":	"xmlXPathNodeSetFreeNs",
		"c++":	"xmlXPathNodeSetFreeNs(xmlNsPtr)",
		"go":	"XPathNodeSetFreeNs"
	}, {
		"mangle":	"xmlXPathNodeSetMerge",
		"c++":	"xmlXPathNodeSetMerge(xmlNodeSetPtr, xmlNodeSetPtr)",
		"go":	"XPathNodeSetMerge"
	}, {
		"mangle":	"xmlXPathNodeSetRemove",
		"c++":	"xmlXPathNodeSetRemove(xmlNodeSetPtr, int)",
		"go":	"XPathNodeSetRemove"
	}, {
		"mangle":	"xmlXPathNodeSetSort",
		"c++":	"xmlXPathNodeSetSort(xmlNodeSetPtr)",
		"go":	"XPathNodeSetSort"
	}, {
		"mangle":	"xmlXPathNodeTrailing",
		"c++":	"xmlXPathNodeTrailing(xmlNodeSetPtr, xmlNodePtr)",
		"go":	"XPathNodeTrailing"
	}, {
		"mangle":	"xmlXPathNodeTrailingSorted",
		"c++":	"xmlXPathNodeTrailingSorted(xmlNodeSetPtr, xmlNodePtr)",
		"go":	"XPathNodeTrailingSorted"
	}, {
		"mangle":	"xmlXPathNormalizeFunction",
		"c++":	"xmlXPathNormalizeFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathNormalizeFunction"
	}, {
		"mangle":	"xmlXPathNotEqualValues",
		"c++":	"xmlXPathNotEqualValues(xmlXPathParserContextPtr)",
		"go":	"XPathNotEqualValues"
	}, {
		"mangle":	"xmlXPathNotFunction",
		"c++":	"xmlXPathNotFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathNotFunction"
	}, {
		"mangle":	"xmlXPathNsLookup",
		"c++":	"xmlXPathNsLookup(xmlXPathContextPtr, const xmlChar *)",
		"go":	"XPathNsLookup"
	}, {
		"mangle":	"xmlXPathNumberFunction",
		"c++":	"xmlXPathNumberFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathNumberFunction"
	}, {
		"mangle":	"xmlXPathObjectCopy",
		"c++":	"xmlXPathObjectCopy(xmlXPathObjectPtr)",
		"go":	"XPathObjectCopy"
	}, {
		"mangle":	"xmlXPathOrderDocElems",
		"c++":	"xmlXPathOrderDocElems(xmlDocPtr)",
		"go":	"XPathOrderDocElems"
	}, {
		"mangle":	"xmlXPathParseNCName",
		"c++":	"xmlXPathParseNCName(xmlXPathParserContextPtr)",
		"go":	"XPathParseNCName"
	}, {
		"mangle":	"xmlXPathParseName",
		"c++":	"xmlXPathParseName(xmlXPathParserContextPtr)",
		"go":	"XPathParseName"
	}, {
		"mangle":	"xmlXPathPopBoolean",
		"c++":	"xmlXPathPopBoolean(xmlXPathParserContextPtr)",
		"go":	"XPathPopBoolean"
	}, {
		"mangle":	"xmlXPathPopExternal",
		"c++":	"xmlXPathPopExternal(xmlXPathParserContextPtr)",
		"go":	"XPathPopExternal"
	}, {
		"mangle":	"xmlXPathPopNodeSet",
		"c++":	"xmlXPathPopNodeSet(xmlXPathParserContextPtr)",
		"go":	"XPathPopNodeSet"
	}, {
		"mangle":	"xmlXPathPopNumber",
		"c++":	"xmlXPathPopNumber(xmlXPathParserContextPtr)",
		"go":	"XPathPopNumber"
	}, {
		"mangle":	"xmlXPathPopString",
		"c++":	"xmlXPathPopString(xmlXPathParserContextPtr)",
		"go":	"XPathPopString"
	}, {
		"mangle":	"xmlXPathPositionFunction",
		"c++":	"xmlXPathPositionFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathPositionFunction"
	}, {
		"mangle":	"xmlXPathRegisterAllFunctions",
		"c++":	"xmlXPathRegisterAllFunctions(xmlXPathContextPtr)",
		"go":	"XPathRegisterAllFunctions"
	}, {
		"mangle":	"xmlXPathRegisterFunc",
		"c++":	"xmlXPathRegisterFunc(xmlXPathContextPtr, const xmlChar *, xmlXPathFunction)",
		"go":	"XPathRegisterFunc"
	}, {
		"mangle":	"xmlXPathRegisterFuncLookup",
		"c++":	"xmlXPathRegisterFuncLookup(xmlXPathContextPtr, xmlXPathFuncLookupFunc, void *)",
		"go":	"XPathRegisterFuncLookup"
	}, {
		"mangle":	"xmlXPathRegisterFuncNS",
		"c++":	"xmlXPathRegisterFuncNS(xmlXPathContextPtr, const xmlChar *, const xmlChar *, xmlXPathFunction)",
		"go":	"XPathRegisterFuncNS"
	}, {
		"mangle":	"xmlXPathRegisterNs",
		"c++":	"xmlXPathRegisterNs(xmlXPathContextPtr, const xmlChar *, const xmlChar *)",
		"go":	"XPathRegisterNs"
	}, {
		"mangle":	"xmlXPathRegisterVariable",
		"c++":	"xmlXPathRegisterVariable(xmlXPathContextPtr, const xmlChar *, xmlXPathObjectPtr)",
		"go":	"XPathRegisterVariable"
	}, {
		"mangle":	"xmlXPathRegisterVariableLookup",
		"c++":	"xmlXPathRegisterVariableLookup(xmlXPathContextPtr, xmlXPathVariableLookupFunc, void *)",
		"go":	"XPathRegisterVariableLookup"
	}, {
		"mangle":	"xmlXPathRegisterVariableNS",
		"c++":	"xmlXPathRegisterVariableNS(xmlXPathContextPtr, const xmlChar *, const xmlChar *, xmlXPathObjectPtr)",
		"go":	"XPathRegisterVariableNS"
	}, {
		"mangle":	"xmlXPathRegisteredFuncsCleanup",
		"c++":	"xmlXPathRegisteredFuncsCleanup(xmlXPathContextPtr)",
		"go":	"XPathRegisteredFuncsCleanup"
	}, {
		"mangle":	"xmlXPathRegisteredNsCleanup",
		"c++":	"xmlXPathRegisteredNsCleanup(xmlXPathContextPtr)",
		"go":	"XPathRegisteredNsCleanup"
	}, {
		"mangle":	"xmlXPathRegisteredVariablesCleanup",
		"c++":	"xmlXPathRegisteredVariablesCleanup(xmlXPathContextPtr)",
		"go":	"XPathRegisteredVariablesCleanup"
	}, {
		"mangle":	"xmlXPathRoot",
		"c++":	"xmlXPathRoot(xmlXPathParserContextPtr)",
		"go":	"XPathRoot"
	}, {
		"mangle":	"xmlXPathRoundFunction",
		"c++":	"xmlXPathRoundFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathRoundFunction"
	}, {
		"mangle":	"xmlXPathSetContextNode",
		"c++":	"xmlXPathSetContextNode(xmlNodePtr, xmlXPathContextPtr)",
		"go":	"XPathSetContextNode"
	}, {
		"mangle":	"xmlXPathSetErrorHandler",
		"c++":	"xmlXPathSetErrorHandler(xmlXPathContextPtr, xmlStructuredErrorFunc, void *)",
		"go":	"XPathSetErrorHandler"
	}, {
		"mangle":	"xmlXPathStartsWithFunction",
		"c++":	"xmlXPathStartsWithFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathStartsWithFunction"
	}, {
		"mangle":	"xmlXPathStringEvalNumber",
		"c++":	"xmlXPathStringEvalNumber(const xmlChar *)",
		"go":	"(*Char).XPathStringEvalNumber"
	}, {
		"mangle":	"xmlXPathStringFunction",
		"c++":	"xmlXPathStringFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathStringFunction"
	}, {
		"mangle":	"xmlXPathStringLengthFunction",
		"c++":	"xmlXPathStringLengthFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathStringLengthFunction"
	}, {
		"mangle":	"xmlXPathSubValues",
		"c++":	"xmlXPathSubValues(xmlXPathParserContextPtr)",
		"go":	"XPathSubValues"
	}, {
		"mangle":	"xmlXPathSubstringAfterFunction",
		"c++":	"xmlXPathSubstringAfterFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathSubstringAfterFunction"
	}, {
		"mangle":	"xmlXPathSubstringBeforeFunction",
		"c++":	"xmlXPathSubstringBeforeFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathSubstringBeforeFunction"
	}, {
		"mangle":	"xmlXPathSubstringFunction",
		"c++":	"xmlXPathSubstringFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathSubstringFunction"
	}, {
		"mangle":	"xmlXPathSumFunction",
		"c++":	"xmlXPathSumFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathSumFunction"
	}, {
		"mangle":	"xmlXPathTrailing",
		"c++":	"xmlXPathTrailing(xmlNodeSetPtr, xmlNodeSetPtr)",
		"go":	"XPathTrailing"
	}, {
		"mangle":	"xmlXPathTrailingSorted",
		"c++":	"xmlXPathTrailingSorted(xmlNodeSetPtr, xmlNodeSetPtr)",
		"go":	"XPathTrailingSorted"
	}, {
		"mangle":	"xmlXPathTranslateFunction",
		"c++":	"xmlXPathTranslateFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathTranslateFunction"
	}, {
		"mangle":	"xmlXPathTrueFunction",
		"c++":	"xmlXPathTrueFunction(xmlXPathParserContextPtr, int)",
		"go":	"XPathTrueFunction"
	}, {
		"mangle":	"xmlXPathValueFlipSign",
		"c++":	"xmlXPathValueFlipSign(xmlXPathParserContextPtr)",
		"go":	"XPathValueFlipSign"
	}, {
		"mangle":	"xmlXPathVariableLookup",
		"c++":	"xmlXPathVariableLookup(xmlXPathContextPtr, const xmlChar *)",
		"go":	"XPathVariableLookup"
	}, {
		"mangle":	"xmlXPathVariableLookupNS",
		"c++":	"xmlXPathVariableLookupNS(xmlXPathContextPtr, const xmlChar *, const xmlChar *)",
		"go":	"XPathVariableLookupNS"
	}, {
		"mangle":	"xmlXPathWrapCString",
		"c++":	"xmlXPathWrapCString(char *)",
		"go":	"XPathWrapCString"
	}, {
		"mangle":	"xmlXPathWrapExternal",
		"c++":	"xmlXPathWrapExternal(void *)",
		"go":	"XPathWrapExternal"
	}, {
		"mangle":	"xmlXPathWrapNodeSet",
		"c++":	"xmlXPathWrapNodeSet(xmlNodeSetPtr)",
		"go":	"XPathWrapNodeSet"
	}, {
		"mangle":	"xmlXPathWrapString",
		"c++":	"xmlXPathWrapString(xmlChar *)",
		"go":	"(*Char).XPathWrapString"
	}, {
		"mangle":	"xmlXPatherror",
		"c++":	"xmlXPatherror(xmlXPathParserContextPtr, const char *, int, int)",
		"go":	"XPatherror"
	}, {
		"mangle":	"xmlXPtrEval",
		"c++":	"xmlXPtrEval(const xmlChar *, xmlXPathContextPtr)",
		"go":	"(*Char).XPtrEval"
	}, {
		"mangle":	"xmlXPtrNewContext",
		"c++":	"xmlXPtrNewContext(xmlDocPtr, xmlNodePtr, xmlNodePtr)",
		"go":	"XPtrNewContext"
	}]